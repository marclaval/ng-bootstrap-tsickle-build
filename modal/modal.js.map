{"version":3,"file":"modal.js","sourceRoot":"","sources":["../../../src/modal/modal.ts"],"names":[],"mappings":"OAAO,EAAC,UAAU,EAAE,QAAQ,EAAE,wBAAwB,EAAC,MAAM,qBAAqB;OAE3E,EAAC,aAAa,EAAC,MAAM,eAAe;AA4B3C;;;GAGG;AACH;IACA;;;;OAIG;IACH,YACQ,UAAoC,EACpC,SAAmB,EACnB,WAA0B;QAF1B,eAAU,GAAV,UAAU,CAA0B;QACpC,cAAS,GAAT,SAAS,CAAU;QACnB,gBAAW,GAAX,WAAW,CAAe;IAAG,CAAC;IACtC;;;;;;;;OAQG;IACH,IAAI,CAAC,OAAY,EAAE,OAAO,GAAoB,EAAE;QAC5C,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;IAClF,CAAC;AAUH,CAAC;AATM,mBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,uBAAc,GAAmE,MAAM;IAC9F,EAAC,IAAI,EAAE,wBAAwB,GAAG;IAClC,EAAC,IAAI,EAAE,QAAQ,GAAG;IAClB,EAAC,IAAI,EAAE,aAAa,GAAG;CACtB,CACA;AAED;IACA,gBAAgB;IAChB,QAAQ,CAAC,UAAU,CAAC;IACpB;;;OAGG;IACH,QAAQ,CAAC,cAAc,CAAC;IACxB,gBAAgB;IAChB,QAAQ,CAAC,SAAS,CAAC,UAAU,CAAC;IAC9B,gBAAgB;IAChB,QAAQ,CAAC,SAAS,CAAC,SAAS,CAAC;IAC7B,gBAAgB;IAChB,QAAQ,CAAC,SAAS,CAAC,WAAW,CAAC;AAC/B,CAAC","sourcesContent":["import {Injectable, Injector, ComponentFactoryResolver} from '@angular/core/index';\n\nimport {NgbModalStack} from './modal-stack';\nimport {NgbModalRef} from './modal-ref';\n\n/**\n * Represent options available when opening new modal windows.\n */\nexport interface NgbModalOptions {\n  /**\n   * Whether a backdrop element should be created for a given modal (true by default).\n   * Alternatively, specify 'static' for a backdrop which doesn't close the modal on click.\n   */\n  backdrop?: boolean | 'static';\n\n  /**\n   * Whether to close the modal when escape key is pressed (true by default).\n   */\n  keyboard?: boolean;\n\n  /**\n   * Size of a new modal window.\n   */\n  size?: 'sm' | 'lg';\n\n  /**\n   * Custom class to append to the modal window\n   */\n  windowClass?: string;\n}\n/**\n * A service to open modal windows. Creating a modal is straightforward: create a template and pass it as an argument to\n * the \"open\" method!\n */\nexport class NgbModal {\n/**\n * @param {?} _moduleCFR\n * @param {?} _injector\n * @param {?} _modalStack\n */\nconstructor(\nprivate _moduleCFR: ComponentFactoryResolver,\nprivate _injector: Injector,\nprivate _modalStack: NgbModalStack) {}\n/**\n * Opens a new modal window with the specified content and using supplied options. Content can be provided\n * as a TemplateRef or a component type. If you pass a component type as content than instances of those\n * components can be injected with an instance of the NgbActiveModal class. You can use methods on the\n * NgbActiveModal class to close / dismiss modals from \"inside\" of a component.\n * @param {?} content\n * @param {?=} options\n * @return {?}\n */\nopen(content: any, options: NgbModalOptions = {}): NgbModalRef {\n    return this._modalStack.open(this._moduleCFR, this._injector, content, options);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ComponentFactoryResolver, },\n{type: Injector, },\n{type: NgbModalStack, },\n];\n}\n\nfunction NgbModal_tsickle_Closure_declarations() {\n/** @type {?} */\nNgbModal.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgbModal.ctorParameters;\n/** @type {?} */\nNgbModal.prototype._moduleCFR;\n/** @type {?} */\nNgbModal.prototype._injector;\n/** @type {?} */\nNgbModal.prototype._modalStack;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}