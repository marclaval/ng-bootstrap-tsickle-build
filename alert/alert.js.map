{"version":3,"sources":["../../../src/alert/alert.ts"],"names":[],"mappings":";;;;;;;;;OAAO,EACL,SAAS,EACT,KAAK,EACL,MAAM,EACN,YAAY,EACZ,uBAAuB,EACxB,MAAM,eAAe;AACtB,MAAM,SAAS,GAAqB,SAAS,CAAC,CAAE,mCAAmC;AACnF,MAAM,KAAK,GAAqB,KAAK,CAAC,CAAE,mCAAmC;AAC3E,MAAM,MAAM,GAAqB,MAAM,CAAC,CAAE,mCAAmC;AAC7E,MAAM,YAAY,GAAqB,YAAY,CAAC,CAAE,mCAAmC;AACzF,MAAM,uBAAuB,GAAqB,uBAAuB,CAAC,CAAE,mCAAmC;OAHxG,EAAA,cAAE,EAAc,MAAA,gBAAA;AAMvB,MAAM,cAAc,GAAqB,cAAc,CAAC,CAAE,mCAAmC;AAC7F;;GAEG;AAaH;IAcA;;OAEG;IACH,YAPG,MAAmB;QAApB;;WAEG;QAJO,UAAA,GAAQ,IAAI,YAAA,EAAa,CAAE;QAUnC,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC;QACtC,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;IAC1B,CAAC;IACH;;OAEG;IACH,YATG,KAAgB,IAAA,CAAK,KAAC,CAAK,IAAC,CAAI,IAAC,CAAI,CAAC,CAAC,CAAA;AAU1C,CAAC;AApBC;IAAC,KALC,EAAK;;6CAAA;AASP;IAAC,KALC,EAAK;;sCAAA;AASP;IAAC,MALC,EAAM;;uCAAA;AApBV;IAJ0D,mCAAmC,CAD5F,SAAA,CAAA;QAMC,QAAQ,EAAE,WAAW;QACrB,eAAe,EAAE,uBAAuB,CAAC,MAAM;QAC/C,QAAQ,EAAE;;;;;;;KAOP;KACJ,CAAC;;YAAA;AA4BF;IACA;;;;OAIG;IACH,QAAQ,CAAC,SAAS,CAAC,WAAW,CAAC;IAC/B;;;OAGG;IACH,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC;IACxB;;;OAGG;IACH,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC;AACzB,CAAC","file":"alert.js","sourceRoot":"","sourcesContent":["import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nconst Component: NeverTypeCheckMe = Component;  /* local alias for Closure JSDoc */\nconst Input: NeverTypeCheckMe = Input;  /* local alias for Closure JSDoc */\nconst Output: NeverTypeCheckMe = Output;  /* local alias for Closure JSDoc */\nconst EventEmitter: NeverTypeCheckMe = EventEmitter;  /* local alias for Closure JSDoc */\nconst ChangeDetectionStrategy: NeverTypeCheckMe = ChangeDetectionStrategy;  /* local alias for Closure JSDoc */\n\nimport {NgbAlertConfig} from './alert-config';\nconst NgbAlertConfig: NeverTypeCheckMe = NgbAlertConfig;  /* local alias for Closure JSDoc */\n/**\n * Alerts can be used to provide feedback messages.\n */\n@Component({\n  selector: 'ngb-alert',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <div [class]=\"'alert alert-' + type + (dismissible ? ' alert-dismissible' : '')\" role=\"alert\">\n      <button *ngIf=\"dismissible\" type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"closeHandler()\">\n            <span aria-hidden=\"true\">&times;</span>\n      </button>\n      <ng-content></ng-content>\n    </div>\n    `\n})\nexport class NgbAlert {\n  /**\n   * A flag indicating if a given alert can be dismissed (closed) by a user. If this flag is set, a close button (in a\n   * form of an ×) will be displayed.\n   */\n  @Input() dismissible: boolean;\n  /**\n   * Alert type (CSS class). Bootstrap 4 recognizes the following types: \"success\", \"info\", \"warning\" and \"danger\".\n   */\n  @Input() type: string;\n  /**\n   * An event emitted when the close button is clicked. This event has no payload. Only relevant for dismissible alerts.\n   */\n  @Output() close = new EventEmitter();\n/**\n * @param {!NgbAlertConfig} config\n */\nconstructor(config: NgbAlertConfig) {\n    this.dismissible = config.dismissible;\n    this.type = config.type;\n  }\n/**\n * @return {void}\n */\ncloseHandler() { this.close.emit(null); }\n}\n\nfunction NgbAlert_tsickle_Closure_declarations() {\n/**\n * A flag indicating if a given alert can be dismissed (closed) by a user. If this flag is set, a close button (in a\n * form of an ×) will be displayed.\n * @type {boolean}\n */\nNgbAlert.prototype.dismissible;\n/**\n * Alert type (CSS class). Bootstrap 4 recognizes the following types: \"success\", \"info\", \"warning\" and \"danger\".\n * @type {string}\n */\nNgbAlert.prototype.type;\n/**\n * An event emitted when the close button is clicked. This event has no payload. Only relevant for dismissible alerts.\n * @type {!EventEmitter<?>}\n */\nNgbAlert.prototype.close;\n}\n\n"]}