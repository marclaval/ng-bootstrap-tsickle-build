{"version":3,"file":"dropdown.js","sourceRoot":"","sources":["../../../src/dropdown/dropdown.ts"],"names":[],"mappings":"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","sourcesContent":["import {Directive, Input, Output, EventEmitter, ElementRef} from '@angular/core/index';\nimport {NgbDropdownConfig} from './dropdown-config';\n/**\n * Transforms a node into a dropdown.\n */\nexport class NgbDropdown {\nprivate _toggleElement: any;\n\n  /**\n   * Indicates that the dropdown should open upwards\n   */\n   up: boolean;\n\n  /**\n   * Indicates that dropdown should be closed when selecting one of dropdown items (click) or pressing ESC.\n   */\n   autoClose: boolean;\n\n  /**\n   *  Defines whether or not the dropdown-menu is open initially.\n   */\n   _open = false;\n\n  /**\n   *  An event fired when the dropdown is opened or closed.\n   *  Event's payload equals whether dropdown is open.\n   */\n   openChange = new EventEmitter();\n/**\n * @param {?} config\n */\nconstructor(config: NgbDropdownConfig) {\n    this.up = config.up;\n    this.autoClose = config.autoClose;\n  }\n/**\n * Checks if the dropdown menu is open or not.\n * @return {?}\n */\nisOpen(): boolean { return this._open; }\n/**\n * Opens the dropdown menu of a given navbar or tabbed navigation.\n * @return {?}\n */\nopen(): void {\n    if (!this._open) {\n      this._open = true;\n      this.openChange.emit(true);\n    }\n  }\n/**\n * Closes the dropdown menu of a given navbar or tabbed navigation.\n * @return {?}\n */\nclose(): void {\n    if (this._open) {\n      this._open = false;\n      this.openChange.emit(false);\n    }\n  }\n/**\n * Toggles the dropdown menu of a given navbar or tabbed navigation.\n * @return {?}\n */\ntoggle(): void {\n    if (this.isOpen()) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n/**\n * @param {?} $event\n * @return {?}\n */\ncloseFromOutsideClick($event) {\n    if (this.autoClose && $event.button !== 2 && !this._isEventFromToggle($event)) {\n      this.close();\n    }\n  }\n/**\n * @return {?}\n */\ncloseFromOutsideEsc() {\n    if (this.autoClose) {\n      this.close();\n    }\n  }\n/**\n * \\@internal\n * @param {?} toggleElement\n * @return {?}\n */\nset toggleElement(toggleElement: any) { this._toggleElement = toggleElement; }\n/**\n * @param {?} $event\n * @return {?}\n */\nprivate _isEventFromToggle($event) { return !!this._toggleElement && this._toggleElement.contains($event.target); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[ngbDropdown]',\n  exportAs: 'ngbDropdown',\n  host: {\n    '[class.dropdown]': '!up',\n    '[class.dropup]': 'up',\n    '[class.show]': 'isOpen()',\n    '(keyup.esc)': 'closeFromOutsideEsc()',\n    '(document:click)': 'closeFromOutsideClick($event)'\n  }\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgbDropdownConfig, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'up': [{ type: Input },],\n'autoClose': [{ type: Input },],\n'_open': [{ type: Input, args: ['open', ] },],\n'openChange': [{ type: Output },],\n};\n}\n\nfunction NgbDropdown_tsickle_Closure_declarations() {\n/** @type {?} */\nNgbDropdown.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgbDropdown.ctorParameters;\n/** @type {?} */\nNgbDropdown.propDecorators;\n/** @type {?} */\nNgbDropdown.prototype._toggleElement;\n/**\n * Indicates that the dropdown should open upwards\n * @type {?}\n */\nNgbDropdown.prototype.up;\n/**\n * Indicates that dropdown should be closed when selecting one of dropdown items (click) or pressing ESC.\n * @type {?}\n */\nNgbDropdown.prototype.autoClose;\n/**\n *  Defines whether or not the dropdown-menu is open initially.\n * @type {?}\n */\nNgbDropdown.prototype._open;\n/**\n *  An event fired when the dropdown is opened or closed.\n *  Event's payload equals whether dropdown is open.\n * @type {?}\n */\nNgbDropdown.prototype.openChange;\n}\n\n/**\n * Allows the dropdown to be toggled via click. This directive is optional.\n */\nexport class NgbDropdownToggle {\n/**\n * @param {?} dropdown\n * @param {?} elementRef\n */\nconstructor(public dropdown: NgbDropdown, elementRef: ElementRef) {\n    dropdown.toggleElement = elementRef.nativeElement;\n  }\n/**\n * @return {?}\n */\ntoggleOpen() { this.dropdown.toggle(); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[ngbDropdownToggle]',\n  host: {\n    'class': 'dropdown-toggle',\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'dropdown.isOpen()',\n    '(click)': 'toggleOpen()'\n  }\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgbDropdown, },\n{type: ElementRef, },\n];\n}\n\nfunction NgbDropdownToggle_tsickle_Closure_declarations() {\n/** @type {?} */\nNgbDropdownToggle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgbDropdownToggle.ctorParameters;\n/** @type {?} */\nNgbDropdownToggle.prototype.dropdown;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}