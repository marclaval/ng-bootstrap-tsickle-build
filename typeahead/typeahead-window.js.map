{"version":3,"sources":["../../../src/typeahead/typeahead-window.ts"],"names":[],"mappings":"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","file":"typeahead-window.js","sourceRoot":"","sourcesContent":["import {Component, Input, Output, EventEmitter, TemplateRef, OnInit} from '@angular/core';\nconst Component: NeverTypeCheckMe = Component;  /* local alias for Closure JSDoc */\nconst Input: NeverTypeCheckMe = Input;  /* local alias for Closure JSDoc */\nconst Output: NeverTypeCheckMe = Output;  /* local alias for Closure JSDoc */\nconst EventEmitter: NeverTypeCheckMe = EventEmitter;  /* local alias for Closure JSDoc */\nconst TemplateRef: NeverTypeCheckMe = TemplateRef;  /* local alias for Closure JSDoc */\nconst OnInit: NeverTypeCheckMe = OnInit;  /* local alias for Closure JSDoc */\n\nimport {toString} from '../util/util';\nconst toString: NeverTypeCheckMe = toString;  /* local alias for Closure JSDoc */\n/** @record */\nexport function ResultTemplateContext() {}\n/**\n * Your typeahead result data model\n * @type {?}\n */\nResultTemplateContext.prototype.result;\n/**\n * Search term from the input used to get current result\n * @type {string}\n */\nResultTemplateContext.prototype.term;\n\n\n/**\n * Context for the typeahead result template in case you want to override the default one\n */\nexport interface ResultTemplateContext {\n  /**\n   * Your typeahead result data model\n   */\n  result: any;\n\n  /**\n   * Search term from the input used to get current result\n   */\n  term: string;\n}\n@Component({\n  selector: 'ngb-typeahead-window',\n  exportAs: 'ngbTypeaheadWindow',\n  host: {'class': 'dropdown-menu', 'style': 'display: block'},\n  template: `\n    <template #rt let-result=\"result\" let-term=\"term\" let-formatter=\"formatter\">\n      <ngb-highlight [result]=\"formatter(result)\" [term]=\"term\"></ngb-highlight>\n    </template>\n    <template ngFor [ngForOf]=\"results\" let-result let-idx=\"index\">\n      <button type=\"button\" class=\"dropdown-item\" [class.active]=\"idx === activeIdx\" \n        (mouseenter)=\"markActive(idx)\" \n        (click)=\"select(result)\">\n          <template [ngTemplateOutlet]=\"resultTemplate || rt\" \n          [ngOutletContext]=\"{result: result, term: term, formatter: formatter}\"></template>\n      </button>\n    </template>\n  `\n})\nexport class NgbTypeaheadWindow implements OnInit {\n  activeIdx = 0;\n\n  /**\n   * Flag indicating if the first row should be active initially\n   */\n  @Input() focusFirst = true;\n\n  /**\n   * Typeahead match results to be displayed\n   */\n  @Input() results;\n\n  /**\n   * Search term used to get current results\n   */\n  @Input() term: string;\n\n  /**\n   * A function used to format a given result before display. This function should return a formatted string without any\n   * HTML markup\n   */\n  @Input() formatter = toString;\n\n  /**\n   * A template to override a matching result default display\n   */\n  @Input() resultTemplate: TemplateRef<ResultTemplateContext>;\n\n  /**\n   * Event raised when user selects a particular result row\n   */\n  @Output('select') selectEvent = new EventEmitter();\n/**\n * @return {?}\n */\ngetActive() { return this.results[this.activeIdx]; }\n/**\n * @param {number} activeIdx\n * @return {void}\n */\nmarkActive(activeIdx: number) { this.activeIdx = activeIdx; }\n/**\n * @return {void}\n */\nnext() {\n    if (this.activeIdx === this.results.length - 1) {\n      this.activeIdx = this.focusFirst ? (this.activeIdx + 1) % this.results.length : -1;\n    } else {\n      this.activeIdx++;\n    }\n  }\n/**\n * @return {void}\n */\nprev() {\n    if (this.activeIdx < 0) {\n      this.activeIdx = this.results.length - 1;\n    } else if (this.activeIdx === 0) {\n      this.activeIdx = this.focusFirst ? this.results.length - 1 : -1;\n    } else {\n      this.activeIdx--;\n    }\n  }\n/**\n * @param {?} item\n * @return {void}\n */\nselect(item) { this.selectEvent.emit(item); }\n/**\n * @return {void}\n */\nngOnInit() { this.activeIdx = this.focusFirst ? 0 : -1; }\n}\n\nfunction NgbTypeaheadWindow_tsickle_Closure_declarations() {\n/** @type {number} */\nNgbTypeaheadWindow.prototype.activeIdx;\n/**\n * Flag indicating if the first row should be active initially\n * @type {boolean}\n */\nNgbTypeaheadWindow.prototype.focusFirst;\n/**\n * Typeahead match results to be displayed\n * @type {?}\n */\nNgbTypeaheadWindow.prototype.results;\n/**\n * Search term used to get current results\n * @type {string}\n */\nNgbTypeaheadWindow.prototype.term;\n/**\n * A function used to format a given result before display. This function should return a formatted string without any\n * HTML markup\n * @type {function(?): string}\n */\nNgbTypeaheadWindow.prototype.formatter;\n/**\n * A template to override a matching result default display\n * @type {!TemplateRef<!ResultTemplateContext>}\n */\nNgbTypeaheadWindow.prototype.resultTemplate;\n/**\n * Event raised when user selects a particular result row\n * @type {!EventEmitter<?>}\n */\nNgbTypeaheadWindow.prototype.selectEvent;\n}\n\n"]}