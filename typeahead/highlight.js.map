{"version":3,"file":"highlight.js","sourceRoot":"","sources":["../../../src/typeahead/highlight.ts"],"names":[],"mappings":"OAAO,EAAC,SAAS,EAAE,KAAK,EAAa,uBAAuB,EAAgB,MAAM,eAAe;OAC1F,EAAC,YAAY,EAAE,QAAQ,EAAC,MAAM,cAAc;AACnD;IAAA;QAGG,mBAAc,GAAG,eAAe,CAAC;IA6CpC,CAAC;IA1CD;;;OAGG;IACH,WAAW,CAAC,OAAsB;QAC9B,MAAM,gBAAgB,CAAC,SAAS,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACzD,MAAM,gBAAgB,CAAC,QAAQ,GAAG,SAAS,CAAC,WAAW,EAAE,CAAC;QAC1D,MAAM,gBAAgB,CAAC,MAAM,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC;QAClE,IAAI,gBAAgB,CAAC,UAAU,GAAG,CAAC,CAAC;QAEpC,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YACtB,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,IAAI,MAAM,CAAC,IAAI,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI;gBAC5E,MAAM,gBAAgB,CAAC,YAAY,GAAG,SAAS,CAAC,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;gBAChF,UAAU,IAAI,IAAI,CAAC,MAAM,CAAC;gBAC1B,MAAM,CAAC,YAAY,CAAC;YACtB,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,KAAK,GAAG,CAAC,SAAS,CAAC,CAAC;QAC3B,CAAC;IACH,CAAC;AAuBH,CAAC;AAtBM,uBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACxB,QAAQ,EAAE,eAAe;gBACzB,eAAe,EAAE,uBAAuB,CAAC,MAAM;gBAC/C,QAAQ,EAAE,6DAA6D;oBACnE,6GAA6G;oBAC7G,aAAa;gBACjB,MAAM,EAAE,CAAC;;;;GAIR,CAAC;aACH,EAAG,EAAE;CACL,CAAC;AACF,kBAAkB;AACX,2BAAc,GAAmE,MAAM,EAC7F,CAAC;AACK,2BAAc,GAA2C;IAChE,gBAAgB,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IACpC,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC5B,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;CACzB,CACA;AAED;IACA,gBAAgB;IAChB,YAAY,CAAC,UAAU,CAAC;IACxB;;;OAGG;IACH,YAAY,CAAC,cAAc,CAAC;IAC5B,gBAAgB;IAChB,YAAY,CAAC,cAAc,CAAC;IAC5B,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,KAAK,CAAC;IAC7B,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,cAAc,CAAC;IACtC,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,MAAM,CAAC;IAC9B,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,IAAI,CAAC;AAC5B,CAAC","sourcesContent":["import {Component, Input, OnChanges, ChangeDetectionStrategy, SimpleChanges} from '@angular/core/index';\nimport {regExpEscape, toString} from '../util/util';\nexport class NgbHighlight implements OnChanges {\n  parts: string[];\n\n   highlightClass = 'ngb-highlight';\n   result: string;\n   term: string;\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    const /** @type {?} */ resultStr = toString(this.result);\n    const /** @type {?} */ resultLC = resultStr.toLowerCase();\n    const /** @type {?} */ termLC = toString(this.term).toLowerCase();\n    let /** @type {?} */ currentIdx = 0;\n\n    if (termLC.length > 0) {\n      this.parts = resultLC.split(new RegExp(`(${regExpEscape(termLC)})`)).map((part) => {\n        const /** @type {?} */ originalPart = resultStr.substr(currentIdx, part.length);\n        currentIdx += part.length;\n        return originalPart;\n      });\n    } else {\n      this.parts = [resultStr];\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'ngb-highlight',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `<template ngFor [ngForOf]=\"parts\" let-part let-isOdd=\"odd\">` +\n      `<span *ngIf=\"isOdd\" class=\"{{highlightClass}}\">{{part}}</span><template [ngIf]=\"!isOdd\">{{part}}</template>` +\n      `</template>`,  // template needs to be formatted in a certain way so we don't add empty text nodes\n  styles: [`\n    .ngb-highlight {\n      font-weight: bold;\n    }\n  `]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'highlightClass': [{ type: Input },],\n'result': [{ type: Input },],\n'term': [{ type: Input },],\n};\n}\n\nfunction NgbHighlight_tsickle_Closure_declarations() {\n/** @type {?} */\nNgbHighlight.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgbHighlight.ctorParameters;\n/** @type {?} */\nNgbHighlight.propDecorators;\n/** @type {?} */\nNgbHighlight.prototype.parts;\n/** @type {?} */\nNgbHighlight.prototype.highlightClass;\n/** @type {?} */\nNgbHighlight.prototype.result;\n/** @type {?} */\nNgbHighlight.prototype.term;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
