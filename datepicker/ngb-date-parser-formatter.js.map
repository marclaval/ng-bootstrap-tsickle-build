{"version":3,"sources":["../../../src/datepicker/ngb-date-parser-formatter.ts"],"names":[],"mappings":"OAAO,EAAA,SAAE,EAAU,SAAA,EAAW,QAAA,EAAS,MAAA,cAAA;AACvC,MAAM,SAAS,GAAqB,SAAS,CAAC,CAAE,mCAAmC;AACnF,MAAM,SAAS,GAAqB,SAAS,CAAC,CAAE,mCAAmC;AACnF,MAAM,QAAQ,GAAqB,QAAQ,CAAC,CAAE,mCAAmC;OAF1E,EAAA,aAAE,EAAa,MAAA,mBAAA;AAItB,MAAM,aAAa,GAAqB,aAAa,CAAC,CAAE,mCAAmC;AAC3F;;;;;GAKG;AACH;IACA;;;;;;OAMG;IACH,KANY,CAAA,KAAA,IAAA,CAAA;IAOZ;;;;;;OAMG;IACH,MAPY,CAAA,IAAA,IAAA,CAAA;AAQZ,CAAC;AACD,+CANC,sBAAA;IAOD;;;OAGG;IACH,KAVG,CAAA,KAAA;QAWC,EAAE,CAAC,CAAC,KAVC,CAAK,CAAC,CAAA;YAWT,MAAM,6BAA6B,CAV7B,SAAA,GAAY,KAAA,CAAM,IAAC,EAAI,CAAE,KAAC,CAAK,GAAC,CAAG,CAAC;YAW1C,EAAE,CAAC,CAAC,SAVC,CAAS,MAAC,KAAU,CAAA,IAAK,QAAA,CAAS,SAAC,CAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;gBAWpD,MAAM,CAVC,EAAA,IAAE,EAAK,SAAA,CAAU,SAAC,CAAS,CAAC,CAAC,CAAC,EAAE,KAAA,EAAO,IAAA,EAAM,GAAA,EAAK,IAAA,EAAK,CAAC;YAWjE,CAAC;YAVC,IAAA,CAAK,EAAA,CAAA,CAAA,SAAK,CAAS,MAAC,KAAU,CAAA,IAAK,QAAA,CAAS,SAAC,CAAS,CAAC,CAAC,CAAC,IAAI,QAAA,CAAS,SAAC,CAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;gBAWrF,MAAM,CAVC,EAAA,IAAE,EAAK,SAAA,CAAU,SAAC,CAAS,CAAC,CAAC,CAAC,EAAE,KAAA,EAAO,SAAA,CAAU,SAAC,CAAS,CAAC,CAAC,CAAC,EAAE,GAAA,EAAK,IAAA,EAAK,CAAC;YAWpF,CAAC;YAVC,IAAA,CAAK,EAAA,CAAA,CAAA,SAAK,CAAS,MAAC,KAAU,CAAA,IAAK,QAAA,CAAS,SAAC,CAAS,CAAC,CAAC,CAAC,IAAI,QAAA,CAAS,SAAC,CAAS,CAAC,CAAC,CAAC,IAAI,QAAA,CAAS,SAAC,CAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;gBAW/G,MAAM,CAVC,EAAA,IAAE,EAAK,SAAA,CAAU,SAAC,CAAS,CAAC,CAAC,CAAC,EAAE,KAAA,EAAO,SAAA,CAAU,SAAC,CAAS,CAAC,CAAC,CAAC,EAAE,GAAA,EAAK,SAAA,CAAU,SAAC,CAAS,CAAC,CAAC,CAAC,EAAC,CAAC;YAWvG,CAAC;QACH,CAAC;QACD,MAAM,CAVC,IAAA,CAAK;IAWd,CAAC;IACH;;;OAGG;IACH,MAbG,CAAA,IAAA;QAcC,MAAM,CAbC,IAAA;YAcH,GAAG,IAbC,CAAI,IAAC,IAAI,QAAI,CAAQ,IAAC,CAAI,KAAC,CAAK,GAAG,SAAA,CAAU,IAAC,CAAI,KAAC,CAAK,GAAG,EAAA,IAAG,QAAI,CAAQ,IAAC,CAAI,GAAC,CAAG,GAAG,SAAA,CAAU,IAAC,CAAI,GAAC,CAAG,GAAG,EAAA,EAAG;YAcnH,EAAE,CAbC;IAcT,CAAC;AACH,CAAC;AAAA","file":"ngb-date-parser-formatter.js","sourceRoot":"","sourcesContent":["import {padNumber, toInteger, isNumber} from '../util/util';\nconst padNumber: NeverTypeCheckMe = padNumber;  /* local alias for Closure JSDoc */\nconst toInteger: NeverTypeCheckMe = toInteger;  /* local alias for Closure JSDoc */\nconst isNumber: NeverTypeCheckMe = isNumber;  /* local alias for Closure JSDoc */\nimport {NgbDateStruct} from './ngb-date-struct';\nconst NgbDateStruct: NeverTypeCheckMe = NgbDateStruct;  /* local alias for Closure JSDoc */\n/**\n * Abstract type serving as a DI token for the service parsing and formatting dates for the NgbInputDatepicker\n * directive. A default implementation using the ISO 8601 format is provided, but you can provide another implementation\n * to use an alternative format.\n * @abstract\n */\nexport abstract class NgbDateParserFormatter {\n/**\n * Parses the given value to an NgbDateStruct. Implementations should try their best to provide a result, even\n * partial. They must return null if the value can't be parsed.\n * @abstract\n * @param {string} value the value to parse\n * @return {!NgbDateStruct}\n */\nparse(value: string) {}\n/**\n * Formats the given date to a string. Implementations should return an empty string if the given date is null,\n * and try their best to provide a partial result if the given date is incomplete or invalid.\n * @abstract\n * @param {!NgbDateStruct} date the date to format as a string\n * @return {string}\n */\nformat(date: NgbDateStruct) {}\n}\nexport class NgbDateISOParserFormatter extends NgbDateParserFormatter {\n/**\n * @param {string} value\n * @return {!NgbDateStruct}\n */\nparse(value: string): NgbDateStruct {\n    if (value) {\n      const /** @type {!Array<string>} */ dateParts = value.trim().split('-');\n      if (dateParts.length === 1 && isNumber(dateParts[0])) {\n        return {year: toInteger(dateParts[0]), month: null, day: null};\n      } else if (dateParts.length === 2 && isNumber(dateParts[0]) && isNumber(dateParts[1])) {\n        return {year: toInteger(dateParts[0]), month: toInteger(dateParts[1]), day: null};\n      } else if (dateParts.length === 3 && isNumber(dateParts[0]) && isNumber(dateParts[1]) && isNumber(dateParts[2])) {\n        return {year: toInteger(dateParts[0]), month: toInteger(dateParts[1]), day: toInteger(dateParts[2])};\n      }\n    }\n    return null;\n  }\n/**\n * @param {!NgbDateStruct} date\n * @return {string}\n */\nformat(date: NgbDateStruct): string {\n    return date ?\n        `${date.year}-${isNumber(date.month) ? padNumber(date.month) : ''}-${isNumber(date.day) ? padNumber(date.day) : ''}` :\n        '';\n  }\n}\n"]}