{"version":3,"sources":["../../../src/datepicker/ngb-calendar.ts"],"names":[],"mappings":"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","file":"ngb-calendar.js","sourceRoot":"","sourcesContent":["import {NgbDate} from './ngb-date';\nconst NgbDate: NeverTypeCheckMe = NgbDate;  /* local alias for Closure JSDoc */\nimport {Injectable} from '@angular/core';\nconst Injectable: NeverTypeCheckMe = Injectable;  /* local alias for Closure JSDoc */\nimport {isNumber} from '../util/util';\nconst isNumber: NeverTypeCheckMe = isNumber;  /* local alias for Closure JSDoc */\n/**\n * @param {!Date} jsDate\n * @return {!NgbDate}\n */\nfunction fromJSDate(jsDate: Date) {\n  return new NgbDate(jsDate.getFullYear(), jsDate.getMonth() + 1, jsDate.getDate());\n}\n/**\n * @param {!NgbDate} date\n * @return {!Date}\n */\nfunction toJSDate(date: NgbDate) {\n  const /** @type {!Date} */ jsDate = new Date(date.year, date.month - 1, date.day);\n  // this is done avoid 30 -> 1930 conversion\n  if (!isNaN(jsDate.getTime())) {\n    jsDate.setFullYear(date.year);\n  }\n  return jsDate;\n}\n\nexport type NgbPeriod = 'y' | 'm' | 'd';\n/** @typedef {string} */\nexports.NgbPeriod;\n\n/**\n * @abstract\n */\n@Injectable()\nexport abstract class NgbCalendar {\n/**\n * @abstract\n * @return {number}\n */\ngetDaysPerWeek() {}\n/**\n * @abstract\n * @return {!Array<number>}\n */\ngetMonths() {}\n/**\n * @abstract\n * @return {number}\n */\ngetWeeksPerMonth() {}\n/**\n * @abstract\n * @param {!NgbDate} date\n * @return {number}\n */\ngetWeekday(date: NgbDate) {}\n/**\n * @abstract\n * @param {!NgbDate} date\n * @param {string=} period\n * @param {number=} number\n * @return {!NgbDate}\n */\ngetNext(date: NgbDate, period?: NgbPeriod, number?: number) {}\n/**\n * @abstract\n * @param {!NgbDate} date\n * @param {string=} period\n * @param {number=} number\n * @return {!NgbDate}\n */\ngetPrev(date: NgbDate, period?: NgbPeriod, number?: number) {}\n/**\n * @abstract\n * @param {!Array<!NgbDate>} week\n * @param {number} firstDayOfWeek\n * @return {number}\n */\ngetWeekNumber(week: NgbDate[], firstDayOfWeek: number) {}\n/**\n * @abstract\n * @return {!NgbDate}\n */\ngetToday() {}\n/**\n * @abstract\n * @param {!NgbDate} date\n * @return {boolean}\n */\nisValid(date: NgbDate) {}\n}\n@Injectable()\nexport class NgbCalendarGregorian extends NgbCalendar {\n/**\n * @return {number}\n */\ngetDaysPerWeek() { return 7; }\n/**\n * @return {!Array<number>}\n */\ngetMonths() { return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]; }\n/**\n * @return {number}\n */\ngetWeeksPerMonth() { return 6; }\n/**\n * @param {!NgbDate} date\n * @param {string=} period\n * @param {number=} number\n * @return {!NgbDate}\n */\ngetNext(date: NgbDate, period: NgbPeriod = 'd', number = 1) {\n    let /** @type {!Date} */ jsDate = toJSDate(date);\n\n    switch (period) {\n      case 'y':\n        return new NgbDate(date.year + number, 1, 1);\n      case 'm':\n        jsDate = new Date(date.year, date.month + number - 1, 1);\n        break;\n      case 'd':\n        jsDate.setDate(jsDate.getDate() + number);\n        break;\n      default:\n        return date;\n    }\n\n    return fromJSDate(jsDate);\n  }\n/**\n * @param {!NgbDate} date\n * @param {string=} period\n * @param {number=} number\n * @return {!NgbDate}\n */\ngetPrev(date: NgbDate, period: NgbPeriod = 'd', number = 1) { return this.getNext(date, period, -number); }\n/**\n * @param {!NgbDate} date\n * @return {number}\n */\ngetWeekday(date: NgbDate) {\n    let /** @type {!Date} */ jsDate = toJSDate(date);\n    let /** @type {number} */ day = jsDate.getDay();\n    // in JS Date Sun=0, in ISO 8601 Sun=7\n    return day === 0 ? 7 : day;\n  }\n/**\n * @param {!Array<!NgbDate>} week\n * @param {number} firstDayOfWeek\n * @return {number}\n */\ngetWeekNumber(week: NgbDate[], firstDayOfWeek: number) {\n    // in JS Date Sun=0, in ISO 8601 Sun=7\n    if (firstDayOfWeek === 7) {\n      firstDayOfWeek = 0;\n    }\n\n    const /** @type {number} */ thursdayIndex = (4 + 7 - firstDayOfWeek) % 7;\n    let /** @type {!NgbDate} */ date = week[thursdayIndex];\n\n    const /** @type {!Date} */ jsDate = toJSDate(date);\n    jsDate.setDate(jsDate.getDate() + 4 - (jsDate.getDay() || 7));  // Thursday\n    const /** @type {number} */ time = jsDate.getTime();\n    jsDate.setMonth(0);  // Compare with Jan 1\n    jsDate.setDate(1);\n    return Math.floor(Math.round((time - jsDate.getTime()) / 86400000) / 7) + 1;\n  }\n/**\n * @return {!NgbDate}\n */\ngetToday(): NgbDate { return fromJSDate(new Date()); }\n/**\n * @param {!NgbDate} date\n * @return {boolean}\n */\nisValid(date: NgbDate): boolean {\n    return date && isNumber(date.year) && isNumber(date.month) && isNumber(date.day) &&\n        !isNaN(toJSDate(date).getTime());\n  }\n}\n"]}