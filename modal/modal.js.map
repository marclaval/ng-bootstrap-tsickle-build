{"version":3,"sources":["../../../src/modal/modal.ts"],"names":[],"mappings":";;;;;;;;;OAAO,EAAA,UAAE,EAAW,QAAA,EAAU,wBAAA,EAAyB,MAAA,eAAA;AACvD,MAAM,UAAU,GAAqB,UAAU,CAAC,CAAE,mCAAmC;AACrF,MAAM,QAAQ,GAAqB,QAAQ,CAAC,CAAE,mCAAmC;AACjF,MAAM,wBAAwB,GAAqB,wBAAwB,CAAC,CAAE,mCAAmC;OAD1G,EAAA,aAAE,EAAa,MAAA,eAAA;AAItB,MAAM,aAAa,GAAqB,aAAa,CAAC,CAAE,mCAAmC;OAHpF,EAAA,WAAE,EAAW,MAAA,aAAA;AAKpB,MAAM,WAAW,GAAqB,WAAW,CAAC,CAAE,mCAAmC;AACvF,cAAc;AACd,oCAAmC,CAAC;AACpC;;;;GAIG;AACH,eAAe,CAAC,SAAS,CAAC,QAAQ,CAAC;AACnC;;;GAGG;AACH,eAAe,CAAC,SAAS,CAAC,QAAQ,CAAC;AACnC;;;GAGG;AACH,eAAe,CAAC,SAAS,CAAC,IAAI,CAAC;AAC/B;;;GAGG;AACH,eAAe,CAAC,SAAS,CAAC,WAAW,CAAC;AA4BtC;;;GAGG;AAEH;IACA;;;;OAIG;IACH,YAhCc,UAAY,EAAkC,SAAW,EAAkB,WAAa;QAAxF,eAAA,GAAA,UAAA,CAAY;QAAkC,cAAA,GAAA,SAAA,CAAW;QAAkB,gBAAA,GAAA,WAAA,CAAa;IAAc,CAAA;IAoCpH;;;;;;;;OAQG;IACH,IArCG,CAAA,OAAA,EAAA,OAAA,GAAA,EAAA;QAsCC,MAAM,CArCC,IAAA,CAAK,WAAC,CAAW,IAAC,CAAI,IAAC,CAAI,UAAC,EAAW,IAAA,CAAK,SAAC,EAAU,OAAA,EAAS,OAAA,CAAQ,CAAC;IAsClF,CAAC;AACH,CAAC;AAvBD;IA5BC,UAAA,EAAA;;YAAA;AAqDD;IACA,wCAAwC;IACxC,QAAQ,CAAC,SAAS,CAAC,UAAU,CAAC;IAC9B,wBAAwB;IACxB,QAAQ,CAAC,SAAS,CAAC,SAAS,CAAC;IAC7B,6BAA6B;IAC7B,QAAQ,CAAC,SAAS,CAAC,WAAW,CAAC;AAC/B,CAAC","file":"modal.js","sourceRoot":"","sourcesContent":["import {Injectable, Injector, ComponentFactoryResolver} from '@angular/core';\nconst Injectable: NeverTypeCheckMe = Injectable;  /* local alias for Closure JSDoc */\nconst Injector: NeverTypeCheckMe = Injector;  /* local alias for Closure JSDoc */\nconst ComponentFactoryResolver: NeverTypeCheckMe = ComponentFactoryResolver;  /* local alias for Closure JSDoc */\n\nimport {NgbModalStack} from './modal-stack';\nconst NgbModalStack: NeverTypeCheckMe = NgbModalStack;  /* local alias for Closure JSDoc */\nimport {NgbModalRef} from './modal-ref';\nconst NgbModalRef: NeverTypeCheckMe = NgbModalRef;  /* local alias for Closure JSDoc */\n/** @record */\nexport function NgbModalOptions() {}\n/**\n * Whether a backdrop element should be created for a given modal (true by default).\n * Alternatively, specify 'static' for a backdrop which doesn't close the modal on click.\n * @type {(boolean|string)}\n */\nNgbModalOptions.prototype.backdrop;\n/**\n * Whether to close the modal when escape key is pressed (true by default).\n * @type {boolean}\n */\nNgbModalOptions.prototype.keyboard;\n/**\n * Size of a new modal window.\n * @type {string}\n */\nNgbModalOptions.prototype.size;\n/**\n * Custom class to append to the modal window\n * @type {string}\n */\nNgbModalOptions.prototype.windowClass;\n\n\n/**\n * Represent options available when opening new modal windows.\n */\nexport interface NgbModalOptions {\n  /**\n   * Whether a backdrop element should be created for a given modal (true by default).\n   * Alternatively, specify 'static' for a backdrop which doesn't close the modal on click.\n   */\n  backdrop?: boolean | 'static';\n\n  /**\n   * Whether to close the modal when escape key is pressed (true by default).\n   */\n  keyboard?: boolean;\n\n  /**\n   * Size of a new modal window.\n   */\n  size?: 'sm' | 'lg';\n\n  /**\n   * Custom class to append to the modal window\n   */\n  windowClass?: string;\n}\n/**\n * A service to open modal windows. Creating a modal is straightforward: create a template and pass it as an argument to\n * the \"open\" method!\n */\n@Injectable()\nexport class NgbModal {\n/**\n * @param {!ComponentFactoryResolver} _moduleCFR\n * @param {!Injector} _injector\n * @param {!NgbModalStack} _modalStack\n */\nconstructor(\nprivate _moduleCFR: ComponentFactoryResolver,\nprivate _injector: Injector,\nprivate _modalStack: NgbModalStack) {}\n/**\n * Opens a new modal window with the specified content and using supplied options. Content can be provided\n * as a TemplateRef or a component type. If you pass a component type as content than instances of those\n * components can be injected with an instance of the NgbActiveModal class. You can use methods on the\n * NgbActiveModal class to close / dismiss modals from \"inside\" of a component.\n * @param {?} content\n * @param {!NgbModalOptions=} options\n * @return {!NgbModalRef}\n */\nopen(content: any, options: NgbModalOptions = {}): NgbModalRef {\n    return this._modalStack.open(this._moduleCFR, this._injector, content, options);\n  }\n}\n\nfunction NgbModal_tsickle_Closure_declarations() {\n/** @type {!ComponentFactoryResolver} */\nNgbModal.prototype._moduleCFR;\n/** @type {!Injector} */\nNgbModal.prototype._injector;\n/** @type {!NgbModalStack} */\nNgbModal.prototype._modalStack;\n}\n\n"]}