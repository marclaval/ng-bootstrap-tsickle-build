{"version":3,"file":"datepicker-input.js","sourceRoot":"","sources":["../../../src/datepicker/datepicker-input.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Directive,\n  Input,\n  ComponentRef,\n  ElementRef,\n  ViewContainerRef,\n  Renderer,\n  ComponentFactoryResolver,\n  NgZone,\n  TemplateRef,\n  forwardRef,\n  EventEmitter,\n  Output\n} from '@angular/core/index';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms/index';\n\nimport {NgbDate} from './ngb-date';\nimport {NgbDatepicker, NgbDatepickerNavigateEvent} from './datepicker';\nimport {DayTemplateContext} from './datepicker-day-template-context';\nimport {NgbDateParserFormatter} from './ngb-date-parser-formatter';\n\nimport {positionElements} from '../util/positioning';\nimport {NgbDateStruct} from './ngb-date-struct';\nimport {NgbCalendar} from './ngb-calendar';\nimport {NgbDatepickerService} from './datepicker-service';\n\nconst /** @type {?} */ NGB_DATEPICKER_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => NgbInputDatepicker),\n  multi: true\n};\n/**\n * A directive that makes it possible to have datepickers on input fields.\n * Manages integration with the input field itself (data entry) and ngModel (validation etc.).\n */\nexport class NgbInputDatepicker implements ControlValueAccessor {\nprivate _cRef: ComponentRef<NgbDatepicker> = null;\nprivate _model: NgbDate;\nprivate _zoneSubscription: any;\n\n  /**\n   * Reference for the custom template for the day display\n   */\n   dayTemplate: TemplateRef<DayTemplateContext>;\n\n  /**\n   * Number of months to display\n   */\n   displayMonths: number;\n\n  /**\n  * First day of the week. With default calendar we use ISO 8601: 1=Mon ... 7=Sun\n   */\n   firstDayOfWeek: number;\n\n  /**\n   * Callback to mark a given date as disabled.\n   * 'Current' contains the month that will be displayed in the view\n   */\n   markDisabled: (date: NgbDateStruct, current: {year: number, month: number}) => boolean;\n\n  /**\n   * Min date for the navigation. If not provided will be 10 years before today or `startDate`\n   */\n   minDate: NgbDateStruct;\n\n  /**\n   * Max date for the navigation. If not provided will be 10 years from today or `startDate`\n   */\n   maxDate: NgbDateStruct;\n\n  /**\n   * Navigation type: `select` (default with select boxes for month and year), `arrows`\n   * (without select boxes, only navigation arrows) or `none` (no navigation at all)\n   */\n   navigation: 'select' | 'arrows' | 'none';\n\n  /**\n   * The way to display days that don't belong to current month: `visible` (default),\n   * `hidden` (not displayed) or `collapsed` (not displayed with empty space collapsed)\n   */\n   outsideDays: 'visible' | 'collapsed' | 'hidden';\n\n  /**\n   * Whether to display days of the week\n   */\n   showWeekdays: boolean;\n\n  /**\n   * Whether to display week numbers\n   */\n   showWeekNumbers: boolean;\n\n  /**\n   * Date to open calendar with.\n   * With default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.\n   * If nothing or invalid date provided, calendar will open with current month.\n   * Use 'navigateTo(date)' as an alternative\n   */\n   startDate: {year: number, month: number};\n\n  /**\n   * An event fired when navigation happens and currently displayed month changes.\n   * See NgbDatepickerNavigateEvent for the payload info.\n   */\n   navigate = new EventEmitter<NgbDatepickerNavigateEvent>();\nprivate _onChange = (_: any) => {};\nprivate _onTouched = () => {};\n/**\n * @param {?} _parserFormatter\n * @param {?} _elRef\n * @param {?} _vcRef\n * @param {?} _renderer\n * @param {?} _cfr\n * @param {?} ngZone\n * @param {?} _service\n * @param {?} _calendar\n */\nconstructor(\nprivate _parserFormatter: NgbDateParserFormatter,\nprivate _elRef: ElementRef,\nprivate _vcRef: ViewContainerRef,\nprivate _renderer: Renderer,\nprivate _cfr: ComponentFactoryResolver, ngZone: NgZone,\nprivate _service: NgbDatepickerService,\nprivate _calendar: NgbCalendar) {\n    this._zoneSubscription = ngZone.onStable.subscribe(() => {\n      if (this._cRef) {\n        positionElements(this._elRef.nativeElement, this._cRef.location.nativeElement, 'bottom-left');\n      }\n    });\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => any): void { this._onChange = fn; }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => any): void { this._onTouched = fn; }\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value) {\n    const /** @type {?} */ ngbDate = value ? new NgbDate(value.year, value.month, value.day) : null;\n    this._model = this._calendar.isValid(value) ? ngbDate : null;\n    this._writeModelValue(this._model);\n  }\n/**\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this._renderer.setElementProperty(this._elRef.nativeElement, 'disabled', isDisabled);\n    if (this.isOpen()) {\n      this._cRef.instance.setDisabledState(isDisabled);\n    }\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nmanualDateChange(value: string) {\n    this._model = this._service.toValidDate(this._parserFormatter.parse(value), null);\n    this._onChange(this._model ? {year: this._model.year, month: this._model.month, day: this._model.day} : null);\n    this._writeModelValue(this._model);\n  }\n/**\n * @return {?}\n */\nisOpen() { return !!this._cRef; }\n/**\n * Opens the datepicker with the selected date indicated by the ngModel value.\n * @return {?}\n */\nopen() {\n    if (!this.isOpen()) {\n      const /** @type {?} */ cf = this._cfr.resolveComponentFactory(NgbDatepicker);\n      this._cRef = this._vcRef.createComponent(cf);\n\n      this._applyPopupStyling(this._cRef.location.nativeElement);\n      this._cRef.instance.writeValue(this._model);\n      this._applyDatepickerInputs(this._cRef.instance);\n      this._subscribeForDatepickerOutputs(this._cRef.instance);\n      this._cRef.instance.ngOnInit();\n\n      // date selection event handling\n      this._cRef.instance.registerOnChange((selectedDate) => {\n        this.writeValue(selectedDate);\n        this._onChange(selectedDate);\n        this.close();\n      });\n    }\n  }\n/**\n * Closes the datepicker popup.\n * @return {?}\n */\nclose() {\n    if (this.isOpen()) {\n      this._vcRef.remove(this._vcRef.indexOf(this._cRef.hostView));\n      this._cRef = null;\n    }\n  }\n/**\n * Toggles the datepicker popup (opens when closed and closes when opened).\n * @return {?}\n */\ntoggle() {\n    if (this.isOpen()) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n/**\n * Navigates current view to provided date.\n * With default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.\n * If nothing or invalid date provided calendar will open current month.\n * Use 'startDate' input as an alternative\n * @param {?=} date\n * @return {?}\n */\nnavigateTo(date?: {year: number, month: number}) {\n    if (this.isOpen()) {\n      this._cRef.instance.navigateTo(date);\n    }\n  }\n/**\n * @return {?}\n */\nonBlur() { this._onTouched(); }\n/**\n * @param {?} datepickerInstance\n * @return {?}\n */\nprivate _applyDatepickerInputs(datepickerInstance: NgbDatepicker): void {\n    ['dayTemplate', 'displayMonths', 'firstDayOfWeek', 'markDisabled', 'minDate', 'maxDate', 'navigation',\n     'outsideDays', 'showNavigation', 'showWeekdays', 'showWeekNumbers']\n        .forEach((optionName: string) => {\n          if (this[optionName] !== undefined) {\n            datepickerInstance[optionName] = this[optionName];\n          }\n        });\n    datepickerInstance.startDate = this.startDate || this._model;\n  }\n/**\n * @param {?} nativeElement\n * @return {?}\n */\nprivate _applyPopupStyling(nativeElement: any) {\n    this._renderer.setElementClass(nativeElement, 'dropdown-menu', true);\n    this._renderer.setElementStyle(nativeElement, 'padding', '0');\n  }\n/**\n * @param {?} datepickerInstance\n * @return {?}\n */\nprivate _subscribeForDatepickerOutputs(datepickerInstance: NgbDatepicker) {\n    datepickerInstance.navigate.subscribe(date => this.navigate.emit(date));\n  }\n/**\n * @param {?} model\n * @return {?}\n */\nprivate _writeModelValue(model: NgbDate) {\n    this._renderer.setElementProperty(this._elRef.nativeElement, 'value', this._parserFormatter.format(model));\n    if (this.isOpen()) {\n      this._cRef.instance.writeValue(model);\n      this._onTouched();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'input[ngbDatepicker]',\n  exportAs: 'ngbDatepicker',\n  host: {'(change)': 'manualDateChange($event.target.value)', '(keyup.esc)': 'close()', '(blur)': 'onBlur()'},\n  providers: [NGB_DATEPICKER_VALUE_ACCESSOR]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgbDateParserFormatter, },\n{type: ElementRef, },\n{type: ViewContainerRef, },\n{type: Renderer, },\n{type: ComponentFactoryResolver, },\n{type: NgZone, },\n{type: NgbDatepickerService, },\n{type: NgbCalendar, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'dayTemplate': [{ type: Input },],\n'displayMonths': [{ type: Input },],\n'firstDayOfWeek': [{ type: Input },],\n'markDisabled': [{ type: Input },],\n'minDate': [{ type: Input },],\n'maxDate': [{ type: Input },],\n'navigation': [{ type: Input },],\n'outsideDays': [{ type: Input },],\n'showWeekdays': [{ type: Input },],\n'showWeekNumbers': [{ type: Input },],\n'startDate': [{ type: Input },],\n'navigate': [{ type: Output },],\n};\n}\n\nfunction NgbInputDatepicker_tsickle_Closure_declarations() {\n/** @type {?} */\nNgbInputDatepicker.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgbInputDatepicker.ctorParameters;\n/** @type {?} */\nNgbInputDatepicker.propDecorators;\n/** @type {?} */\nNgbInputDatepicker.prototype._cRef;\n/** @type {?} */\nNgbInputDatepicker.prototype._model;\n/** @type {?} */\nNgbInputDatepicker.prototype._zoneSubscription;\n/**\n * Reference for the custom template for the day display\n * @type {?}\n */\nNgbInputDatepicker.prototype.dayTemplate;\n/**\n * Number of months to display\n * @type {?}\n */\nNgbInputDatepicker.prototype.displayMonths;\n/**\n * First day of the week. With default calendar we use ISO 8601: 1=Mon ... 7=Sun\n * @type {?}\n */\nNgbInputDatepicker.prototype.firstDayOfWeek;\n/**\n * Callback to mark a given date as disabled.\n * 'Current' contains the month that will be displayed in the view\n * @type {?}\n */\nNgbInputDatepicker.prototype.markDisabled;\n/**\n * Min date for the navigation. If not provided will be 10 years before today or `startDate`\n * @type {?}\n */\nNgbInputDatepicker.prototype.minDate;\n/**\n * Max date for the navigation. If not provided will be 10 years from today or `startDate`\n * @type {?}\n */\nNgbInputDatepicker.prototype.maxDate;\n/**\n * Navigation type: `select` (default with select boxes for month and year), `arrows`\n * (without select boxes, only navigation arrows) or `none` (no navigation at all)\n * @type {?}\n */\nNgbInputDatepicker.prototype.navigation;\n/**\n * The way to display days that don't belong to current month: `visible` (default),\n * `hidden` (not displayed) or `collapsed` (not displayed with empty space collapsed)\n * @type {?}\n */\nNgbInputDatepicker.prototype.outsideDays;\n/**\n * Whether to display days of the week\n * @type {?}\n */\nNgbInputDatepicker.prototype.showWeekdays;\n/**\n * Whether to display week numbers\n * @type {?}\n */\nNgbInputDatepicker.prototype.showWeekNumbers;\n/**\n * Date to open calendar with.\n * With default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.\n * If nothing or invalid date provided, calendar will open with current month.\n * Use 'navigateTo(date)' as an alternative\n * @type {?}\n */\nNgbInputDatepicker.prototype.startDate;\n/**\n * An event fired when navigation happens and currently displayed month changes.\n * See NgbDatepickerNavigateEvent for the payload info.\n * @type {?}\n */\nNgbInputDatepicker.prototype.navigate;\n/** @type {?} */\nNgbInputDatepicker.prototype._onChange;\n/** @type {?} */\nNgbInputDatepicker.prototype._onTouched;\n/** @type {?} */\nNgbInputDatepicker.prototype._parserFormatter;\n/** @type {?} */\nNgbInputDatepicker.prototype._elRef;\n/** @type {?} */\nNgbInputDatepicker.prototype._vcRef;\n/** @type {?} */\nNgbInputDatepicker.prototype._renderer;\n/** @type {?} */\nNgbInputDatepicker.prototype._cfr;\n/** @type {?} */\nNgbInputDatepicker.prototype._service;\n/** @type {?} */\nNgbInputDatepicker.prototype._calendar;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}