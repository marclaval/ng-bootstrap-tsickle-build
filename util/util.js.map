{"version":3,"file":"util.js","sourceRoot":"","sources":["../../../src/util/util.ts"],"names":[],"mappings":"AACA;;;GAGG;AACH,0BAA0B,KAAU;IAClC,MAAM,CAAC,QAAQ,CAAC,GAAG,KAAK,EAAE,EAAE,EAAE,CAAC,CAAC;AAClC,CAAC;AACD;;;GAGG;AACH,yBAAyB,KAAU;IACjC,MAAM,CAAC,CAAC,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI,CAAC,GAAG,GAAG,KAAK,EAAE,GAAG,EAAE,CAAC;AACnE,CAAC;AACD;;;;;GAKG;AACH,gCAAgC,KAAa,EAAE,GAAW,EAAE,GAAG,GAAG,CAAC;IACjE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;AAC7C,CAAC;AACD;;;GAGG;AACH,yBAAyB,KAAU;IACjC,MAAM,CAAC,OAAO,KAAK,KAAK,QAAQ,CAAC;AACnC,CAAC;AACD;;;GAGG;AACH,yBAAyB,KAAU;IACjC,MAAM,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;AAClC,CAAC;AACD;;;GAGG;AACH,0BAA0B,KAAU;IAClC,MAAM,CAAC,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI,CAAC;AAC/C,CAAC;AACD;;;GAGG;AACH,0BAA0B,KAAa;IACrC,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACpB,MAAM,CAAC,IAAI,KAAK,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IAC/B,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,MAAM,CAAC,EAAE,CAAC;IACZ,CAAC;AACH,CAAC;AACD;;;GAGG;AACH,6BAA6B,IAAI;IAC/B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,0BAA0B,EAAE,MAAM,CAAC,CAAC;AAC1D,CAAC","sourcesContent":["\n/**\n * @param {?} value\n * @return {?}\n */\nexport function toInteger(value: any): number {\n  return parseInt(`${value}`, 10);\n}\n/**\n * @param {?} value\n * @return {?}\n */\nexport function toString(value: any): string {\n  return (value !== undefined && value !== null) ? `${value}` : '';\n}\n/**\n * @param {?} value\n * @param {?} max\n * @param {?=} min\n * @return {?}\n */\nexport function getValueInRange(value: number, max: number, min = 0): number {\n  return Math.max(Math.min(value, max), min);\n}\n/**\n * @param {?} value\n * @return {?}\n */\nexport function isString(value: any): boolean {\n  return typeof value === 'string';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nexport function isNumber(value: any): boolean {\n  return !isNaN(toInteger(value));\n}\n/**\n * @param {?} value\n * @return {?}\n */\nexport function isDefined(value: any): boolean {\n  return value !== undefined && value !== null;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nexport function padNumber(value: number) {\n  if (isNumber(value)) {\n    return `0${value}`.slice(-2);\n  } else {\n    return '';\n  }\n}\n/**\n * @param {?} text\n * @return {?}\n */\nexport function regExpEscape(text) {\n  return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}