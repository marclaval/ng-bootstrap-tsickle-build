{"version":3,"file":"carousel.js","sourceRoot":"","sources":["../../../src/carousel/carousel.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  Directive,\n  TemplateRef,\n  ContentChildren,\n  QueryList,\n  Input,\n  OnDestroy,\n  AfterContentChecked,\n  OnInit\n} from '@angular/core/index';\nimport {NgbCarouselConfig} from './carousel-config';\n\nlet /** @type {?} */ nextId = 0;\n/**\n * Represents an individual slide to be used within a carousel.\n */\nexport class NgbSlide {\n  /**\n   * Unique slide identifier. Must be unique for the entire document for proper accessibility support.\n   * Will be auto-generated if not provided.\n   */\n   id = `ngb-slide-${nextId++}`;\n/**\n * @param {?} tplRef\n */\nconstructor(public tplRef: TemplateRef<any>) {}\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: 'template[ngbSlide]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input },],\n};\n}\n\nfunction NgbSlide_tsickle_Closure_declarations() {\n/** @type {?} */\nNgbSlide.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgbSlide.ctorParameters;\n/** @type {?} */\nNgbSlide.propDecorators;\n/**\n * Unique slide identifier. Must be unique for the entire document for proper accessibility support.\n * Will be auto-generated if not provided.\n * @type {?}\n */\nNgbSlide.prototype.id;\n/** @type {?} */\nNgbSlide.prototype.tplRef;\n}\n\n/**\n * Directive to easily create carousels based on Bootstrap's markup.\n */\nexport class NgbCarousel implements AfterContentChecked,\n    OnDestroy, OnInit {\n   slides: QueryList<NgbSlide>;\nprivate _slideChangeInterval;\n\n  /**\n   * Amount of time in milliseconds before next slide is shown.\n   */\n   interval: number;\n\n  /**\n   * Whether can wrap from the last to the first slide.\n   */\n   wrap: boolean;\n\n  /**\n   * A flag for allowing navigation via keyboard\n   */\n   keyboard: boolean;\n\n  /**\n   * The active slide id.\n   */\n   activeId: string;\n/**\n * @param {?} config\n */\nconstructor(config: NgbCarouselConfig) {\n    this.interval = config.interval;\n    this.wrap = config.wrap;\n    this.keyboard = config.keyboard;\n  }\n/**\n * @return {?}\n */\nngAfterContentChecked() {\n    let /** @type {?} */ activeSlide = this._getSlideById(this.activeId);\n    this.activeId = activeSlide ? activeSlide.id : (this.slides.length ? this.slides.first.id : null);\n  }\n/**\n * @return {?}\n */\nngOnInit() { this._startTimer(); }\n/**\n * @return {?}\n */\nngOnDestroy() { clearInterval(this._slideChangeInterval); }\n/**\n * Navigate to a slide with the specified identifier.\n * @param {?} slideId\n * @return {?}\n */\nselect(slideId: string) {\n    this.cycleToSelected(slideId);\n    this._restartTimer();\n  }\n/**\n * Navigate to the next slide.\n * @return {?}\n */\nprev() {\n    this.cycleToPrev();\n    this._restartTimer();\n  }\n/**\n * Navigate to the next slide.\n * @return {?}\n */\nnext() {\n    this.cycleToNext();\n    this._restartTimer();\n  }\n/**\n * Stops the carousel from cycling through items.\n * @return {?}\n */\npause() { this._stopTimer(); }\n/**\n * Restarts cycling through the carousel slides from left to right.\n * @return {?}\n */\ncycle() { this._startTimer(); }\n/**\n * @return {?}\n */\ncycleToNext() { this.cycleToSelected(this._getNextSlide(this.activeId)); }\n/**\n * @return {?}\n */\ncycleToPrev() { this.cycleToSelected(this._getPrevSlide(this.activeId)); }\n/**\n * @param {?} slideIdx\n * @return {?}\n */\ncycleToSelected(slideIdx: string) {\n    let /** @type {?} */ selectedSlide = this._getSlideById(slideIdx);\n    if (selectedSlide) {\n      this.activeId = selectedSlide.id;\n    }\n  }\n/**\n * @return {?}\n */\nkeyPrev() {\n    if (this.keyboard) {\n      this.prev();\n    }\n  }\n/**\n * @return {?}\n */\nkeyNext() {\n    if (this.keyboard) {\n      this.next();\n    }\n  }\n/**\n * @return {?}\n */\nprivate _restartTimer() {\n    this._stopTimer();\n    this._startTimer();\n  }\n/**\n * @return {?}\n */\nprivate _startTimer() {\n    if (this.interval > 0) {\n      this._slideChangeInterval = setInterval(() => { this.cycleToNext(); }, this.interval);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _stopTimer() { clearInterval(this._slideChangeInterval); }\n/**\n * @param {?} slideId\n * @return {?}\n */\nprivate _getSlideById(slideId: string): NgbSlide {\n    let /** @type {?} */ slideWithId: NgbSlide[] = this.slides.filter(slide => slide.id === slideId);\n    return slideWithId.length ? slideWithId[0] : null;\n  }\n/**\n * @param {?} slideId\n * @return {?}\n */\nprivate _getSlideIdxById(slideId: string): number {\n    return this.slides.toArray().indexOf(this._getSlideById(slideId));\n  }\n/**\n * @param {?} currentSlideId\n * @return {?}\n */\nprivate _getNextSlide(currentSlideId: string): string {\n    const /** @type {?} */ slideArr = this.slides.toArray();\n    const /** @type {?} */ currentSlideIdx = this._getSlideIdxById(currentSlideId);\n    const /** @type {?} */ isLastSlide = currentSlideIdx === slideArr.length - 1;\n\n    return isLastSlide ? (this.wrap ? slideArr[0].id : slideArr[slideArr.length - 1].id) :\n                         slideArr[currentSlideIdx + 1].id;\n  }\n/**\n * @param {?} currentSlideId\n * @return {?}\n */\nprivate _getPrevSlide(currentSlideId: string): string {\n    const /** @type {?} */ slideArr = this.slides.toArray();\n    const /** @type {?} */ currentSlideIdx = this._getSlideIdxById(currentSlideId);\n    const /** @type {?} */ isFirstSlide = currentSlideIdx === 0;\n\n    return isFirstSlide ? (this.wrap ? slideArr[slideArr.length - 1].id : slideArr[0].id) :\n                          slideArr[currentSlideIdx - 1].id;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'ngb-carousel',\n  exportAs: 'ngbCarousel',\n  host: {\n    'class': 'carousel slide',\n    '[style.display]': '\"block\"',\n    'tabIndex': '0',\n    '(mouseenter)': 'pause()',\n    '(mouseleave)': 'cycle()',\n    '(keydown.arrowLeft)': 'keyPrev()',\n    '(keydown.arrowRight)': 'keyNext()'\n  },\n  template: `\n    <ol class=\"carousel-indicators\">\n      <li *ngFor=\"let slide of slides\" [id]=\"slide.id\" [class.active]=\"slide.id === activeId\" (click)=\"cycleToSelected(slide.id)\"></li>\n    </ol>\n    <div class=\"carousel-inner\" role=\"listbox\">\n      <div *ngFor=\"let slide of slides\" class=\"carousel-item\" [class.active]=\"slide.id === activeId\">\n        <template [ngTemplateOutlet]=\"slide.tplRef\"></template>\n      </div>\n    </div>\n    <a class=\"left carousel-control-prev\" role=\"button\" (click)=\"cycleToPrev()\">\n      <span class=\"carousel-control-prev-icon\" aria-hidden=\"true\"></span>\n      <span class=\"sr-only\">Previous</span>\n    </a>\n    <a class=\"right carousel-control-next\" role=\"button\" (click)=\"cycleToNext()\">\n      <span class=\"carousel-control-next-icon\" aria-hidden=\"true\"></span>\n      <span class=\"sr-only\">Next</span>\n    </a>\n    `\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgbCarouselConfig, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'slides': [{ type: ContentChildren, args: [NgbSlide, ] },],\n'interval': [{ type: Input },],\n'wrap': [{ type: Input },],\n'keyboard': [{ type: Input },],\n'activeId': [{ type: Input },],\n};\n}\n\nfunction NgbCarousel_tsickle_Closure_declarations() {\n/** @type {?} */\nNgbCarousel.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgbCarousel.ctorParameters;\n/** @type {?} */\nNgbCarousel.propDecorators;\n/** @type {?} */\nNgbCarousel.prototype.slides;\n/** @type {?} */\nNgbCarousel.prototype._slideChangeInterval;\n/**\n * Amount of time in milliseconds before next slide is shown.\n * @type {?}\n */\nNgbCarousel.prototype.interval;\n/**\n * Whether can wrap from the last to the first slide.\n * @type {?}\n */\nNgbCarousel.prototype.wrap;\n/**\n * A flag for allowing navigation via keyboard\n * @type {?}\n */\nNgbCarousel.prototype.keyboard;\n/**\n * The active slide id.\n * @type {?}\n */\nNgbCarousel.prototype.activeId;\n}\n\n\nexport const /** @type {?} */ NGB_CAROUSEL_DIRECTIVES = [NgbCarousel, NgbSlide];\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}