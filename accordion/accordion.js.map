{"version":3,"sources":["../../../src/accordion/accordion.ts"],"names":[],"mappings":";;;;;;;;;OAAO,EACL,mBAAmB,EACnB,SAAS,EACT,YAAY,EACZ,eAAe,EACf,SAAS,EACT,YAAY,EACZ,KAAK,EACL,MAAM,EACN,SAAS,EACT,WAAW,EACZ,MAAM,eAAe;AACtB,MAAM,mBAAmB,GAAqB,mBAAmB,CAAC,CAAE,mCAAmC;AACvG,MAAM,SAAS,GAAqB,SAAS,CAAC,CAAE,mCAAmC;AACnF,MAAM,YAAY,GAAqB,YAAY,CAAC,CAAE,mCAAmC;AACzF,MAAM,eAAe,GAAqB,eAAe,CAAC,CAAE,mCAAmC;AAC/F,MAAM,SAAS,GAAqB,SAAS,CAAC,CAAE,mCAAmC;AACnF,MAAM,YAAY,GAAqB,YAAY,CAAC,CAAE,mCAAmC;AACzF,MAAM,KAAK,GAAqB,KAAK,CAAC,CAAE,mCAAmC;AAC3E,MAAM,MAAM,GAAqB,MAAM,CAAC,CAAE,mCAAmC;AAC7E,MAAM,SAAS,GAAqB,SAAS,CAAC,CAAE,mCAAmC;AACnF,MAAM,WAAW,GAAqB,WAAW,CAAC,CAAE,mCAAmC;OARhF,EAAA,QAAE,EAAQ,MAAA,cAAA;AAWjB,MAAM,QAAQ,GAAqB,QAAQ,CAAC,CAAE,mCAAmC;OAT1E,EAAA,kBAAE,EAAkB,MAAA,oBAAA;AAY3B,MAAM,kBAAkB,GAAqB,kBAAkB,CAAC,CAAE,mCAAmC;AAErG,IAAI,qBAAqB,CAZrB,MAAA,GAAS,CAAA,CAAE;AAaf;;GAEG;AAEH;IACA;;OAEG;IACH,YAdqB,WAA6B;QAA7B,gBAAA,GAAA,WAAA,CAA6B;IAAC,CAAA;AAenD,CAAC;AAND;IAXC,SAAA,CAAA,EAAA,QAAA,EAAA,yBAAA,EAAA,CAAA;;iBAAA;AAmBD;IACA,8BAA8B;IAC9B,aAAa,CAAC,SAAS,CAAC,WAAW,CAAC;AACpC,CAAC;AAED;;GAEG;AAEH;IACA;;OAEG;IACH,YAtBqB,WAA6B;QAA7B,gBAAA,GAAA,WAAA,CAA6B;IAAC,CAAA;AAuBnD,CAAC;AAND;IAnBC,SAAA,CAAA,EAAA,QAAA,EAAA,2BAAA,EAAA,CAAA;;mBAAA;AA2BD;IACA,8BAA8B;IAC9B,eAAe,CAAC,SAAS,CAAC,WAAW,CAAC;AACtC,CAAC;AAED;;;GAGG;AAEH;IAAA;QACE;;WAEG;QACH,YAAO,GA3BY,KAAA,CAAM;QA6BzB;;;WAGG;QA1BM,aAAA,GAAW,KAAA,CAAM;QA6B1B;;;WAGG;QA1BM,OAAA,GAAK,aAAA,MAAc,EAAM,EAAE,CAAE;IA0CxC,CAAC;AAAD,CAAC;AArBC;IAAC,KA3BC,EAAK;;0CAAA;AAiCP;IAAC,KA3BC,EAAK;;oCAAA;AAgCP;IAAC,KA3BC,EAAK;;uCAAA;AAiCP;IAAC,KA3BC,EAAK;;sCAAA;AA6BP;IAAC,YA3BC,CAAY,eAAC,CAAe;;4CAAA;AA4B9B;IAAC,YA3BC,CAAY,aAAC,CAAa;;0CAAA;AAJ9B;IA3BC,SAAA,CAAA,EAAA,QAAA,EAAA,WAAA,EAAA,CAAA;;YAAA;AA6DD;IACA;;;OAGG;IACH,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC;IAC3B;;;;OAIG;IACH,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC;IAC5B;;;;OAIG;IACH,QAAQ,CAAC,SAAS,CAAC,EAAE,CAAC;IACtB;;;OAGG;IACH,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC;IACzB;;;;OAIG;IACH,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC;IACxB,+BAA+B;IAC/B,QAAQ,CAAC,SAAS,CAAC,UAAU,CAAC;IAC9B,6BAA6B;IAC7B,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC;AAC5B,CAAC;AAED,cAAc;AACd,wCAAuC,CAAC;AACxC;;;GAGG;AACH,mBAAmB,CAAC,SAAS,CAAC,OAAO,CAAC;AACtC;;;GAGG;AACH,mBAAmB,CAAC,SAAS,CAAC,SAAS,CAAC;AACxC;;;GAGG;AACH,mBAAmB,CAAC,SAAS,CAAC,cAAc,CAAC;AAsB7C;;;GAGG;AAuBH;IA0BA;;OAEG;IACH,YA3EG,MAAmB;QA9BZ,YAAA,GAAgC,IAAI,GAAA,EAAoB,CAAG;QAK3D,eAAA,GAAoC,IAAI,GAAA,EAAqB,CAAG;QA6ExE;;WAEG;QAxEM,cAAA,GAA+B,EAAA,CAAG;QAsF3C;;WAEG;QAxEO,gBAAA,GAAc,IAAI,YAAA,EAAiC,CAAG;QA8E9D,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;QACxB,IAAI,CAAC,gBAAgB,GAAG,MAAM,CAAC,WAAW,CAAC;IAC7C,CAAC;IACH;;;;OAIG;IACH,MA5EG,CAAA,OAAA;QA6EC,MAAM,wBAAwB,CA5ExB,KAAA,GAAQ,IAAA,CAAK,UAAC,CAAU,GAAC,CAAG,OAAC,CAAO,CAAC;QA8E3C,EAAE,CAAC,CAAC,KA5EC,IAAQ,CAAA,KAAE,CAAK,QAAC,CAAQ,CAAC,CAAA;YA6E5B,MAAM,sBAAsB,CA5EtB,SAAA,GAAY,CAAA,IAAE,CAAI,OAAC,CAAO,GAAC,CAAG,OAAC,CAAO,CAAC;YA6E7C,IAAI,sBAAsB,CA5EtB,gBAAA,GAAmB,KAAA,CAAM;YA8E7B,IAAI,CA5EC,WAAC,CAAW,IAAC,CA6Ed,EAAC,OA5EC,EAAQ,OAAA,EAAS,SAAA,EAAW,SAAA,EAAW,cAAA,EAAgB,QAAQ,gBAAA,GAAmB,IAAA,CAAK,CAAC,CAAA,EAAE,CAAC,CAAC;YA8ElG,EAAE,CAAC,CAAC,CA5EC,gBAAC,CAAgB,CAAC,CAAA;gBA6ErB,IAAI,CA5EC,OAAC,CAAO,GAAC,CAAG,OAAC,EAAQ,SAAA,CAAU,CAAC;gBA8ErC,EAAE,CAAC,CAAC,IA5EC,CAAI,gBAAC,CAAgB,CAAC,CAAA;oBA6EzB,IAAI,CA5EC,YAAC,CAAY,OAAC,CAAO,CAAC;gBA6E7B,CAAC;gBACD,IAAI,CA5EC,gBAAC,EAAgB,CAAE;YA6E1B,CAAC;QACH,CAAC;IACH,CAAC;IACH;;OAEG;IACH,qBA9EG;QA+EC,oBAAoB;QACpB,EAAE,CAAC,CAAC,QA9EC,CAAQ,IAAC,CAAI,SAAC,CAAS,CAAC,CAAC,CAAA;YA+E5B,IAAI,CA9EC,SAAC,GAAW,CAAA,CAAA,IAAE,CAAI,SAAa,CAAA,CAAO,CAAC,KAAC,CAAK,SAAC,CAAS,CAAC;QA+E/D,CAAC;QACD,IAAI,CA9EC,aAAC,EAAa,CAAE;QAgFrB,sBAAsB;QACtB,EAAE,CAAC,CAAC,IA9EC,CAAI,SAAC,CAAS,MAAC,GAAQ,CAAA,IAAK,IAAA,CAAK,gBAAC,CAAgB,CAAC,CAAA;YA+EtD,IAAI,CA9EC,YAAC,CAAY,IAAC,CAAI,SAAC,CAAS,CAAC,CAAC,CAAC,CAAC;YA+ErC,IAAI,CA9EC,gBAAC,EAAgB,CAAE;QA+E1B,CAAC;IACH,CAAC;IACH;;;;OAIG;IACH,MA/EG,CAAA,OAAA,IAAkC,MAAA,CAAO,IAAA,CAAK,OAAC,CAAO,GAAC,CAAG,OAAC,CAAO,CAAC,CAAC,CAAA;IAgFvE;;;OAGG;IAjFA,YAAA,CAAA,OAAA;QAmFC,IAAI,CAlFC,OAAC,CAAO,OAAC,CAAO,CAAC,KAAC,EAAM,EAAA;YAmF3B,EAAE,CAAC,CAAC,EAlFC,KAAM,OAAA,CAAQ,CAAC,CAAA;gBAmFlB,IAAI,CAlFC,OAAC,CAAO,GAAC,CAAG,EAAC,EAAG,KAAA,CAAM,CAAC;YAmF9B,CAAC;QACH,CAAC,CAlFC,CAAC;IAmFL,CAAC;IACH;;OAEG;IAnFA,gBAAA;QAqFC,IAAI,CApFC,SAAC;YAqFF,IAAI,CApFC,MAAC,CAAM,OAAC,EAAO,CAAE,MAAC,CAAM,KAAC,IAAQ,IAAA,CAAK,MAAC,CAAM,KAAC,CAAK,EAAC,CAAE,IAAI,CAAA,KAAE,CAAK,QAAC,CAAQ,CAAC,GAAC,CAAG,KAAC,IAAQ,KAAA,CAAM,EAAC,CAAE,CAAC;IAqF7G,CAAC;IACH;;OAEG;IArFA,aAAA;QAuFC,IAAI,CAtFC,OAAC,CAAO,KAAC,EAAK,CAAE;QAuFrB,IAAI,CAtFC,UAAC,CAAU,KAAC,EAAK,CAAE;QAuFxB,IAAI,CAtFC,MAAC,CAAM,OAAC,EAAO,CAAE,OAAC,CAAO,CAAC,KAAC;YAuF9B,IAAI,CAtFC,OAAC,CAAO,GAAC,CAAG,KAAC,CAAK,EAAC,EAAG,IAAA,CAAK,SAAC,CAAS,OAAC,CAAO,KAAC,CAAK,EAAC,CAAE,GAAG,CAAA,CAAE,IAAI,CAAA,KAAE,CAAK,QAAC,CAAQ,CAAC;YAuFrF,IAAI,CAtFC,UAAC,CAAU,GAAC,CAAG,KAAC,CAAK,EAAC,EAAG,KAAA,CAAM,CAAC;QAuFvC,CAAC,CAtFC,CAAC;IAuFL,CAAC;AACH,CAAC;AAzGC;IAAC,eAzEC,CAAe,QAAC,CAAQ;;4CAAA;AA8E1B;IAAC,KAzEC,EAAK;;+CAAA;AA8EP;IAAC,KAzEC,CAAK,aAAC,CAAa;;sDAAA;AA+ErB;IAAC,KAzEC,EAAK;;0CAAA;AA8EP;IAAC,MAzEC,EAAM;;iDAAA;AA0BV;IAhFC,SAAA,CAAA;QAiFC,QAAQ,EAAE,eAAe;QACzB,QAAQ,EAAE,cAAc;QACxB,IAAI,EAAE,EAAC,MAAM,EAAE,SAAS,EAAE,6BAA6B,EAAE,mBAAmB,EAAC;QAC7E,QAAQ,EAAE;;;;;;;;;;;;;;;;CAgBX;KACA,CAAC;;gBAAA;AAgHF;IACA;;;OAGG;IACH,YAAY,CAAC,SAAS,CAAC,OAAO,CAAC;IAC/B;;;OAGG;IACH,YAAY,CAAC,SAAS,CAAC,UAAU,CAAC;IAClC,oCAAoC;IACpC,YAAY,CAAC,SAAS,CAAC,MAAM,CAAC;IAC9B;;;OAGG;IACH,YAAY,CAAC,SAAS,CAAC,SAAS,CAAC;IACjC;;;OAGG;IACH,YAAY,CAAC,SAAS,CAAC,gBAAgB,CAAC;IACxC;;;;OAIG;IACH,YAAY,CAAC,SAAS,CAAC,IAAI,CAAC;IAC5B;;;OAGG;IACH,YAAY,CAAC,SAAS,CAAC,WAAW,CAAC;AACnC,CAAC","file":"accordion.js","sourceRoot":"","sourcesContent":["import {\n  AfterContentChecked,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  EventEmitter,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef\n} from '@angular/core';\nconst AfterContentChecked: NeverTypeCheckMe = AfterContentChecked;  /* local alias for Closure JSDoc */\nconst Component: NeverTypeCheckMe = Component;  /* local alias for Closure JSDoc */\nconst ContentChild: NeverTypeCheckMe = ContentChild;  /* local alias for Closure JSDoc */\nconst ContentChildren: NeverTypeCheckMe = ContentChildren;  /* local alias for Closure JSDoc */\nconst Directive: NeverTypeCheckMe = Directive;  /* local alias for Closure JSDoc */\nconst EventEmitter: NeverTypeCheckMe = EventEmitter;  /* local alias for Closure JSDoc */\nconst Input: NeverTypeCheckMe = Input;  /* local alias for Closure JSDoc */\nconst Output: NeverTypeCheckMe = Output;  /* local alias for Closure JSDoc */\nconst QueryList: NeverTypeCheckMe = QueryList;  /* local alias for Closure JSDoc */\nconst TemplateRef: NeverTypeCheckMe = TemplateRef;  /* local alias for Closure JSDoc */\n\nimport {isString} from '../util/util';\nconst isString: NeverTypeCheckMe = isString;  /* local alias for Closure JSDoc */\n\nimport {NgbAccordionConfig} from './accordion-config';\nconst NgbAccordionConfig: NeverTypeCheckMe = NgbAccordionConfig;  /* local alias for Closure JSDoc */\n\nlet /** @type {number} */ nextId = 0;\n/**\n * This directive should be used to wrap accordion panel titles that need to contain HTML markup or other directives.\n */\n@Directive({selector: 'template[ngbPanelTitle]'})\nexport class NgbPanelTitle {\n/**\n * @param {!TemplateRef<?>} templateRef\n */\nconstructor(public templateRef: TemplateRef<any>) {}\n}\n\nfunction NgbPanelTitle_tsickle_Closure_declarations() {\n/** @type {!TemplateRef<?>} */\nNgbPanelTitle.prototype.templateRef;\n}\n\n/**\n * This directive must be used to wrap accordion panel content.\n */\n@Directive({selector: 'template[ngbPanelContent]'})\nexport class NgbPanelContent {\n/**\n * @param {!TemplateRef<?>} templateRef\n */\nconstructor(public templateRef: TemplateRef<any>) {}\n}\n\nfunction NgbPanelContent_tsickle_Closure_declarations() {\n/** @type {!TemplateRef<?>} */\nNgbPanelContent.prototype.templateRef;\n}\n\n/**\n * The NgbPanel directive represents an individual panel with the title and collapsible\n * content\n */\n@Directive({selector: 'ngb-panel'})\nexport class NgbPanel {\n  /**\n   * Defines if the tab control is focused\n   */\n  focused: boolean = false;\n\n  /**\n   *  A flag determining whether the panel is disabled or not.\n   *  When disabled, the panel cannot be toggled.\n   */\n  @Input() disabled = false;\n\n  /**\n   *  An optional id for the panel. The id should be unique.\n   *  If not provided, it will be auto-generated.\n   */\n  @Input() id = `ngb-panel-${nextId++}`;\n\n  /**\n   *  The title for the panel.\n   */\n  @Input() title: string;\n\n  /**\n   *  Accordion's types of panels to be applied per panel basis.\n   *  Bootstrap 4 recognizes the following types: \"success\", \"info\", \"warning\" and \"danger\".\n   */\n  @Input() type: string;\n\n  @ContentChild(NgbPanelContent) contentTpl: NgbPanelContent;\n  @ContentChild(NgbPanelTitle) titleTpl: NgbPanelTitle;\n}\n\nfunction NgbPanel_tsickle_Closure_declarations() {\n/**\n * Defines if the tab control is focused\n * @type {boolean}\n */\nNgbPanel.prototype.focused;\n/**\n *  A flag determining whether the panel is disabled or not.\n *  When disabled, the panel cannot be toggled.\n * @type {boolean}\n */\nNgbPanel.prototype.disabled;\n/**\n *  An optional id for the panel. The id should be unique.\n *  If not provided, it will be auto-generated.\n * @type {string}\n */\nNgbPanel.prototype.id;\n/**\n *  The title for the panel.\n * @type {string}\n */\nNgbPanel.prototype.title;\n/**\n *  Accordion's types of panels to be applied per panel basis.\n *  Bootstrap 4 recognizes the following types: \"success\", \"info\", \"warning\" and \"danger\".\n * @type {string}\n */\nNgbPanel.prototype.type;\n/** @type {!NgbPanelContent} */\nNgbPanel.prototype.contentTpl;\n/** @type {!NgbPanelTitle} */\nNgbPanel.prototype.titleTpl;\n}\n\n/** @record */\nexport function NgbPanelChangeEvent() {}\n/**\n * Id of the accordion panel that is toggled\n * @type {string}\n */\nNgbPanelChangeEvent.prototype.panelId;\n/**\n * Whether the panel will be opened (true) or closed (false)\n * @type {boolean}\n */\nNgbPanelChangeEvent.prototype.nextState;\n/**\n * Function that will prevent panel toggling if called\n * @type {function(): void}\n */\nNgbPanelChangeEvent.prototype.preventDefault;\n\n\n/**\n * The payload of the change event fired right before toggling an accordion panel\n */\nexport interface NgbPanelChangeEvent {\n  /**\n   * Id of the accordion panel that is toggled\n   */\n  panelId: string;\n\n  /**\n   * Whether the panel will be opened (true) or closed (false)\n   */\n  nextState: boolean;\n\n  /**\n   * Function that will prevent panel toggling if called\n   */\n  preventDefault: () => void;\n}\n/**\n * The NgbAccordion directive is a collection of panels.\n * It can assure that only panel can be opened at a time.\n */\n@Component({\n  selector: 'ngb-accordion',\n  exportAs: 'ngbAccordion',\n  host: {'role': 'tablist', '[attr.aria-multiselectable]': '!closeOtherPanels'},\n  template: `\n  <div class=\"card\">\n    <template ngFor let-panel [ngForOf]=\"panels\">\n      <div role=\"tab\" id=\"{{panel.id}}-header\" [attr.aria-selected]=\"panel.focused\"\n        [class]=\"'card-header ' + (panel.type ? 'card-'+panel.type: type ? 'card-'+type : '')\" [class.active]=\"isOpen(panel.id)\">\n        <a href (click)=\"!!toggle(panel.id)\" (focus)=\"panel.focused = true\" \n          (blur)=\"panel.focused = false\" [class.text-muted]=\"panel.disabled\" \n          [attr.aria-expanded]=\"isOpen(panel.id)\" [attr.aria-controls]=\"panel.id\">\n          {{panel.title}}<template [ngTemplateOutlet]=\"panel.titleTpl?.templateRef\"></template>\n        </a>\n      </div>\n      <div id=\"{{panel.id}}\" role=\"tabpanel\" [attr.aria-labelledby]=\"panel.id + '-header'\" class=\"card-block\" *ngIf=\"isOpen(panel.id)\">\n        <template [ngTemplateOutlet]=\"panel.contentTpl.templateRef\"></template>\n      </div>\n    </template>\n  </div>\n`\n})\nexport class NgbAccordion implements AfterContentChecked {\nprivate _states: Map<string, boolean> = new Map<string, boolean>();\nprivate _panelRefs: Map<string, NgbPanel> = new Map<string, NgbPanel>();\n\n  @ContentChildren(NgbPanel) panels: QueryList<NgbPanel>;\n\n  /**\n   * An array or comma separated strings of panel identifiers that should be opened\n   */\n  @Input() activeIds: string | string[] = [];\n\n  /**\n   *  Whether the other panels should be closed when a panel is opened\n   */\n  @Input('closeOthers') closeOtherPanels: boolean;\n\n  /**\n   *  Accordion's types of panels to be applied globally.\n   *  Bootstrap 4 recognizes the following types: \"success\", \"info\", \"warning\" and \"danger\".\n   */\n  @Input() type: string;\n\n  /**\n   * A panel change event fired right before the panel toggle happens. See NgbPanelChangeEvent for payload details\n   */\n  @Output() panelChange = new EventEmitter<NgbPanelChangeEvent>();\n/**\n * @param {!NgbAccordionConfig} config\n */\nconstructor(config: NgbAccordionConfig) {\n    this.type = config.type;\n    this.closeOtherPanels = config.closeOthers;\n  }\n/**\n * Programmatically toggle a panel with a given id.\n * @param {string} panelId\n * @return {void}\n */\ntoggle(panelId: string) {\n    const /** @type {!NgbPanel} */ panel = this._panelRefs.get(panelId);\n\n    if (panel && !panel.disabled) {\n      const /** @type {boolean} */ nextState = !this._states.get(panelId);\n      let /** @type {boolean} */ defaultPrevented = false;\n\n      this.panelChange.emit(\n          {panelId: panelId, nextState: nextState, preventDefault: () => { defaultPrevented = true; }});\n\n      if (!defaultPrevented) {\n        this._states.set(panelId, nextState);\n\n        if (this.closeOtherPanels) {\n          this._closeOthers(panelId);\n        }\n        this._updateActiveIds();\n      }\n    }\n  }\n/**\n * @return {void}\n */\nngAfterContentChecked() {\n    // active id updates\n    if (isString(this.activeIds)) {\n      this.activeIds = ( /** @type {string} */((this.activeIds as string))).split(/\\s*,\\s*/);\n    }\n    this._updateStates();\n\n    // closeOthers updates\n    if (this.activeIds.length > 1 && this.closeOtherPanels) {\n      this._closeOthers(this.activeIds[0]);\n      this._updateActiveIds();\n    }\n  }\n/**\n * \\@internal\n * @param {string} panelId\n * @return {boolean}\n */\nisOpen(panelId: string): boolean { return this._states.get(panelId); }\n/**\n * @param {string} panelId\n * @return {void}\n */\nprivate _closeOthers(panelId: string) {\n    this._states.forEach((state, id) => {\n      if (id !== panelId) {\n        this._states.set(id, false);\n      }\n    });\n  }\n/**\n * @return {void}\n */\nprivate _updateActiveIds() {\n    this.activeIds =\n        this.panels.toArray().filter(panel => this.isOpen(panel.id) && !panel.disabled).map(panel => panel.id);\n  }\n/**\n * @return {void}\n */\nprivate _updateStates() {\n    this._states.clear();\n    this._panelRefs.clear();\n    this.panels.toArray().forEach((panel) => {\n      this._states.set(panel.id, this.activeIds.indexOf(panel.id) > -1 && !panel.disabled);\n      this._panelRefs.set(panel.id, panel);\n    });\n  }\n}\n\nfunction NgbAccordion_tsickle_Closure_declarations() {\n/**\n * A map that stores each panel state\n * @type {!Map<string, boolean>}\n */\nNgbAccordion.prototype._states;\n/**\n * A map that stores references to all panels\n * @type {!Map<string, !NgbPanel>}\n */\nNgbAccordion.prototype._panelRefs;\n/** @type {!QueryList<!NgbPanel>} */\nNgbAccordion.prototype.panels;\n/**\n * An array or comma separated strings of panel identifiers that should be opened\n * @type {(string|!Array<string>)}\n */\nNgbAccordion.prototype.activeIds;\n/**\n *  Whether the other panels should be closed when a panel is opened\n * @type {boolean}\n */\nNgbAccordion.prototype.closeOtherPanels;\n/**\n *  Accordion's types of panels to be applied globally.\n *  Bootstrap 4 recognizes the following types: \"success\", \"info\", \"warning\" and \"danger\".\n * @type {string}\n */\nNgbAccordion.prototype.type;\n/**\n * A panel change event fired right before the panel toggle happens. See NgbPanelChangeEvent for payload details\n * @type {!EventEmitter<!NgbPanelChangeEvent>}\n */\nNgbAccordion.prototype.panelChange;\n}\n\n"]}