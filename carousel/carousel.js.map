{"version":3,"sources":["../../../src/carousel/carousel.ts"],"names":[],"mappings":"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","file":"carousel.js","sourceRoot":"","sourcesContent":["import {\n  Component,\n  Directive,\n  TemplateRef,\n  ContentChildren,\n  QueryList,\n  Input,\n  OnDestroy,\n  AfterContentChecked,\n  OnInit\n} from '@angular/core';\nconst Component: NeverTypeCheckMe = Component;  /* local alias for Closure JSDoc */\nconst Directive: NeverTypeCheckMe = Directive;  /* local alias for Closure JSDoc */\nconst TemplateRef: NeverTypeCheckMe = TemplateRef;  /* local alias for Closure JSDoc */\nconst ContentChildren: NeverTypeCheckMe = ContentChildren;  /* local alias for Closure JSDoc */\nconst QueryList: NeverTypeCheckMe = QueryList;  /* local alias for Closure JSDoc */\nconst Input: NeverTypeCheckMe = Input;  /* local alias for Closure JSDoc */\nconst OnDestroy: NeverTypeCheckMe = OnDestroy;  /* local alias for Closure JSDoc */\nconst AfterContentChecked: NeverTypeCheckMe = AfterContentChecked;  /* local alias for Closure JSDoc */\nconst OnInit: NeverTypeCheckMe = OnInit;  /* local alias for Closure JSDoc */\nimport {NgbCarouselConfig} from './carousel-config';\nconst NgbCarouselConfig: NeverTypeCheckMe = NgbCarouselConfig;  /* local alias for Closure JSDoc */\n\nlet /** @type {number} */ nextId = 0;\n/**\n * Represents an individual slide to be used within a carousel.\n */\n@Directive({selector: 'template[ngbSlide]'})\nexport class NgbSlide {\n  /**\n   * Unique slide identifier. Must be unique for the entire document for proper accessibility support.\n   * Will be auto-generated if not provided.\n   */\n  @Input() id = `ngb-slide-${nextId++}`;\n/**\n * @param {!TemplateRef<?>} tplRef\n */\nconstructor(public tplRef: TemplateRef<any>) {}\n}\n\nfunction NgbSlide_tsickle_Closure_declarations() {\n/**\n * Unique slide identifier. Must be unique for the entire document for proper accessibility support.\n * Will be auto-generated if not provided.\n * @type {string}\n */\nNgbSlide.prototype.id;\n/** @type {!TemplateRef<?>} */\nNgbSlide.prototype.tplRef;\n}\n\n/**\n * Directive to easily create carousels based on Bootstrap's markup.\n */\n@Component({\n  selector: 'ngb-carousel',\n  exportAs: 'ngbCarousel',\n  host: {\n    'class': 'carousel slide',\n    '[style.display]': '\"block\"',\n    'tabIndex': '0',\n    '(mouseenter)': 'pause()',\n    '(mouseleave)': 'cycle()',\n    '(keydown.arrowLeft)': 'keyPrev()',\n    '(keydown.arrowRight)': 'keyNext()'\n  },\n  template: `\n    <ol class=\"carousel-indicators\">\n      <li *ngFor=\"let slide of slides\" [id]=\"slide.id\" [class.active]=\"slide.id === activeId\" (click)=\"cycleToSelected(slide.id)\"></li>\n    </ol>\n    <div class=\"carousel-inner\" role=\"listbox\">\n      <div *ngFor=\"let slide of slides\" class=\"carousel-item\" [class.active]=\"slide.id === activeId\">\n        <template [ngTemplateOutlet]=\"slide.tplRef\"></template>\n      </div>\n    </div>\n    <a class=\"left carousel-control-prev\" role=\"button\" (click)=\"cycleToPrev()\">\n      <span class=\"carousel-control-prev-icon\" aria-hidden=\"true\"></span>\n      <span class=\"sr-only\">Previous</span>\n    </a>\n    <a class=\"right carousel-control-next\" role=\"button\" (click)=\"cycleToNext()\">\n      <span class=\"carousel-control-next-icon\" aria-hidden=\"true\"></span>\n      <span class=\"sr-only\">Next</span>\n    </a>\n    `\n})\nexport class NgbCarousel implements AfterContentChecked,\n    OnDestroy, OnInit {\n  @ContentChildren(NgbSlide) slides: QueryList<NgbSlide>;\nprivate _slideChangeInterval;\n\n  /**\n   * Amount of time in milliseconds before next slide is shown.\n   */\n  @Input() interval: number;\n\n  /**\n   * Whether can wrap from the last to the first slide.\n   */\n  @Input() wrap: boolean;\n\n  /**\n   * A flag for allowing navigation via keyboard\n   */\n  @Input() keyboard: boolean;\n\n  /**\n   * The active slide id.\n   */\n  @Input() activeId: string;\n/**\n * @param {!NgbCarouselConfig} config\n */\nconstructor(config: NgbCarouselConfig) {\n    this.interval = config.interval;\n    this.wrap = config.wrap;\n    this.keyboard = config.keyboard;\n  }\n/**\n * @return {void}\n */\nngAfterContentChecked() {\n    let /** @type {!NgbSlide} */ activeSlide = this._getSlideById(this.activeId);\n    this.activeId = activeSlide ? activeSlide.id : (this.slides.length ? this.slides.first.id : null);\n  }\n/**\n * @return {void}\n */\nngOnInit() { this._startTimer(); }\n/**\n * @return {void}\n */\nngOnDestroy() { clearInterval(this._slideChangeInterval); }\n/**\n * Navigate to a slide with the specified identifier.\n * @param {string} slideId\n * @return {void}\n */\nselect(slideId: string) {\n    this.cycleToSelected(slideId);\n    this._restartTimer();\n  }\n/**\n * Navigate to the next slide.\n * @return {void}\n */\nprev() {\n    this.cycleToPrev();\n    this._restartTimer();\n  }\n/**\n * Navigate to the next slide.\n * @return {void}\n */\nnext() {\n    this.cycleToNext();\n    this._restartTimer();\n  }\n/**\n * Stops the carousel from cycling through items.\n * @return {void}\n */\npause() { this._stopTimer(); }\n/**\n * Restarts cycling through the carousel slides from left to right.\n * @return {void}\n */\ncycle() { this._startTimer(); }\n/**\n * @return {void}\n */\ncycleToNext() { this.cycleToSelected(this._getNextSlide(this.activeId)); }\n/**\n * @return {void}\n */\ncycleToPrev() { this.cycleToSelected(this._getPrevSlide(this.activeId)); }\n/**\n * @param {string} slideIdx\n * @return {void}\n */\ncycleToSelected(slideIdx: string) {\n    let /** @type {!NgbSlide} */ selectedSlide = this._getSlideById(slideIdx);\n    if (selectedSlide) {\n      this.activeId = selectedSlide.id;\n    }\n  }\n/**\n * @return {void}\n */\nkeyPrev() {\n    if (this.keyboard) {\n      this.prev();\n    }\n  }\n/**\n * @return {void}\n */\nkeyNext() {\n    if (this.keyboard) {\n      this.next();\n    }\n  }\n/**\n * @return {void}\n */\nprivate _restartTimer() {\n    this._stopTimer();\n    this._startTimer();\n  }\n/**\n * @return {void}\n */\nprivate _startTimer() {\n    if (this.interval > 0) {\n      this._slideChangeInterval = setInterval(() => { this.cycleToNext(); }, this.interval);\n    }\n  }\n/**\n * @return {void}\n */\nprivate _stopTimer() { clearInterval(this._slideChangeInterval); }\n/**\n * @param {string} slideId\n * @return {!NgbSlide}\n */\nprivate _getSlideById(slideId: string): NgbSlide {\n    let /** @type {!Array<!NgbSlide>} */ slideWithId: NgbSlide[] = this.slides.filter(slide => slide.id === slideId);\n    return slideWithId.length ? slideWithId[0] : null;\n  }\n/**\n * @param {string} slideId\n * @return {number}\n */\nprivate _getSlideIdxById(slideId: string): number {\n    return this.slides.toArray().indexOf(this._getSlideById(slideId));\n  }\n/**\n * @param {string} currentSlideId\n * @return {string}\n */\nprivate _getNextSlide(currentSlideId: string): string {\n    const /** @type {!Array<!NgbSlide>} */ slideArr = this.slides.toArray();\n    const /** @type {number} */ currentSlideIdx = this._getSlideIdxById(currentSlideId);\n    const /** @type {boolean} */ isLastSlide = currentSlideIdx === slideArr.length - 1;\n\n    return isLastSlide ? (this.wrap ? slideArr[0].id : slideArr[slideArr.length - 1].id) :\n                         slideArr[currentSlideIdx + 1].id;\n  }\n/**\n * @param {string} currentSlideId\n * @return {string}\n */\nprivate _getPrevSlide(currentSlideId: string): string {\n    const /** @type {!Array<!NgbSlide>} */ slideArr = this.slides.toArray();\n    const /** @type {number} */ currentSlideIdx = this._getSlideIdxById(currentSlideId);\n    const /** @type {boolean} */ isFirstSlide = currentSlideIdx === 0;\n\n    return isFirstSlide ? (this.wrap ? slideArr[slideArr.length - 1].id : slideArr[0].id) :\n                          slideArr[currentSlideIdx - 1].id;\n  }\n}\n\nfunction NgbCarousel_tsickle_Closure_declarations() {\n/** @type {!QueryList<!NgbSlide>} */\nNgbCarousel.prototype.slides;\n/** @type {?} */\nNgbCarousel.prototype._slideChangeInterval;\n/**\n * Amount of time in milliseconds before next slide is shown.\n * @type {number}\n */\nNgbCarousel.prototype.interval;\n/**\n * Whether can wrap from the last to the first slide.\n * @type {boolean}\n */\nNgbCarousel.prototype.wrap;\n/**\n * A flag for allowing navigation via keyboard\n * @type {boolean}\n */\nNgbCarousel.prototype.keyboard;\n/**\n * The active slide id.\n * @type {string}\n */\nNgbCarousel.prototype.activeId;\n}\n\n\nexport const /** @type {!Array<?>} */ NGB_CAROUSEL_DIRECTIVES = [NgbCarousel, NgbSlide];\n"]}