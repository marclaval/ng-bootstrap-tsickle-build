{"version":3,"file":"ngb-calendar.js","sourceRoot":"","sources":["../../../src/datepicker/ngb-calendar.ts"],"names":[],"mappings":"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","sourcesContent":["import {NgbDate} from './ngb-date';\nimport {Injectable} from '@angular/core/index';\nimport {isNumber} from '../util/util';\n/**\n * @param {?} jsDate\n * @return {?}\n */\nfunction fromJSDate(jsDate: Date) {\n  return new NgbDate(jsDate.getFullYear(), jsDate.getMonth() + 1, jsDate.getDate());\n}\n/**\n * @param {?} date\n * @return {?}\n */\nfunction toJSDate(date: NgbDate) {\n  const /** @type {?} */ jsDate = new Date(date.year, date.month - 1, date.day);\n  // this is done avoid 30 -> 1930 conversion\n  if (!isNaN(jsDate.getTime())) {\n    jsDate.setFullYear(date.year);\n  }\n  return jsDate;\n}\n\nexport type NgbPeriod = 'y' | 'm' | 'd';\n/**\n * @abstract\n */\nexport abstract class NgbCalendar {\n/**\n * @abstract\n * @return {?}\n */\ngetDaysPerWeek() {}\n/**\n * @abstract\n * @return {?}\n */\ngetMonths() {}\n/**\n * @abstract\n * @return {?}\n */\ngetWeeksPerMonth() {}\n/**\n * @abstract\n * @param {?} date\n * @return {?}\n */\ngetWeekday(date: NgbDate) {}\n/**\n * @abstract\n * @param {?} date\n * @param {?=} period\n * @param {?=} number\n * @return {?}\n */\ngetNext(date: NgbDate, period?: NgbPeriod, number?: number) {}\n/**\n * @abstract\n * @param {?} date\n * @param {?=} period\n * @param {?=} number\n * @return {?}\n */\ngetPrev(date: NgbDate, period?: NgbPeriod, number?: number) {}\n/**\n * @abstract\n * @param {?} week\n * @param {?} firstDayOfWeek\n * @return {?}\n */\ngetWeekNumber(week: NgbDate[], firstDayOfWeek: number) {}\n/**\n * @abstract\n * @return {?}\n */\ngetToday() {}\n/**\n * @abstract\n * @param {?} date\n * @return {?}\n */\nisValid(date: NgbDate) {}\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NgbCalendar_tsickle_Closure_declarations() {\n/** @type {?} */\nNgbCalendar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgbCalendar.ctorParameters;\n}\n\nexport class NgbCalendarGregorian extends NgbCalendar {\n/**\n * @return {?}\n */\ngetDaysPerWeek() { return 7; }\n/**\n * @return {?}\n */\ngetMonths() { return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]; }\n/**\n * @return {?}\n */\ngetWeeksPerMonth() { return 6; }\n/**\n * @param {?} date\n * @param {?=} period\n * @param {?=} number\n * @return {?}\n */\ngetNext(date: NgbDate, period: NgbPeriod = 'd', number = 1) {\n    let /** @type {?} */ jsDate = toJSDate(date);\n\n    switch (period) {\n      case 'y':\n        return new NgbDate(date.year + number, 1, 1);\n      case 'm':\n        jsDate = new Date(date.year, date.month + number - 1, 1);\n        break;\n      case 'd':\n        jsDate.setDate(jsDate.getDate() + number);\n        break;\n      default:\n        return date;\n    }\n\n    return fromJSDate(jsDate);\n  }\n/**\n * @param {?} date\n * @param {?=} period\n * @param {?=} number\n * @return {?}\n */\ngetPrev(date: NgbDate, period: NgbPeriod = 'd', number = 1) { return this.getNext(date, period, -number); }\n/**\n * @param {?} date\n * @return {?}\n */\ngetWeekday(date: NgbDate) {\n    let /** @type {?} */ jsDate = toJSDate(date);\n    let /** @type {?} */ day = jsDate.getDay();\n    // in JS Date Sun=0, in ISO 8601 Sun=7\n    return day === 0 ? 7 : day;\n  }\n/**\n * @param {?} week\n * @param {?} firstDayOfWeek\n * @return {?}\n */\ngetWeekNumber(week: NgbDate[], firstDayOfWeek: number) {\n    // in JS Date Sun=0, in ISO 8601 Sun=7\n    if (firstDayOfWeek === 7) {\n      firstDayOfWeek = 0;\n    }\n\n    const /** @type {?} */ thursdayIndex = (4 + 7 - firstDayOfWeek) % 7;\n    let /** @type {?} */ date = week[thursdayIndex];\n\n    const /** @type {?} */ jsDate = toJSDate(date);\n    jsDate.setDate(jsDate.getDate() + 4 - (jsDate.getDay() || 7));  // Thursday\n    const /** @type {?} */ time = jsDate.getTime();\n    jsDate.setMonth(0);  // Compare with Jan 1\n    jsDate.setDate(1);\n    return Math.floor(Math.round((time - jsDate.getTime()) / 86400000) / 7) + 1;\n  }\n/**\n * @return {?}\n */\ngetToday(): NgbDate { return fromJSDate(new Date()); }\n/**\n * @param {?} date\n * @return {?}\n */\nisValid(date: NgbDate): boolean {\n    return date && isNumber(date.year) && isNumber(date.month) && isNumber(date.day) &&\n        !isNaN(toJSDate(date).getTime());\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NgbCalendarGregorian_tsickle_Closure_declarations() {\n/** @type {?} */\nNgbCalendarGregorian.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgbCalendarGregorian.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}