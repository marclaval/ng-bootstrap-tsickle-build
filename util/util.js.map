{"version":3,"sources":["../../../src/util/util.ts"],"names":[],"mappings":"AACA;;;GAGG;AACH,0BALC,KAAA;IAMC,MAAM,CALC,QAAA,CAAS,GAAC,KAAG,EAAK,EAAG,EAAA,CAAG,CAAC;AAMlC,CAAC;AACD;;;GAGG;AACH,yBARC,KAAA;IASC,MAAM,CARC,CAAA,KAAE,KAAS,SAAA,IAAa,KAAA,KAAU,IAAA,CAAK,GAAG,GAAA,KAAI,EAAK,GAAI,EAAA,CAAG;AASnE,CAAC;AACD;;;;;GAKG;AACH,gCAbC,KAAA,EAAA,GAAA,EAAA,GAAA,GAAA,CAAA;IAcC,MAAM,CAbC,IAAA,CAAK,GAAC,CAAG,IAAC,CAAI,GAAC,CAAG,KAAC,EAAM,GAAA,CAAI,EAAE,GAAA,CAAI,CAAC;AAc7C,CAAC;AACD;;;GAGG;AACH,yBAhBC,KAAA;IAiBC,MAAM,CAhBC,OAAO,KAAA,KAAU,QAAA,CAAS;AAiBnC,CAAC;AACD;;;GAGG;AACH,yBAnBC,KAAA;IAoBC,MAAM,CAnBC,CAAA,KAAE,CAAK,SAAC,CAAS,KAAC,CAAK,CAAC,CAAC;AAoBlC,CAAC;AACD;;;GAGG;AACH,0BAtBC,KAAA;IAuBC,MAAM,CAtBC,KAAA,KAAU,SAAA,IAAa,KAAA,KAAU,IAAA,CAAK;AAuB/C,CAAC;AACD;;;GAGG;AACH,0BAzBC,KAAA;IA0BC,EAAE,CAAC,CAAC,QAzBC,CAAQ,KAAC,CAAK,CAAC,CAAC,CAAA;QA0BnB,MAAM,CAzBC,IAAA,KAAK,EAAK,CAAE,KAAC,CAAK,CAAC,CAAC,CAAC,CAAC;IA0B/B,CAAC;IAzBC,IAAA,CAAK,CAAA;QA0BL,MAAM,CAzBC,EAAA,CAAG;IA0BZ,CAAC;AACH,CAAC;AACD;;;GAGG;AACH,6BA5BC,IAAA;IA6BC,MAAM,CA5BC,IAAA,CAAK,OAAC,CAAO,0BAAC,EAA2B,MAAA,CAAO,CAAC;AA6B1D,CAAC","file":"util.js","sourceRoot":"","sourcesContent":["\n/**\n * @param {?} value\n * @return {number}\n */\nexport function toInteger(value: any): number {\n  return parseInt(`${value}`, 10);\n}\n/**\n * @param {?} value\n * @return {string}\n */\nexport function toString(value: any): string {\n  return (value !== undefined && value !== null) ? `${value}` : '';\n}\n/**\n * @param {number} value\n * @param {number} max\n * @param {number=} min\n * @return {number}\n */\nexport function getValueInRange(value: number, max: number, min = 0): number {\n  return Math.max(Math.min(value, max), min);\n}\n/**\n * @param {?} value\n * @return {boolean}\n */\nexport function isString(value: any): boolean {\n  return typeof value === 'string';\n}\n/**\n * @param {?} value\n * @return {boolean}\n */\nexport function isNumber(value: any): boolean {\n  return !isNaN(toInteger(value));\n}\n/**\n * @param {?} value\n * @return {boolean}\n */\nexport function isDefined(value: any): boolean {\n  return value !== undefined && value !== null;\n}\n/**\n * @param {number} value\n * @return {string}\n */\nexport function padNumber(value: number) {\n  if (isNumber(value)) {\n    return `0${value}`.slice(-2);\n  } else {\n    return '';\n  }\n}\n/**\n * @param {?} text\n * @return {?}\n */\nexport function regExpEscape(text) {\n  return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n}\n"]}