{"version":3,"sources":["../../../src/dropdown/dropdown.ts"],"names":[],"mappings":"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","file":"dropdown.js","sourceRoot":"","sourcesContent":["import {Directive, Input, Output, EventEmitter, ElementRef} from '@angular/core';\nconst Directive: NeverTypeCheckMe = Directive;  /* local alias for Closure JSDoc */\nconst Input: NeverTypeCheckMe = Input;  /* local alias for Closure JSDoc */\nconst Output: NeverTypeCheckMe = Output;  /* local alias for Closure JSDoc */\nconst EventEmitter: NeverTypeCheckMe = EventEmitter;  /* local alias for Closure JSDoc */\nconst ElementRef: NeverTypeCheckMe = ElementRef;  /* local alias for Closure JSDoc */\nimport {NgbDropdownConfig} from './dropdown-config';\nconst NgbDropdownConfig: NeverTypeCheckMe = NgbDropdownConfig;  /* local alias for Closure JSDoc */\n/**\n * Transforms a node into a dropdown.\n */\n@Directive({\n  selector: '[ngbDropdown]',\n  exportAs: 'ngbDropdown',\n  host: {\n    '[class.dropdown]': '!up',\n    '[class.dropup]': 'up',\n    '[class.show]': 'isOpen()',\n    '(keyup.esc)': 'closeFromOutsideEsc()',\n    '(document:click)': 'closeFromOutsideClick($event)'\n  }\n})\nexport class NgbDropdown {\nprivate _toggleElement: any;\n\n  /**\n   * Indicates that the dropdown should open upwards\n   */\n  @Input() up: boolean;\n\n  /**\n   * Indicates that dropdown should be closed when selecting one of dropdown items (click) or pressing ESC.\n   */\n  @Input() autoClose: boolean;\n\n  /**\n   *  Defines whether or not the dropdown-menu is open initially.\n   */\n  @Input('open') _open = false;\n\n  /**\n   *  An event fired when the dropdown is opened or closed.\n   *  Event's payload equals whether dropdown is open.\n   */\n  @Output() openChange = new EventEmitter();\n/**\n * @param {!NgbDropdownConfig} config\n */\nconstructor(config: NgbDropdownConfig) {\n    this.up = config.up;\n    this.autoClose = config.autoClose;\n  }\n/**\n * Checks if the dropdown menu is open or not.\n * @return {boolean}\n */\nisOpen(): boolean { return this._open; }\n/**\n * Opens the dropdown menu of a given navbar or tabbed navigation.\n * @return {void}\n */\nopen(): void {\n    if (!this._open) {\n      this._open = true;\n      this.openChange.emit(true);\n    }\n  }\n/**\n * Closes the dropdown menu of a given navbar or tabbed navigation.\n * @return {void}\n */\nclose(): void {\n    if (this._open) {\n      this._open = false;\n      this.openChange.emit(false);\n    }\n  }\n/**\n * Toggles the dropdown menu of a given navbar or tabbed navigation.\n * @return {void}\n */\ntoggle(): void {\n    if (this.isOpen()) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n/**\n * @param {?} $event\n * @return {void}\n */\ncloseFromOutsideClick($event) {\n    if (this.autoClose && $event.button !== 2 && !this._isEventFromToggle($event)) {\n      this.close();\n    }\n  }\n/**\n * @return {void}\n */\ncloseFromOutsideEsc() {\n    if (this.autoClose) {\n      this.close();\n    }\n  }\n/**\n * \\@internal\n * @param {?} toggleElement\n * @return {void}\n */\nset toggleElement(toggleElement: any) { this._toggleElement = toggleElement; }\n/**\n * @param {?} $event\n * @return {?}\n */\nprivate _isEventFromToggle($event) { return !!this._toggleElement && this._toggleElement.contains($event.target); }\n}\n\nfunction NgbDropdown_tsickle_Closure_declarations() {\n/** @type {?} */\nNgbDropdown.prototype._toggleElement;\n/**\n * Indicates that the dropdown should open upwards\n * @type {boolean}\n */\nNgbDropdown.prototype.up;\n/**\n * Indicates that dropdown should be closed when selecting one of dropdown items (click) or pressing ESC.\n * @type {boolean}\n */\nNgbDropdown.prototype.autoClose;\n/**\n *  Defines whether or not the dropdown-menu is open initially.\n * @type {boolean}\n */\nNgbDropdown.prototype._open;\n/**\n *  An event fired when the dropdown is opened or closed.\n *  Event's payload equals whether dropdown is open.\n * @type {!EventEmitter<?>}\n */\nNgbDropdown.prototype.openChange;\n}\n\n/**\n * Allows the dropdown to be toggled via click. This directive is optional.\n */\n@Directive({\n  selector: '[ngbDropdownToggle]',\n  host: {\n    'class': 'dropdown-toggle',\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'dropdown.isOpen()',\n    '(click)': 'toggleOpen()'\n  }\n})\nexport class NgbDropdownToggle {\n/**\n * @param {!NgbDropdown} dropdown\n * @param {!ElementRef} elementRef\n */\nconstructor(public dropdown: NgbDropdown, elementRef: ElementRef) {\n    dropdown.toggleElement = elementRef.nativeElement;\n  }\n/**\n * @return {void}\n */\ntoggleOpen() { this.dropdown.toggle(); }\n}\n\nfunction NgbDropdownToggle_tsickle_Closure_declarations() {\n/** @type {!NgbDropdown} */\nNgbDropdownToggle.prototype.dropdown;\n}\n\n"]}