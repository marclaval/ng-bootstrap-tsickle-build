{"version":3,"file":"popover.js","sourceRoot":"","sources":["../../../src/popover/popover.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  Directive,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n  Injector,\n  Renderer,\n  ComponentRef,\n  ElementRef,\n  TemplateRef,\n  ViewContainerRef,\n  ComponentFactoryResolver,\n  NgZone\n} from '@angular/core/index';\n\nimport {listenToTriggers} from '../util/triggers';\nimport {positionElements} from '../util/positioning';\nimport {PopupService} from '../util/popup';\nimport {NgbPopoverConfig} from './popover-config';\nexport class NgbPopoverWindow {\n   placement: 'top' | 'bottom' | 'left' | 'right' = 'top';\n   title: string;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'ngb-popover-window',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'[class]': '\"popover show popover-\" + placement', 'role': 'tooltip'},\n  template: `\n    <h3 class=\"popover-title\">{{title}}</h3><div class=\"popover-content\"><ng-content></ng-content></div>\n    `\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'placement': [{ type: Input },],\n'title': [{ type: Input },],\n};\n}\n\nfunction NgbPopoverWindow_tsickle_Closure_declarations() {\n/** @type {?} */\nNgbPopoverWindow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgbPopoverWindow.ctorParameters;\n/** @type {?} */\nNgbPopoverWindow.propDecorators;\n/** @type {?} */\nNgbPopoverWindow.prototype.placement;\n/** @type {?} */\nNgbPopoverWindow.prototype.title;\n}\n\n/**\n * A lightweight, extensible directive for fancy popover creation.\n */\nexport class NgbPopover implements OnInit, OnDestroy {\n  /**\n   * Content to be displayed as popover.\n   */\n   ngbPopover: string | TemplateRef<any>;\n  /**\n   * Title of a popover.\n   */\n   popoverTitle: string;\n  /**\n   * Placement of a popover. Accepts: \"top\", \"bottom\", \"left\", \"right\"\n   */\n   placement: 'top' | 'bottom' | 'left' | 'right';\n  /**\n   * Specifies events that should trigger. Supports a space separated list of event names.\n   */\n   triggers: string;\n  /**\n   * A selector specifying the element the popover should be appended to.\n   * Currently only supports \"body\".\n   */\n   container: string;\n  /**\n   * Emits an event when the popover is shown\n   */\n   shown = new EventEmitter();\n  /**\n   * Emits an event when the popover is hidden\n   */\n   hidden = new EventEmitter();\nprivate _popupService: PopupService<NgbPopoverWindow>;\nprivate _windowRef: ComponentRef<NgbPopoverWindow>;\nprivate _unregisterListenersFn;\nprivate _zoneSubscription: any;\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} injector\n * @param {?} componentFactoryResolver\n * @param {?} viewContainerRef\n * @param {?} config\n * @param {?} ngZone\n */\nconstructor(\nprivate _elementRef: ElementRef,\nprivate _renderer: Renderer, injector: Injector,\n      componentFactoryResolver: ComponentFactoryResolver, viewContainerRef: ViewContainerRef, config: NgbPopoverConfig,\n      ngZone: NgZone) {\n    this.placement = config.placement;\n    this.triggers = config.triggers;\n    this.container = config.container;\n    this._popupService = new PopupService<NgbPopoverWindow>(\n        NgbPopoverWindow, injector, viewContainerRef, _renderer, componentFactoryResolver);\n\n    this._zoneSubscription = ngZone.onStable.subscribe(() => {\n      if (this._windowRef) {\n        positionElements(\n            this._elementRef.nativeElement, this._windowRef.location.nativeElement, this.placement,\n            this.container === 'body');\n      }\n    });\n  }\n/**\n * Opens an element’s popover. This is considered a “manual” triggering of the popover.\n * The context is an optional value to be injected into the popover template when it is created.\n * @param {?=} context\n * @return {?}\n */\nopen(context?: any) {\n    if (!this._windowRef) {\n      this._windowRef = this._popupService.open(this.ngbPopover, context);\n      this._windowRef.instance.placement = this.placement;\n      this._windowRef.instance.title = this.popoverTitle;\n\n      if (this.container === 'body') {\n        window.document.querySelector(this.container).appendChild(this._windowRef.location.nativeElement);\n      }\n\n      // we need to manually invoke change detection since events registered via\n      // Renderer::listen() are not picked up by change detection with the OnPush strategy\n      this._windowRef.changeDetectorRef.markForCheck();\n      this.shown.emit();\n    }\n  }\n/**\n * Closes an element’s popover. This is considered a “manual” triggering of the popover.\n * @return {?}\n */\nclose(): void {\n    if (this._windowRef) {\n      this._popupService.close();\n      this._windowRef = null;\n      this.hidden.emit();\n    }\n  }\n/**\n * Toggles an element’s popover. This is considered a “manual” triggering of the popover.\n * @return {?}\n */\ntoggle(): void {\n    if (this._windowRef) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n/**\n * Returns whether or not the popover is currently being shown\n * @return {?}\n */\nisOpen(): boolean { return this._windowRef != null; }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._unregisterListenersFn = listenToTriggers(\n        this._renderer, this._elementRef.nativeElement, this.triggers, this.open.bind(this), this.close.bind(this),\n        this.toggle.bind(this));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.close();\n    this._unregisterListenersFn();\n    this._zoneSubscription.unsubscribe();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngbPopover]', exportAs: 'ngbPopover'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer, },\n{type: Injector, },\n{type: ComponentFactoryResolver, },\n{type: ViewContainerRef, },\n{type: NgbPopoverConfig, },\n{type: NgZone, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ngbPopover': [{ type: Input },],\n'popoverTitle': [{ type: Input },],\n'placement': [{ type: Input },],\n'triggers': [{ type: Input },],\n'container': [{ type: Input },],\n'shown': [{ type: Output },],\n'hidden': [{ type: Output },],\n};\n}\n\nfunction NgbPopover_tsickle_Closure_declarations() {\n/** @type {?} */\nNgbPopover.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgbPopover.ctorParameters;\n/** @type {?} */\nNgbPopover.propDecorators;\n/**\n * Content to be displayed as popover.\n * @type {?}\n */\nNgbPopover.prototype.ngbPopover;\n/**\n * Title of a popover.\n * @type {?}\n */\nNgbPopover.prototype.popoverTitle;\n/**\n * Placement of a popover. Accepts: \"top\", \"bottom\", \"left\", \"right\"\n * @type {?}\n */\nNgbPopover.prototype.placement;\n/**\n * Specifies events that should trigger. Supports a space separated list of event names.\n * @type {?}\n */\nNgbPopover.prototype.triggers;\n/**\n * A selector specifying the element the popover should be appended to.\n * Currently only supports \"body\".\n * @type {?}\n */\nNgbPopover.prototype.container;\n/**\n * Emits an event when the popover is shown\n * @type {?}\n */\nNgbPopover.prototype.shown;\n/**\n * Emits an event when the popover is hidden\n * @type {?}\n */\nNgbPopover.prototype.hidden;\n/** @type {?} */\nNgbPopover.prototype._popupService;\n/** @type {?} */\nNgbPopover.prototype._windowRef;\n/** @type {?} */\nNgbPopover.prototype._unregisterListenersFn;\n/** @type {?} */\nNgbPopover.prototype._zoneSubscription;\n/** @type {?} */\nNgbPopover.prototype._elementRef;\n/** @type {?} */\nNgbPopover.prototype._renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
