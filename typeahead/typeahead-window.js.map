{"version":3,"file":"typeahead-window.js","sourceRoot":"","sources":["../../../src/typeahead/typeahead-window.ts"],"names":[],"mappings":"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","sourcesContent":["import {Component, Input, Output, EventEmitter, TemplateRef, OnInit} from '@angular/core/index';\n\nimport {toString} from '../util/util';\n\n/**\n * Context for the typeahead result template in case you want to override the default one\n */\nexport interface ResultTemplateContext {\n  /**\n   * Your typeahead result data model\n   */\n  result: any;\n\n  /**\n   * Search term from the input used to get current result\n   */\n  term: string;\n}\nexport class NgbTypeaheadWindow implements OnInit {\n  activeIdx = 0;\n\n  /**\n   * Flag indicating if the first row should be active initially\n   */\n   focusFirst = true;\n\n  /**\n   * Typeahead match results to be displayed\n   */\n   results;\n\n  /**\n   * Search term used to get current results\n   */\n   term: string;\n\n  /**\n   * A function used to format a given result before display. This function should return a formatted string without any\n   * HTML markup\n   */\n   formatter = toString;\n\n  /**\n   * A template to override a matching result default display\n   */\n   resultTemplate: TemplateRef<ResultTemplateContext>;\n\n  /**\n   * Event raised when user selects a particular result row\n   */\n   selectEvent = new EventEmitter();\n/**\n * @return {?}\n */\ngetActive() { return this.results[this.activeIdx]; }\n/**\n * @param {?} activeIdx\n * @return {?}\n */\nmarkActive(activeIdx: number) { this.activeIdx = activeIdx; }\n/**\n * @return {?}\n */\nnext() {\n    if (this.activeIdx === this.results.length - 1) {\n      this.activeIdx = this.focusFirst ? (this.activeIdx + 1) % this.results.length : -1;\n    } else {\n      this.activeIdx++;\n    }\n  }\n/**\n * @return {?}\n */\nprev() {\n    if (this.activeIdx < 0) {\n      this.activeIdx = this.results.length - 1;\n    } else if (this.activeIdx === 0) {\n      this.activeIdx = this.focusFirst ? this.results.length - 1 : -1;\n    } else {\n      this.activeIdx--;\n    }\n  }\n/**\n * @param {?} item\n * @return {?}\n */\nselect(item) { this.selectEvent.emit(item); }\n/**\n * @return {?}\n */\nngOnInit() { this.activeIdx = this.focusFirst ? 0 : -1; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'ngb-typeahead-window',\n  exportAs: 'ngbTypeaheadWindow',\n  host: {'class': 'dropdown-menu', 'style': 'display: block'},\n  template: `\n    <template #rt let-result=\"result\" let-term=\"term\" let-formatter=\"formatter\">\n      <ngb-highlight [result]=\"formatter(result)\" [term]=\"term\"></ngb-highlight>\n    </template>\n    <template ngFor [ngForOf]=\"results\" let-result let-idx=\"index\">\n      <button type=\"button\" class=\"dropdown-item\" [class.active]=\"idx === activeIdx\" \n        (mouseenter)=\"markActive(idx)\" \n        (click)=\"select(result)\">\n          <template [ngTemplateOutlet]=\"resultTemplate || rt\" \n          [ngOutletContext]=\"{result: result, term: term, formatter: formatter}\"></template>\n      </button>\n    </template>\n  `\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'focusFirst': [{ type: Input },],\n'results': [{ type: Input },],\n'term': [{ type: Input },],\n'formatter': [{ type: Input },],\n'resultTemplate': [{ type: Input },],\n'selectEvent': [{ type: Output, args: ['select', ] },],\n};\n}\n\nfunction NgbTypeaheadWindow_tsickle_Closure_declarations() {\n/** @type {?} */\nNgbTypeaheadWindow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgbTypeaheadWindow.ctorParameters;\n/** @type {?} */\nNgbTypeaheadWindow.propDecorators;\n/** @type {?} */\nNgbTypeaheadWindow.prototype.activeIdx;\n/**\n * Flag indicating if the first row should be active initially\n * @type {?}\n */\nNgbTypeaheadWindow.prototype.focusFirst;\n/**\n * Typeahead match results to be displayed\n * @type {?}\n */\nNgbTypeaheadWindow.prototype.results;\n/**\n * Search term used to get current results\n * @type {?}\n */\nNgbTypeaheadWindow.prototype.term;\n/**\n * A function used to format a given result before display. This function should return a formatted string without any\n * HTML markup\n * @type {?}\n */\nNgbTypeaheadWindow.prototype.formatter;\n/**\n * A template to override a matching result default display\n * @type {?}\n */\nNgbTypeaheadWindow.prototype.resultTemplate;\n/**\n * Event raised when user selects a particular result row\n * @type {?}\n */\nNgbTypeaheadWindow.prototype.selectEvent;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}