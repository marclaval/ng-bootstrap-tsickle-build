{"version":3,"file":"modal-ref.js","sourceRoot":"","sources":["../../../src/modal/modal-ref.ts"],"names":[],"mappings":"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","sourcesContent":["import {Injectable, ComponentRef, ViewRef, ViewContainerRef} from '@angular/core/index';\n\nimport {NgbModalBackdrop} from './modal-backdrop';\nimport {NgbModalWindow} from './modal-window';\n\nimport {ContentRef} from '../util/popup';\n/**\n * A reference to an active (currently opened) modal. Instances of this class\n * can be injected into components passed as modal content.\n */\nexport class NgbActiveModal {\n/**\n * Can be used to close a modal, passing an optional result.\n * @param {?=} result\n * @return {?}\n */\nclose(result?: any): void {}\n/**\n * Can be used to dismiss a modal, passing an optional reason.\n * @param {?=} reason\n * @return {?}\n */\ndismiss(reason?: any): void {}\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NgbActiveModal_tsickle_Closure_declarations() {\n/** @type {?} */\nNgbActiveModal.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgbActiveModal.ctorParameters;\n}\n\n/**\n * A reference to a newly opened modal.\n */\nexport class NgbModalRef {\nprivate _resolve: (result?: any) => void;\nprivate _reject: (reason?: any) => void;\n/**\n * The instance of component used as modal's content.\n * Undefined when a TemplateRef is used as modal's content.\n * @return {?}\n */\nget componentInstance(): any {\n    if (this._contentRef.componentRef) {\n      return this._contentRef.componentRef.instance;\n    }\n  }\n/**\n * @param {?} instance\n * @return {?}\n */\nset componentInstance(instance: any) {}\n\n  /**\n   * A promise that is resolved when a modal is closed and rejected when a modal is dismissed.\n   */\n  result: Promise<any>;\n/**\n * @param {?} _viewContainerRef\n * @param {?} _windowCmptRef\n * @param {?} _contentRef\n * @param {?=} _backdropCmptRef\n */\nconstructor(\nprivate _viewContainerRef: ViewContainerRef,\nprivate _windowCmptRef: ComponentRef<NgbModalWindow>,\nprivate _contentRef: ContentRef,\nprivate _backdropCmptRef?: ComponentRef<NgbModalBackdrop>) {\n    _windowCmptRef.instance.dismissEvent.subscribe((reason: any) => { this.dismiss(reason); });\n\n    this.result = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n    this.result.then(null, () => {});\n  }\n/**\n * Can be used to close a modal, passing an optional result.\n * @param {?=} result\n * @return {?}\n */\nclose(result?: any): void {\n    if (this._windowCmptRef) {\n      this._resolve(result);\n      this._removeModalElements();\n    }\n  }\n/**\n * Can be used to dismiss a modal, passing an optional reason.\n * @param {?=} reason\n * @return {?}\n */\ndismiss(reason?: any): void {\n    if (this._windowCmptRef) {\n      this._reject(reason);\n      this._removeModalElements();\n    }\n  }\n/**\n * @return {?}\n */\nprivate _removeModalElements() {\n    this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._windowCmptRef.hostView));\n    if (this._backdropCmptRef) {\n      this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._backdropCmptRef.hostView));\n    }\n    if (this._contentRef && this._contentRef.viewRef) {\n      this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._contentRef.viewRef));\n    }\n\n    this._windowCmptRef = null;\n    this._backdropCmptRef = null;\n    this._contentRef = null;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n{type: ComponentRef, },\n{type: ContentRef, },\n{type: ComponentRef, },\n];\n}\n\nfunction NgbModalRef_tsickle_Closure_declarations() {\n/** @type {?} */\nNgbModalRef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgbModalRef.ctorParameters;\n/** @type {?} */\nNgbModalRef.prototype._resolve;\n/** @type {?} */\nNgbModalRef.prototype._reject;\n/**\n * A promise that is resolved when a modal is closed and rejected when a modal is dismissed.\n * @type {?}\n */\nNgbModalRef.prototype.result;\n/** @type {?} */\nNgbModalRef.prototype._viewContainerRef;\n/** @type {?} */\nNgbModalRef.prototype._windowCmptRef;\n/** @type {?} */\nNgbModalRef.prototype._contentRef;\n/** @type {?} */\nNgbModalRef.prototype._backdropCmptRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
