{"version":3,"sources":["../../../src/pagination/pagination.ts"],"names":[],"mappings":"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","file":"pagination.js","sourceRoot":"","sourcesContent":["import {Component, EventEmitter, Input, Output, OnChanges, ChangeDetectionStrategy, SimpleChanges} from '@angular/core';\nconst Component: NeverTypeCheckMe = Component;  /* local alias for Closure JSDoc */\nconst EventEmitter: NeverTypeCheckMe = EventEmitter;  /* local alias for Closure JSDoc */\nconst Input: NeverTypeCheckMe = Input;  /* local alias for Closure JSDoc */\nconst Output: NeverTypeCheckMe = Output;  /* local alias for Closure JSDoc */\nconst OnChanges: NeverTypeCheckMe = OnChanges;  /* local alias for Closure JSDoc */\nconst ChangeDetectionStrategy: NeverTypeCheckMe = ChangeDetectionStrategy;  /* local alias for Closure JSDoc */\nconst SimpleChanges: NeverTypeCheckMe = SimpleChanges;  /* local alias for Closure JSDoc */\nimport {getValueInRange, isNumber} from '../util/util';\nconst getValueInRange: NeverTypeCheckMe = getValueInRange;  /* local alias for Closure JSDoc */\nconst isNumber: NeverTypeCheckMe = isNumber;  /* local alias for Closure JSDoc */\nimport {NgbPaginationConfig} from './pagination-config';\nconst NgbPaginationConfig: NeverTypeCheckMe = NgbPaginationConfig;  /* local alias for Closure JSDoc */\n/**\n * A directive that will take care of visualising a pagination bar and enable / disable buttons correctly!\n */\n@Component({\n  selector: 'ngb-pagination',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <nav>\n      <ul [class]=\"'pagination' + (size ? ' pagination-' + size : '')\">\n        <li *ngIf=\"boundaryLinks\" class=\"page-item\" \n          [class.disabled]=\"!hasPrevious() || disabled\">\n          <a aria-label=\"First\" class=\"page-link\" href (click)=\"!!selectPage(1)\" [attr.tabindex]=\"hasPrevious() ? null : '-1'\">\n            <span aria-hidden=\"true\">&laquo;&laquo;</span>\n            <span class=\"sr-only\">First</span>\n          </a>                \n        </li>\n      \n        <li *ngIf=\"directionLinks\" class=\"page-item\" \n          [class.disabled]=\"!hasPrevious() || disabled\">\n          <a aria-label=\"Previous\" class=\"page-link\" href (click)=\"!!selectPage(page-1)\" [attr.tabindex]=\"hasPrevious() ? null : '-1'\">\n            <span aria-hidden=\"true\">&laquo;</span>\n            <span class=\"sr-only\">Previous</span>\n          </a>\n        </li>\n        <li *ngFor=\"let pageNumber of pages\" class=\"page-item\" [class.active]=\"pageNumber === page\" \n          [class.disabled]=\"isEllipsis(pageNumber) || disabled\">\n          <a *ngIf=\"isEllipsis(pageNumber)\" class=\"page-link\">...</a>\n          <a *ngIf=\"!isEllipsis(pageNumber)\" class=\"page-link\" href (click)=\"!!selectPage(pageNumber)\">{{pageNumber}}</a>\n        </li>\n        <li *ngIf=\"directionLinks\" class=\"page-item\" [class.disabled]=\"!hasNext() || disabled\">\n          <a aria-label=\"Next\" class=\"page-link\" href (click)=\"!!selectPage(page+1)\" [attr.tabindex]=\"hasNext() ? null : '-1'\">\n            <span aria-hidden=\"true\">&raquo;</span>\n            <span class=\"sr-only\">Next</span>\n          </a>\n        </li>\n        \n        <li *ngIf=\"boundaryLinks\" class=\"page-item\" [class.disabled]=\"!hasNext() || disabled\">\n          <a aria-label=\"Last\" class=\"page-link\" href (click)=\"!!selectPage(pageCount)\" [attr.tabindex]=\"hasNext() ? null : '-1'\">\n            <span aria-hidden=\"true\">&raquo;&raquo;</span>\n            <span class=\"sr-only\">Last</span>\n          </a>                \n        </li>        \n      </ul>\n    </nav>\n  `\n})\nexport class NgbPagination implements OnChanges {\n  pageCount = 0;\n  pages: number[] = [];\n\n  /**\n   * Whether to disable buttons from user input\n   */\n  @Input() disabled: boolean;\n\n  /**\n   *  Whether to show the \"First\" and \"Last\" page links\n   */\n  @Input() boundaryLinks: boolean;\n\n  /**\n   *  Whether to show the \"Next\" and \"Previous\" page links\n   */\n  @Input() directionLinks: boolean;\n\n  /**\n   *  Whether to show ellipsis symbols and first/last page numbers when maxSize > number of pages\n   */\n  @Input() ellipses: boolean;\n\n  /**\n   *  Whether to rotate pages when maxSize > number of pages.\n   *  Current page will be in the middle\n   */\n  @Input() rotate: boolean;\n\n  /**\n   *  Number of items in collection.\n   */\n  @Input() collectionSize: number;\n\n  /**\n   *  Maximum number of pages to display.\n   */\n  @Input() maxSize: number;\n\n  /**\n   *  Current page.\n   */\n  @Input() page = 0;\n\n  /**\n   *  Number of items per page.\n   */\n  @Input() pageSize: number;\n\n  /**\n   *  An event fired when the page is changed.\n   *  Event's payload equals to the newly selected page.\n   */\n  @Output() pageChange = new EventEmitter<number>(true);\n\n  /**\n   * Pagination display size: small or large\n   */\n  @Input() size: 'sm' | 'lg';\n/**\n * @param {!NgbPaginationConfig} config\n */\nconstructor(config: NgbPaginationConfig) {\n    this.disabled = config.disabled;\n    this.boundaryLinks = config.boundaryLinks;\n    this.directionLinks = config.directionLinks;\n    this.ellipses = config.ellipses;\n    this.maxSize = config.maxSize;\n    this.pageSize = config.pageSize;\n    this.rotate = config.rotate;\n    this.size = config.size;\n  }\n/**\n * @return {boolean}\n */\nhasPrevious(): boolean { return this.page > 1; }\n/**\n * @return {boolean}\n */\nhasNext(): boolean { return this.page < this.pageCount; }\n/**\n * @param {number} pageNumber\n * @return {void}\n */\nselectPage(pageNumber: number): void { this._updatePages(pageNumber); }\n/**\n * @param {!SimpleChanges} changes\n * @return {void}\n */\nngOnChanges(changes: SimpleChanges): void { this._updatePages(this.page); }\n/**\n * \\@internal\n * @param {?} pageNumber\n * @return {boolean}\n */\nisEllipsis(pageNumber): boolean { return pageNumber === -1; }\n/**\n * Appends ellipses and first/last page number to the displayed pages\n * @param {number} start\n * @param {number} end\n * @return {void}\n */\nprivate _applyEllipses(start: number, end: number) {\n    if (this.ellipses) {\n      if (start > 0) {\n        if (start > 1) {\n          this.pages.unshift(-1);\n        }\n        this.pages.unshift(1);\n      }\n      if (end < this.pageCount) {\n        if (end < (this.pageCount - 1)) {\n          this.pages.push(-1);\n        }\n        this.pages.push(this.pageCount);\n      }\n    }\n  }\n/**\n * Rotates page numbers based on maxSize items visible.\n * Currently selected page stays in the middle:\n * \n * Ex. for selected page = 6:\n * [5,*6*,7] for maxSize = 3\n * [4,5,*6*,7] for maxSize = 4\n * @return {!Array<number, number>}\n */\nprivate _applyRotation(): [number, number] {\n    let /** @type {number} */ start = 0;\n    let /** @type {number} */ end = this.pageCount;\n    let /** @type {number} */ leftOffset = Math.floor(this.maxSize / 2);\n    let /** @type {number} */ rightOffset = this.maxSize % 2 === 0 ? leftOffset - 1 : leftOffset;\n\n    if (this.page <= leftOffset) {\n      // very beginning, no rotation -> [0..maxSize]\n      end = this.maxSize;\n    } else if (this.pageCount - this.page < leftOffset) {\n      // very end, no rotation -> [len-maxSize..len]\n      start = this.pageCount - this.maxSize;\n    } else {\n      // rotate\n      start = this.page - leftOffset - 1;\n      end = this.page + rightOffset;\n    }\n\n    return [start, end];\n  }\n/**\n * Paginates page numbers based on maxSize items per page\n * @return {!Array<number, number>}\n */\nprivate _applyPagination(): [number, number] {\n    let /** @type {number} */ page = Math.ceil(this.page / this.maxSize) - 1;\n    let /** @type {number} */ start = page * this.maxSize;\n    let /** @type {number} */ end = start + this.maxSize;\n\n    return [start, end];\n  }\n/**\n * @param {?} newPageNo\n * @return {void}\n */\nprivate _setPageInRange(newPageNo) {\n    const /** @type {number} */ prevPageNo = this.page;\n    this.page = getValueInRange(newPageNo, this.pageCount, 1);\n\n    if (this.page !== prevPageNo) {\n      this.pageChange.emit(this.page);\n    }\n  }\n/**\n * @param {number} newPage\n * @return {void}\n */\nprivate _updatePages(newPage: number) {\n    this.pageCount = Math.ceil(this.collectionSize / this.pageSize);\n\n    if (!isNumber(this.pageCount)) {\n      this.pageCount = 0;\n    }\n\n    // fill-in model needed to render pages\n    this.pages.length = 0;\n    for (let /** @type {number} */ i = 1; i <= this.pageCount; i++) {\n      this.pages.push(i);\n    }\n\n    // set page within 1..max range\n    this._setPageInRange(newPage);\n\n    // apply maxSize if necessary\n    if (this.maxSize > 0 && this.pageCount > this.maxSize) {\n      let /** @type {number} */ start = 0;\n      let /** @type {number} */ end = this.pageCount;\n\n      // either paginating or rotating page numbers\n      if (this.rotate) {\n        [start, end] = this._applyRotation();\n      } else {\n        [start, end] = this._applyPagination();\n      }\n\n      this.pages = this.pages.slice(start, end);\n\n      // adding ellipses\n      this._applyEllipses(start, end);\n    }\n  }\n}\n\nfunction NgbPagination_tsickle_Closure_declarations() {\n/** @type {number} */\nNgbPagination.prototype.pageCount;\n/** @type {!Array<number>} */\nNgbPagination.prototype.pages;\n/**\n * Whether to disable buttons from user input\n * @type {boolean}\n */\nNgbPagination.prototype.disabled;\n/**\n *  Whether to show the \"First\" and \"Last\" page links\n * @type {boolean}\n */\nNgbPagination.prototype.boundaryLinks;\n/**\n *  Whether to show the \"Next\" and \"Previous\" page links\n * @type {boolean}\n */\nNgbPagination.prototype.directionLinks;\n/**\n *  Whether to show ellipsis symbols and first/last page numbers when maxSize > number of pages\n * @type {boolean}\n */\nNgbPagination.prototype.ellipses;\n/**\n *  Whether to rotate pages when maxSize > number of pages.\n *  Current page will be in the middle\n * @type {boolean}\n */\nNgbPagination.prototype.rotate;\n/**\n *  Number of items in collection.\n * @type {number}\n */\nNgbPagination.prototype.collectionSize;\n/**\n *  Maximum number of pages to display.\n * @type {number}\n */\nNgbPagination.prototype.maxSize;\n/**\n *  Current page.\n * @type {number}\n */\nNgbPagination.prototype.page;\n/**\n *  Number of items per page.\n * @type {number}\n */\nNgbPagination.prototype.pageSize;\n/**\n *  An event fired when the page is changed.\n *  Event's payload equals to the newly selected page.\n * @type {!EventEmitter<number>}\n */\nNgbPagination.prototype.pageChange;\n/**\n * Pagination display size: small or large\n * @type {string}\n */\nNgbPagination.prototype.size;\n}\n\n"]}