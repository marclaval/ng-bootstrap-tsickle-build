{"version":3,"sources":["../../../src/progressbar/progressbar.ts"],"names":[],"mappings":";;;;;;;;;OAAO,EAAA,SAAE,EAAU,KAAA,EAAO,uBAAA,EAAwB,MAAA,eAAA;AAClD,MAAM,SAAS,GAAqB,SAAS,CAAC,CAAE,mCAAmC;AACnF,MAAM,KAAK,GAAqB,KAAK,CAAC,CAAE,mCAAmC;AAC3E,MAAM,uBAAuB,GAAqB,uBAAuB,CAAC,CAAE,mCAAmC;OAFxG,EAAA,eAAE,EAAe,MAAA,cAAA;AAIxB,MAAM,eAAe,GAAqB,eAAe,CAAC,CAAE,mCAAmC;OAHxF,EAAA,oBAAE,EAAoB,MAAA,sBAAA;AAK7B,MAAM,oBAAoB,GAAqB,oBAAoB,CAAC,CAAE,mCAAmC;AACzG;;GAEG;AAcH;IA+BA;;OAEG;IACH,YANG,MAAmB;QADpB;;WAEG;QAHM,UAAA,GAAQ,CAAA,CAAE;QASjB,IAAI,CAAC,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC;QACtB,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;QAChC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC9B,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;QACxB,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC;IACpC,CAAC;IACH;;OAEG;IACH,QARG,KAAY,MAAA,CAAO,eAAA,CAAgB,IAAC,CAAI,KAAC,EAAM,IAAA,CAAK,GAAC,CAAG,CAAC,CAAC,CAAA;IAS7D;;OAEG;IACH,eAVG,KAAmB,MAAA,CAAO,GAAA,GAAM,IAAA,CAAK,QAAC,EAAQ,GAAI,IAAA,CAAK,GAAC,CAAG,CAAC,CAAA;AAW/D,CAAC;AA7CC;IAAC,KAJC,EAAK;;2CAAA;AAUP;IAAC,KAJC,EAAK;;gDAAA;AASP;IAAC,KAJC,EAAK;;+CAAA;AASP;IAAC,KAJC,EAAK;;iDAAA;AASP;IAAC,KAJC,EAAK;;4CAAA;AASP;IAAC,KAJC,EAAK;;6CAAA;AAvCT;IAJsE,mCAAmC,CAAxG,SAAA,CAAA;QAKC,QAAQ,EAAE,iBAAiB;QAC3B,eAAe,EAAE,uBAAuB,CAAC,MAAM;QAC/C,QAAQ,EAAE;;;;;;;;GAQT;KACF,CAAC;;kBAAA;AAoDF;IACA;;;OAGG;IACH,cAAc,CAAC,SAAS,CAAC,GAAG,CAAC;IAC7B;;;;OAIG;IACH,cAAc,CAAC,SAAS,CAAC,QAAQ,CAAC;IAClC;;;OAGG;IACH,cAAc,CAAC,SAAS,CAAC,OAAO,CAAC;IACjC;;;OAGG;IACH,cAAc,CAAC,SAAS,CAAC,SAAS,CAAC;IACnC;;;OAGG;IACH,cAAc,CAAC,SAAS,CAAC,IAAI,CAAC;IAC9B;;;OAGG;IACH,cAAc,CAAC,SAAS,CAAC,KAAK,CAAC;AAC/B,CAAC","file":"progressbar.js","sourceRoot":"","sourcesContent":["import {Component, Input, ChangeDetectionStrategy} from '@angular/core';\nconst Component: NeverTypeCheckMe = Component;  /* local alias for Closure JSDoc */\nconst Input: NeverTypeCheckMe = Input;  /* local alias for Closure JSDoc */\nconst ChangeDetectionStrategy: NeverTypeCheckMe = ChangeDetectionStrategy;  /* local alias for Closure JSDoc */\nimport {getValueInRange} from '../util/util';\nconst getValueInRange: NeverTypeCheckMe = getValueInRange;  /* local alias for Closure JSDoc */\nimport {NgbProgressbarConfig} from './progressbar-config';\nconst NgbProgressbarConfig: NeverTypeCheckMe = NgbProgressbarConfig;  /* local alias for Closure JSDoc */\n/**\n * Directive that can be used to provide feedback on the progress of a workflow or an action.\n */\n@Component({\n  selector: 'ngb-progressbar',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <div class=\"progress\">\n      <div class=\"progress-bar{{type ? ' bg-' + type : ''}}{{animated ? ' progress-bar-animated' : ''}}{{striped ?\n    ' progress-bar-striped' : ''}}\" role=\"progressbar\" [style.width.%]=\"getPercentValue()\"\n    [attr.aria-valuenow]=\"getValue()\" aria-valuemin=\"0\" [attr.aria-valuemax]=\"max\">\n        <span *ngIf=\"showValue\">{{getPercentValue()}}%</span><ng-content></ng-content>\n      </div>\n    </div>\n  `\n})\nexport class NgbProgressbar {\n  /**\n   * Maximal value to be displayed in the progressbar.\n   */\n  @Input() max: number;\n\n  /**\n   * A flag indicating if the stripes of the progress bar should be animated. Takes effect only for browsers\n   * supporting CSS3 animations, and if striped is true.\n   */\n  @Input() animated: boolean;\n\n  /**\n   * A flag indicating if a progress bar should be displayed as striped.\n   */\n  @Input() striped: boolean;\n\n  /**\n   * A flag indicating if the current percentage value should be shown.\n   */\n  @Input() showValue: boolean;\n\n  /**\n   * Type of progress bar, can be one of \"success\", \"info\", \"warning\" or \"danger\".\n   */\n  @Input() type: string;\n\n  /**\n   * Current value to be displayed in the progressbar. Should be smaller or equal to \"max\" value.\n   */\n  @Input() value = 0;\n/**\n * @param {!NgbProgressbarConfig} config\n */\nconstructor(config: NgbProgressbarConfig) {\n    this.max = config.max;\n    this.animated = config.animated;\n    this.striped = config.striped;\n    this.type = config.type;\n    this.showValue = config.showValue;\n  }\n/**\n * @return {number}\n */\ngetValue() { return getValueInRange(this.value, this.max); }\n/**\n * @return {number}\n */\ngetPercentValue() { return 100 * this.getValue() / this.max; }\n}\n\nfunction NgbProgressbar_tsickle_Closure_declarations() {\n/**\n * Maximal value to be displayed in the progressbar.\n * @type {number}\n */\nNgbProgressbar.prototype.max;\n/**\n * A flag indicating if the stripes of the progress bar should be animated. Takes effect only for browsers\n * supporting CSS3 animations, and if striped is true.\n * @type {boolean}\n */\nNgbProgressbar.prototype.animated;\n/**\n * A flag indicating if a progress bar should be displayed as striped.\n * @type {boolean}\n */\nNgbProgressbar.prototype.striped;\n/**\n * A flag indicating if the current percentage value should be shown.\n * @type {boolean}\n */\nNgbProgressbar.prototype.showValue;\n/**\n * Type of progress bar, can be one of \"success\", \"info\", \"warning\" or \"danger\".\n * @type {string}\n */\nNgbProgressbar.prototype.type;\n/**\n * Current value to be displayed in the progressbar. Should be smaller or equal to \"max\" value.\n * @type {number}\n */\nNgbProgressbar.prototype.value;\n}\n\n"]}