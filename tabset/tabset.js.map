{"version":3,"sources":["../../../src/tabset/tabset.ts"],"names":[],"mappings":"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","file":"tabset.js","sourceRoot":"","sourcesContent":["import {\n  Component,\n  Input,\n  ContentChildren,\n  QueryList,\n  Directive,\n  TemplateRef,\n  ContentChild,\n  AfterContentChecked,\n  Output,\n  EventEmitter\n} from '@angular/core';\nconst Component: NeverTypeCheckMe = Component;  /* local alias for Closure JSDoc */\nconst Input: NeverTypeCheckMe = Input;  /* local alias for Closure JSDoc */\nconst ContentChildren: NeverTypeCheckMe = ContentChildren;  /* local alias for Closure JSDoc */\nconst QueryList: NeverTypeCheckMe = QueryList;  /* local alias for Closure JSDoc */\nconst Directive: NeverTypeCheckMe = Directive;  /* local alias for Closure JSDoc */\nconst TemplateRef: NeverTypeCheckMe = TemplateRef;  /* local alias for Closure JSDoc */\nconst ContentChild: NeverTypeCheckMe = ContentChild;  /* local alias for Closure JSDoc */\nconst AfterContentChecked: NeverTypeCheckMe = AfterContentChecked;  /* local alias for Closure JSDoc */\nconst Output: NeverTypeCheckMe = Output;  /* local alias for Closure JSDoc */\nconst EventEmitter: NeverTypeCheckMe = EventEmitter;  /* local alias for Closure JSDoc */\nimport {NgbTabsetConfig} from './tabset-config';\nconst NgbTabsetConfig: NeverTypeCheckMe = NgbTabsetConfig;  /* local alias for Closure JSDoc */\n\nlet /** @type {number} */ nextId = 0;\n/**\n * This directive should be used to wrap tab titles that need to contain HTML markup or other directives.\n */\n@Directive({selector: 'template[ngbTabTitle]'})\nexport class NgbTabTitle {\n/**\n * @param {!TemplateRef<?>} templateRef\n */\nconstructor(public templateRef: TemplateRef<any>) {}\n}\n\nfunction NgbTabTitle_tsickle_Closure_declarations() {\n/** @type {!TemplateRef<?>} */\nNgbTabTitle.prototype.templateRef;\n}\n\n/**\n * This directive must be used to wrap content to be displayed in a tab.\n */\n@Directive({selector: 'template[ngbTabContent]'})\nexport class NgbTabContent {\n/**\n * @param {!TemplateRef<?>} templateRef\n */\nconstructor(public templateRef: TemplateRef<any>) {}\n}\n\nfunction NgbTabContent_tsickle_Closure_declarations() {\n/** @type {!TemplateRef<?>} */\nNgbTabContent.prototype.templateRef;\n}\n\n/**\n * A directive representing an individual tab.\n */\n@Directive({selector: 'ngb-tab'})\nexport class NgbTab {\n  /**\n   * Unique tab identifier. Must be unique for the entire document for proper accessibility support.\n   */\n  @Input() id: string = `ngb-tab-${nextId++}`;\n  /**\n   * Simple (string only) title. Use the \"NgbTabTitle\" directive for more complex use-cases.\n   */\n  @Input() title: string;\n  /**\n   * Allows toggling disabled state of a given state. Disabled tabs can't be selected.\n   */\n  @Input() disabled = false;\n\n  @ContentChild(NgbTabContent) contentTpl: NgbTabContent;\n  @ContentChild(NgbTabTitle) titleTpl: NgbTabTitle;\n}\n\nfunction NgbTab_tsickle_Closure_declarations() {\n/**\n * Unique tab identifier. Must be unique for the entire document for proper accessibility support.\n * @type {string}\n */\nNgbTab.prototype.id;\n/**\n * Simple (string only) title. Use the \"NgbTabTitle\" directive for more complex use-cases.\n * @type {string}\n */\nNgbTab.prototype.title;\n/**\n * Allows toggling disabled state of a given state. Disabled tabs can't be selected.\n * @type {boolean}\n */\nNgbTab.prototype.disabled;\n/** @type {!NgbTabContent} */\nNgbTab.prototype.contentTpl;\n/** @type {!NgbTabTitle} */\nNgbTab.prototype.titleTpl;\n}\n\n/** @record */\nexport function NgbTabChangeEvent() {}\n/**\n * Id of the currently active tab\n * @type {string}\n */\nNgbTabChangeEvent.prototype.activeId;\n/**\n * Id of the newly selected tab\n * @type {string}\n */\nNgbTabChangeEvent.prototype.nextId;\n/**\n * Function that will prevent tab switch if called\n * @type {function(): void}\n */\nNgbTabChangeEvent.prototype.preventDefault;\n\n\n/**\n * The payload of the change event fired right before the tab change\n */\nexport interface NgbTabChangeEvent {\n  /**\n   * Id of the currently active tab\n   */\n  activeId: string;\n\n  /**\n   * Id of the newly selected tab\n   */\n  nextId: string;\n\n  /**\n   * Function that will prevent tab switch if called\n   */\n  preventDefault: () => void;\n}\n/**\n * A component that makes it easy to create tabbed interface.\n */\n@Component({\n  selector: 'ngb-tabset',\n  exportAs: 'ngbTabset',\n  template: `\n    <ul [class]=\"'nav nav-' + type + ' justify-content-' + justify\" role=\"tablist\">\n      <li class=\"nav-item\" *ngFor=\"let tab of tabs\">\n        <a [id]=\"tab.id\" class=\"nav-link\" [class.active]=\"tab.id === activeId\" [class.disabled]=\"tab.disabled\"\n          href (click)=\"!!select(tab.id)\" role=\"tab\" [attr.aria-controls]=\"tab.id + '-panel'\" [attr.aria-expanded]=\"tab.id === activeId\">\n          {{tab.title}}<template [ngTemplateOutlet]=\"tab.titleTpl?.templateRef\"></template>\n        </a>\n      </li>\n    </ul>\n    <div class=\"tab-content\">\n      <template ngFor let-tab [ngForOf]=\"tabs\">\n        <div class=\"tab-pane active\" *ngIf=\"tab.id === activeId\" role=\"tabpanel\" [attr.aria-labelledby]=\"tab.id\" id=\"{{tab.id}}-panel\">\n          <template [ngTemplateOutlet]=\"tab.contentTpl.templateRef\"></template>\n        </div>\n      </template>\n    </div>\n  `\n})\nexport class NgbTabset implements AfterContentChecked {\n  @ContentChildren(NgbTab) tabs: QueryList<NgbTab>;\n\n  /**\n   * An identifier of an initially selected (active) tab. Use the \"select\" method to switch a tab programmatically.\n   */\n  @Input() activeId: string;\n\n  /**\n   * The horizontal alignment of the nav with flexbox utilities. Can be one of 'start', 'center' or 'end'\n   */\n  @Input() justify: 'start' | 'center' | 'end';\n\n  /**\n   * Type of navigation to be used for tabs. Can be one of 'tabs' or 'pills'.\n   */\n  @Input() type: 'tabs' | 'pills';\n\n  /**\n   * A tab change event fired right before the tab selection happens. See NgbTabChangeEvent for payload details\n   */\n  @Output() tabChange = new EventEmitter<NgbTabChangeEvent>();\n/**\n * @param {!NgbTabsetConfig} config\n */\nconstructor(config: NgbTabsetConfig) {\n    this.type = config.type;\n    this.justify = config.justify;\n  }\n/**\n * Selects the tab with the given id and shows its associated pane.\n * Any other tab that was previously selected becomes unselected and its associated pane is hidden.\n * @param {string} tabId\n * @return {void}\n */\nselect(tabId: string) {\n    let /** @type {!NgbTab} */ selectedTab = this._getTabById(tabId);\n    if (selectedTab && !selectedTab.disabled && this.activeId !== selectedTab.id) {\n      let /** @type {boolean} */ defaultPrevented = false;\n\n      this.tabChange.emit(\n          {activeId: this.activeId, nextId: selectedTab.id, preventDefault: () => { defaultPrevented = true; }});\n\n      if (!defaultPrevented) {\n        this.activeId = selectedTab.id;\n      }\n    }\n  }\n/**\n * @return {void}\n */\nngAfterContentChecked() {\n    // auto-correct activeId that might have been set incorrectly as input\n    let /** @type {!NgbTab} */ activeTab = this._getTabById(this.activeId);\n    this.activeId = activeTab ? activeTab.id : (this.tabs.length ? this.tabs.first.id : null);\n  }\n/**\n * @param {string} id\n * @return {!NgbTab}\n */\nprivate _getTabById(id: string): NgbTab {\n    let /** @type {!Array<!NgbTab>} */ tabsWithId: NgbTab[] = this.tabs.filter(tab => tab.id === id);\n    return tabsWithId.length ? tabsWithId[0] : null;\n  }\n}\n\nfunction NgbTabset_tsickle_Closure_declarations() {\n/** @type {!QueryList<!NgbTab>} */\nNgbTabset.prototype.tabs;\n/**\n * An identifier of an initially selected (active) tab. Use the \"select\" method to switch a tab programmatically.\n * @type {string}\n */\nNgbTabset.prototype.activeId;\n/**\n * The horizontal alignment of the nav with flexbox utilities. Can be one of 'start', 'center' or 'end'\n * @type {string}\n */\nNgbTabset.prototype.justify;\n/**\n * Type of navigation to be used for tabs. Can be one of 'tabs' or 'pills'.\n * @type {string}\n */\nNgbTabset.prototype.type;\n/**\n * A tab change event fired right before the tab selection happens. See NgbTabChangeEvent for payload details\n * @type {!EventEmitter<!NgbTabChangeEvent>}\n */\nNgbTabset.prototype.tabChange;\n}\n\n"]}