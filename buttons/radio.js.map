{"version":3,"file":"radio.js","sourceRoot":"","sources":["../../../src/buttons/radio.ts"],"names":[],"mappings":"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","sourcesContent":["import {Directive, forwardRef, Optional, Input, Renderer, ElementRef, OnDestroy} from '@angular/core/index';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms/index';\n\nconst /** @type {?} */ NGB_RADIO_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => NgbRadioGroup),\n  multi: true\n};\n/**\n * Easily create Bootstrap-style radio buttons. A value of a selected button is bound to a variable\n * specified via ngModel.\n */\nexport class NgbRadioGroup implements ControlValueAccessor {\nprivate _radios: Set<NgbRadio> = new Set<NgbRadio>();\nprivate _value = null;\nprivate _disabled: boolean;\n/**\n * @return {?}\n */\nget disabled() { return this._disabled; }\n/**\n * @param {?} isDisabled\n * @return {?}\n */\nset disabled(isDisabled: boolean) { this.setDisabledState(isDisabled); }\n\n  onChange = (_: any) => {};\n  onTouched = () => {};\n/**\n * @param {?} radio\n * @return {?}\n */\nonRadioChange(radio: NgbRadio) {\n    this.writeValue(radio.value);\n    this.onChange(radio.value);\n  }\n/**\n * @return {?}\n */\nonRadioValueUpdate() { this._updateRadiosValue(); }\n/**\n * @param {?} radio\n * @return {?}\n */\nregister(radio: NgbRadio) { this._radios.add(radio); }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => any): void { this.onChange = fn; }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => any): void { this.onTouched = fn; }\n/**\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this._disabled = isDisabled;\n    this._updateRadiosDisabled();\n  }\n/**\n * @param {?} radio\n * @return {?}\n */\nunregister(radio: NgbRadio) { this._radios.delete(radio); }\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value) {\n    this._value = value;\n    this._updateRadiosValue();\n  }\n/**\n * @return {?}\n */\nprivate _updateRadiosValue() { this._radios.forEach((radio) => radio.updateValue(this._value)); }\n/**\n * @return {?}\n */\nprivate _updateRadiosDisabled() { this._radios.forEach((radio) => radio.updateDisabled()); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[ngbRadioGroup]',\n  host: {'data-toggle': 'buttons', 'class': 'btn-group'},\n  providers: [NGB_RADIO_VALUE_ACCESSOR]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NgbRadioGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nNgbRadioGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgbRadioGroup.ctorParameters;\n/** @type {?} */\nNgbRadioGroup.prototype._radios;\n/** @type {?} */\nNgbRadioGroup.prototype._value;\n/** @type {?} */\nNgbRadioGroup.prototype._disabled;\n/** @type {?} */\nNgbRadioGroup.prototype.onChange;\n/** @type {?} */\nNgbRadioGroup.prototype.onTouched;\n}\n\nexport class NgbActiveLabel {\n/**\n * @param {?} _renderer\n * @param {?} _elRef\n */\nconstructor(private _renderer: Renderer,\nprivate _elRef: ElementRef) {}\n/**\n * @param {?} isActive\n * @return {?}\n */\nset active(isActive: boolean) { this._renderer.setElementClass(this._elRef.nativeElement, 'active', isActive); }\n/**\n * @param {?} isDisabled\n * @return {?}\n */\nset disabled(isDisabled: boolean) {\n    this._renderer.setElementClass(this._elRef.nativeElement, 'disabled', isDisabled);\n  }\n/**\n * @param {?} isFocused\n * @return {?}\n */\nset focused(isFocused: boolean) { this._renderer.setElementClass(this._elRef.nativeElement, 'focus', isFocused); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: 'label.btn'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer, },\n{type: ElementRef, },\n];\n}\n\nfunction NgbActiveLabel_tsickle_Closure_declarations() {\n/** @type {?} */\nNgbActiveLabel.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgbActiveLabel.ctorParameters;\n/** @type {?} */\nNgbActiveLabel.prototype._renderer;\n/** @type {?} */\nNgbActiveLabel.prototype._elRef;\n}\n\n/**\n * Marks an input of type \"radio\" as part of the NgbRadioGroup.\n */\nexport class NgbRadio implements OnDestroy {\nprivate _checked: boolean;\nprivate _disabled: boolean;\nprivate _value: any = null;\n/**\n * You can specify model value of a given radio by binding to the value property.\n * @param {?} value\n * @return {?}\n */\nset value(value: any) {\n    this._value = value;\n    const /** @type {?} */ stringValue = value ? value.toString() : '';\n    this._renderer.setElementProperty(this._element.nativeElement, 'value', stringValue);\n\n    if (this._group) {\n      this._group.onRadioValueUpdate();\n    }\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset checked(value: any) {\n    this._checked = this._element.nativeElement.hasAttribute('checked') ? true : value;\n  }\n/**\n * @param {?} isDisabled\n * @return {?}\n */\nset disabled(isDisabled: any) {\n    this._disabled = isDisabled !== false;\n    this.updateDisabled();\n  }\n/**\n * @param {?} isFocused\n * @return {?}\n */\nset focused(isFocused: boolean) {\n    if (this._label) {\n      this._label.focused = isFocused;\n    }\n  }\n/**\n * @return {?}\n */\nget value() { return this._value; }\n/**\n * @return {?}\n */\nget checked() { return this._checked; }\n/**\n * @return {?}\n */\nget disabled() { return (this._group && this._group.disabled) || this._disabled; }\n/**\n * @param {?} _group\n * @param {?} _label\n * @param {?} _renderer\n * @param {?} _element\n */\nconstructor(\nprivate _group: NgbRadioGroup,\nprivate _label: NgbActiveLabel,\nprivate _renderer: Renderer,\nprivate _element: ElementRef) {\n    if (this._group) {\n      this._group.register(this);\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._group) {\n      this._group.unregister(this);\n    }\n  }\n/**\n * @return {?}\n */\nonChange() {\n    if (this._group) {\n      this._group.onRadioChange(this);\n    }\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nupdateValue(value) {\n    this._checked = (this.value === value && value !== null);\n    this._label.active = this._checked;\n  }\n/**\n * @return {?}\n */\nupdateDisabled() {\n    let /** @type {?} */ disabled = (this._group && this._group.disabled) || this._disabled;\n    if (this._label) {\n      this._label.disabled = disabled;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'input[type=radio]',\n  host: {\n    '[checked]': 'checked',\n    '[disabled]': 'disabled',\n    '(change)': 'onChange()',\n    '(focus)': 'focused = true',\n    '(blur)': 'focused = false'\n  }\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgbRadioGroup, decorators: [{ type: Optional }, ]},\n{type: NgbActiveLabel, decorators: [{ type: Optional }, ]},\n{type: Renderer, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'value': [{ type: Input, args: ['value', ] },],\n'checked': [{ type: Input, args: ['checked', ] },],\n'disabled': [{ type: Input, args: ['disabled', ] },],\n};\n}\n\nfunction NgbRadio_tsickle_Closure_declarations() {\n/** @type {?} */\nNgbRadio.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgbRadio.ctorParameters;\n/** @type {?} */\nNgbRadio.propDecorators;\n/** @type {?} */\nNgbRadio.prototype._checked;\n/** @type {?} */\nNgbRadio.prototype._disabled;\n/** @type {?} */\nNgbRadio.prototype._value;\n/** @type {?} */\nNgbRadio.prototype._group;\n/** @type {?} */\nNgbRadio.prototype._label;\n/** @type {?} */\nNgbRadio.prototype._renderer;\n/** @type {?} */\nNgbRadio.prototype._element;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}