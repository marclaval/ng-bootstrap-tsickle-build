{"version":3,"sources":["../../../src/datepicker/datepicker-input.ts"],"names":[],"mappings":"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","file":"datepicker-input.js","sourceRoot":"","sourcesContent":["import {\n  Directive,\n  Input,\n  ComponentRef,\n  ElementRef,\n  ViewContainerRef,\n  Renderer,\n  ComponentFactoryResolver,\n  NgZone,\n  TemplateRef,\n  forwardRef,\n  EventEmitter,\n  Output\n} from '@angular/core';\nconst Directive: NeverTypeCheckMe = Directive;  /* local alias for Closure JSDoc */\nconst Input: NeverTypeCheckMe = Input;  /* local alias for Closure JSDoc */\nconst ComponentRef: NeverTypeCheckMe = ComponentRef;  /* local alias for Closure JSDoc */\nconst ElementRef: NeverTypeCheckMe = ElementRef;  /* local alias for Closure JSDoc */\nconst ViewContainerRef: NeverTypeCheckMe = ViewContainerRef;  /* local alias for Closure JSDoc */\nconst Renderer: NeverTypeCheckMe = Renderer;  /* local alias for Closure JSDoc */\nconst ComponentFactoryResolver: NeverTypeCheckMe = ComponentFactoryResolver;  /* local alias for Closure JSDoc */\nconst NgZone: NeverTypeCheckMe = NgZone;  /* local alias for Closure JSDoc */\nconst TemplateRef: NeverTypeCheckMe = TemplateRef;  /* local alias for Closure JSDoc */\nconst forwardRef: NeverTypeCheckMe = forwardRef;  /* local alias for Closure JSDoc */\nconst EventEmitter: NeverTypeCheckMe = EventEmitter;  /* local alias for Closure JSDoc */\nconst Output: NeverTypeCheckMe = Output;  /* local alias for Closure JSDoc */\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nconst ControlValueAccessor: NeverTypeCheckMe = ControlValueAccessor;  /* local alias for Closure JSDoc */\nconst NG_VALUE_ACCESSOR: NeverTypeCheckMe = NG_VALUE_ACCESSOR;  /* local alias for Closure JSDoc */\n\nimport {NgbDate} from './ngb-date';\nconst NgbDate: NeverTypeCheckMe = NgbDate;  /* local alias for Closure JSDoc */\nimport {NgbDatepicker, NgbDatepickerNavigateEvent} from './datepicker';\nconst NgbDatepicker: NeverTypeCheckMe = NgbDatepicker;  /* local alias for Closure JSDoc */\nconst NgbDatepickerNavigateEvent: NeverTypeCheckMe = NgbDatepickerNavigateEvent;  /* local alias for Closure JSDoc */\nimport {DayTemplateContext} from './datepicker-day-template-context';\nconst DayTemplateContext: NeverTypeCheckMe = DayTemplateContext;  /* local alias for Closure JSDoc */\nimport {NgbDateParserFormatter} from './ngb-date-parser-formatter';\nconst NgbDateParserFormatter: NeverTypeCheckMe = NgbDateParserFormatter;  /* local alias for Closure JSDoc */\n\nimport {positionElements} from '../util/positioning';\nconst positionElements: NeverTypeCheckMe = positionElements;  /* local alias for Closure JSDoc */\nimport {NgbDateStruct} from './ngb-date-struct';\nconst NgbDateStruct: NeverTypeCheckMe = NgbDateStruct;  /* local alias for Closure JSDoc */\nimport {NgbCalendar} from './ngb-calendar';\nconst NgbCalendar: NeverTypeCheckMe = NgbCalendar;  /* local alias for Closure JSDoc */\nimport {NgbDatepickerService} from './datepicker-service';\nconst NgbDatepickerService: NeverTypeCheckMe = NgbDatepickerService;  /* local alias for Closure JSDoc */\n\nconst /** @type {?} */ NGB_DATEPICKER_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => NgbInputDatepicker),\n  multi: true\n};\n/**\n * A directive that makes it possible to have datepickers on input fields.\n * Manages integration with the input field itself (data entry) and ngModel (validation etc.).\n */\n@Directive({\n  selector: 'input[ngbDatepicker]',\n  exportAs: 'ngbDatepicker',\n  host: {'(change)': 'manualDateChange($event.target.value)', '(keyup.esc)': 'close()', '(blur)': 'onBlur()'},\n  providers: [NGB_DATEPICKER_VALUE_ACCESSOR]\n})\nexport class NgbInputDatepicker implements ControlValueAccessor {\nprivate _cRef: ComponentRef<NgbDatepicker> = null;\nprivate _model: NgbDate;\nprivate _zoneSubscription: any;\n\n  /**\n   * Reference for the custom template for the day display\n   */\n  @Input() dayTemplate: TemplateRef<DayTemplateContext>;\n\n  /**\n   * Number of months to display\n   */\n  @Input() displayMonths: number;\n\n  /**\n  * First day of the week. With default calendar we use ISO 8601: 1=Mon ... 7=Sun\n   */\n  @Input() firstDayOfWeek: number;\n\n  /**\n   * Callback to mark a given date as disabled.\n   * 'Current' contains the month that will be displayed in the view\n   */\n  @Input() markDisabled: (date: NgbDateStruct, current: {year: number, month: number}) => boolean;\n\n  /**\n   * Min date for the navigation. If not provided will be 10 years before today or `startDate`\n   */\n  @Input() minDate: NgbDateStruct;\n\n  /**\n   * Max date for the navigation. If not provided will be 10 years from today or `startDate`\n   */\n  @Input() maxDate: NgbDateStruct;\n\n  /**\n   * Navigation type: `select` (default with select boxes for month and year), `arrows`\n   * (without select boxes, only navigation arrows) or `none` (no navigation at all)\n   */\n  @Input() navigation: 'select' | 'arrows' | 'none';\n\n  /**\n   * The way to display days that don't belong to current month: `visible` (default),\n   * `hidden` (not displayed) or `collapsed` (not displayed with empty space collapsed)\n   */\n  @Input() outsideDays: 'visible' | 'collapsed' | 'hidden';\n\n  /**\n   * Whether to display days of the week\n   */\n  @Input() showWeekdays: boolean;\n\n  /**\n   * Whether to display week numbers\n   */\n  @Input() showWeekNumbers: boolean;\n\n  /**\n   * Date to open calendar with.\n   * With default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.\n   * If nothing or invalid date provided, calendar will open with current month.\n   * Use 'navigateTo(date)' as an alternative\n   */\n  @Input() startDate: {year: number, month: number};\n\n  /**\n   * An event fired when navigation happens and currently displayed month changes.\n   * See NgbDatepickerNavigateEvent for the payload info.\n   */\n  @Output() navigate = new EventEmitter<NgbDatepickerNavigateEvent>();\nprivate _onChange = (_: any) => {};\nprivate _onTouched = () => {};\n/**\n * @param {!NgbDateParserFormatter} _parserFormatter\n * @param {!ElementRef} _elRef\n * @param {!ViewContainerRef} _vcRef\n * @param {!Renderer} _renderer\n * @param {!ComponentFactoryResolver} _cfr\n * @param {!NgZone} ngZone\n * @param {!NgbDatepickerService} _service\n * @param {!NgbCalendar} _calendar\n */\nconstructor(\nprivate _parserFormatter: NgbDateParserFormatter,\nprivate _elRef: ElementRef,\nprivate _vcRef: ViewContainerRef,\nprivate _renderer: Renderer,\nprivate _cfr: ComponentFactoryResolver, ngZone: NgZone,\nprivate _service: NgbDatepickerService,\nprivate _calendar: NgbCalendar) {\n    this._zoneSubscription = ngZone.onStable.subscribe(() => {\n      if (this._cRef) {\n        positionElements(this._elRef.nativeElement, this._cRef.location.nativeElement, 'bottom-left');\n      }\n    });\n  }\n/**\n * @param {function(?): ?} fn\n * @return {void}\n */\nregisterOnChange(fn: (value: any) => any): void { this._onChange = fn; }\n/**\n * @param {function(): ?} fn\n * @return {void}\n */\nregisterOnTouched(fn: () => any): void { this._onTouched = fn; }\n/**\n * @param {?} value\n * @return {void}\n */\nwriteValue(value) {\n    const /** @type {!NgbDate} */ ngbDate = value ? new NgbDate(value.year, value.month, value.day) : null;\n    this._model = this._calendar.isValid(value) ? ngbDate : null;\n    this._writeModelValue(this._model);\n  }\n/**\n * @param {boolean} isDisabled\n * @return {void}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this._renderer.setElementProperty(this._elRef.nativeElement, 'disabled', isDisabled);\n    if (this.isOpen()) {\n      this._cRef.instance.setDisabledState(isDisabled);\n    }\n  }\n/**\n * @param {string} value\n * @return {void}\n */\nmanualDateChange(value: string) {\n    this._model = this._service.toValidDate(this._parserFormatter.parse(value), null);\n    this._onChange(this._model ? {year: this._model.year, month: this._model.month, day: this._model.day} : null);\n    this._writeModelValue(this._model);\n  }\n/**\n * @return {boolean}\n */\nisOpen() { return !!this._cRef; }\n/**\n * Opens the datepicker with the selected date indicated by the ngModel value.\n * @return {void}\n */\nopen() {\n    if (!this.isOpen()) {\n      const /** @type {!ComponentFactory<!NgbDatepicker>} */ cf = this._cfr.resolveComponentFactory(NgbDatepicker);\n      this._cRef = this._vcRef.createComponent(cf);\n\n      this._applyPopupStyling(this._cRef.location.nativeElement);\n      this._cRef.instance.writeValue(this._model);\n      this._applyDatepickerInputs(this._cRef.instance);\n      this._subscribeForDatepickerOutputs(this._cRef.instance);\n      this._cRef.instance.ngOnInit();\n\n      // date selection event handling\n      this._cRef.instance.registerOnChange((selectedDate) => {\n        this.writeValue(selectedDate);\n        this._onChange(selectedDate);\n        this.close();\n      });\n    }\n  }\n/**\n * Closes the datepicker popup.\n * @return {void}\n */\nclose() {\n    if (this.isOpen()) {\n      this._vcRef.remove(this._vcRef.indexOf(this._cRef.hostView));\n      this._cRef = null;\n    }\n  }\n/**\n * Toggles the datepicker popup (opens when closed and closes when opened).\n * @return {void}\n */\ntoggle() {\n    if (this.isOpen()) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n/**\n * Navigates current view to provided date.\n * With default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.\n * If nothing or invalid date provided calendar will open current month.\n * Use 'startDate' input as an alternative\n * @param {{year: number, month: number}=} date\n * @return {void}\n */\nnavigateTo(date?: {year: number, month: number}) {\n    if (this.isOpen()) {\n      this._cRef.instance.navigateTo(date);\n    }\n  }\n/**\n * @return {void}\n */\nonBlur() { this._onTouched(); }\n/**\n * @param {!NgbDatepicker} datepickerInstance\n * @return {void}\n */\nprivate _applyDatepickerInputs(datepickerInstance: NgbDatepicker): void {\n    ['dayTemplate', 'displayMonths', 'firstDayOfWeek', 'markDisabled', 'minDate', 'maxDate', 'navigation',\n     'outsideDays', 'showNavigation', 'showWeekdays', 'showWeekNumbers']\n        .forEach((optionName: string) => {\n          if (this[optionName] !== undefined) {\n            datepickerInstance[optionName] = this[optionName];\n          }\n        });\n    datepickerInstance.startDate = this.startDate || this._model;\n  }\n/**\n * @param {?} nativeElement\n * @return {void}\n */\nprivate _applyPopupStyling(nativeElement: any) {\n    this._renderer.setElementClass(nativeElement, 'dropdown-menu', true);\n    this._renderer.setElementStyle(nativeElement, 'padding', '0');\n  }\n/**\n * @param {!NgbDatepicker} datepickerInstance\n * @return {void}\n */\nprivate _subscribeForDatepickerOutputs(datepickerInstance: NgbDatepicker) {\n    datepickerInstance.navigate.subscribe(date => this.navigate.emit(date));\n  }\n/**\n * @param {!NgbDate} model\n * @return {void}\n */\nprivate _writeModelValue(model: NgbDate) {\n    this._renderer.setElementProperty(this._elRef.nativeElement, 'value', this._parserFormatter.format(model));\n    if (this.isOpen()) {\n      this._cRef.instance.writeValue(model);\n      this._onTouched();\n    }\n  }\n}\n\nfunction NgbInputDatepicker_tsickle_Closure_declarations() {\n/** @type {!ComponentRef<!NgbDatepicker>} */\nNgbInputDatepicker.prototype._cRef;\n/** @type {!NgbDate} */\nNgbInputDatepicker.prototype._model;\n/** @type {?} */\nNgbInputDatepicker.prototype._zoneSubscription;\n/**\n * Reference for the custom template for the day display\n * @type {!TemplateRef<!DayTemplateContext>}\n */\nNgbInputDatepicker.prototype.dayTemplate;\n/**\n * Number of months to display\n * @type {number}\n */\nNgbInputDatepicker.prototype.displayMonths;\n/**\n * First day of the week. With default calendar we use ISO 8601: 1=Mon ... 7=Sun\n * @type {number}\n */\nNgbInputDatepicker.prototype.firstDayOfWeek;\n/**\n * Callback to mark a given date as disabled.\n * 'Current' contains the month that will be displayed in the view\n * @type {function(!NgbDateStruct, {year: number, month: number}): boolean}\n */\nNgbInputDatepicker.prototype.markDisabled;\n/**\n * Min date for the navigation. If not provided will be 10 years before today or `startDate`\n * @type {!NgbDateStruct}\n */\nNgbInputDatepicker.prototype.minDate;\n/**\n * Max date for the navigation. If not provided will be 10 years from today or `startDate`\n * @type {!NgbDateStruct}\n */\nNgbInputDatepicker.prototype.maxDate;\n/**\n * Navigation type: `select` (default with select boxes for month and year), `arrows`\n * (without select boxes, only navigation arrows) or `none` (no navigation at all)\n * @type {string}\n */\nNgbInputDatepicker.prototype.navigation;\n/**\n * The way to display days that don't belong to current month: `visible` (default),\n * `hidden` (not displayed) or `collapsed` (not displayed with empty space collapsed)\n * @type {string}\n */\nNgbInputDatepicker.prototype.outsideDays;\n/**\n * Whether to display days of the week\n * @type {boolean}\n */\nNgbInputDatepicker.prototype.showWeekdays;\n/**\n * Whether to display week numbers\n * @type {boolean}\n */\nNgbInputDatepicker.prototype.showWeekNumbers;\n/**\n * Date to open calendar with.\n * With default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.\n * If nothing or invalid date provided, calendar will open with current month.\n * Use 'navigateTo(date)' as an alternative\n * @type {{year: number, month: number}}\n */\nNgbInputDatepicker.prototype.startDate;\n/**\n * An event fired when navigation happens and currently displayed month changes.\n * See NgbDatepickerNavigateEvent for the payload info.\n * @type {!EventEmitter<!NgbDatepickerNavigateEvent>}\n */\nNgbInputDatepicker.prototype.navigate;\n/** @type {function(?): void} */\nNgbInputDatepicker.prototype._onChange;\n/** @type {function(): void} */\nNgbInputDatepicker.prototype._onTouched;\n/** @type {!NgbDateParserFormatter} */\nNgbInputDatepicker.prototype._parserFormatter;\n/** @type {!ElementRef} */\nNgbInputDatepicker.prototype._elRef;\n/** @type {!ViewContainerRef} */\nNgbInputDatepicker.prototype._vcRef;\n/** @type {!Renderer} */\nNgbInputDatepicker.prototype._renderer;\n/** @type {!ComponentFactoryResolver} */\nNgbInputDatepicker.prototype._cfr;\n/** @type {!NgbDatepickerService} */\nNgbInputDatepicker.prototype._service;\n/** @type {!NgbCalendar} */\nNgbInputDatepicker.prototype._calendar;\n}\n\n"]}