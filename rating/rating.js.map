{"version":3,"file":"rating.js","sourceRoot":"","sources":["../../../src/rating/rating.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  Output,\n  EventEmitter,\n  OnInit,\n  TemplateRef,\n  OnChanges,\n  SimpleChanges,\n  ContentChild,\n  forwardRef,\n  ChangeDetectorRef\n} from '@angular/core/index';\nimport {NgbRatingConfig} from './rating-config';\nimport {toString, getValueInRange} from '../util/util';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms/index';\ntype Key = number;\nlet Key: any = {};\nKey.End = 35;\nKey.Home = 36;\nKey.ArrowLeft = 37;\nKey.ArrowUp = 38;\nKey.ArrowRight = 39;\nKey.ArrowDown = 40;\nKey[Key.End] = \"End\";\nKey[Key.Home] = \"Home\";\nKey[Key.ArrowLeft] = \"ArrowLeft\";\nKey[Key.ArrowUp] = \"ArrowUp\";\nKey[Key.ArrowRight] = \"ArrowRight\";\nKey[Key.ArrowDown] = \"ArrowDown\";\n\n\n/**\n * Context for the custom star display template\n */\nexport interface StarTemplateContext {\n  /**\n   * Star fill percentage. An integer value between 0 and 100\n   */\n  fill: number;\n}\n\nconst /** @type {?} */ NGB_RATING_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => NgbRating),\n  multi: true\n};\n/**\n * Rating directive that will take care of visualising a star rating bar.\n */\nexport class NgbRating implements ControlValueAccessor,\n    OnInit, OnChanges {\nprivate _oldRate: number;\n  range: number[] = [];\n\n  /**\n   * Maximal rating that can be given using this widget.\n   */\n   max: number;\n\n  /**\n   * Current rating. Can be a decimal value like 3.75\n   */\n   rate: number;\n\n  /**\n   * A flag indicating if rating can be updated.\n   */\n   readonly: boolean;\n\n  /**\n   * A template to override star display.\n   * Alternatively put a <template> as the only child of <ngb-rating> element\n   */\n    starTemplate: TemplateRef<StarTemplateContext>;\n\n  /**\n   * An event fired when a user is hovering over a given rating.\n   * Event's payload equals to the rating being hovered over.\n   */\n   hover = new EventEmitter<number>();\n\n  /**\n   * An event fired when a user stops hovering over a given rating.\n   * Event's payload equals to the rating of the last item being hovered over.\n   */\n   leave = new EventEmitter<number>();\n\n  /**\n   * An event fired when a user selects a new rating.\n   * Event's payload equals to the newly selected rating.\n   */\n   rateChange = new EventEmitter<number>(true);\n\n  onChange = (_: any) => {};\n  onTouched = () => {};\n/**\n * @param {?} config\n * @param {?} _changeDetectorRef\n */\nconstructor(config: NgbRatingConfig,\nprivate _changeDetectorRef: ChangeDetectorRef) {\n    this.max = config.max;\n    this.readonly = config.readonly;\n  }\n/**\n * @return {?}\n */\nariaValueText() { return `${this.rate} out of ${this.max}`; }\n/**\n * @param {?} value\n * @return {?}\n */\nenter(value: number): void {\n    if (!this.readonly) {\n      this.rate = value;\n    }\n    this.hover.emit(value);\n  }\n/**\n * @param {?} event\n * @return {?}\n */\nhandleKeyDown(event: KeyboardEvent) {\n    if (Key[toString(event.which)]) {\n      event.preventDefault();\n\n      switch (event.which) {\n        case Key.ArrowDown:\n        case Key.ArrowLeft:\n          this.update(this.rate - 1);\n          break;\n        case Key.ArrowUp:\n        case Key.ArrowRight:\n          this.update(this.rate + 1);\n          break;\n        case Key.Home:\n          this.update(0);\n          break;\n        case Key.End:\n          this.update(this.max);\n          break;\n      }\n    }\n  }\n/**\n * @param {?} index\n * @return {?}\n */\ngetFillValue(index: number): number {\n    const /** @type {?} */ diff = this.rate - index;\n\n    if (diff >= 1) {\n      return 100;\n    }\n    if (diff < 1 && diff > 0) {\n      return Number.parseInt((diff * 100).toFixed(2));\n    }\n\n    return 0;\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    if (changes['rate']) {\n      this.update(this.rate);\n      this._oldRate = this.rate;\n    }\n  }\n/**\n * @return {?}\n */\nngOnInit(): void { this.range = Array.from({length: this.max}, (v, k) => k + 1); }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => any): void { this.onChange = fn; }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => any): void { this.onTouched = fn; }\n/**\n * @return {?}\n */\nreset(): void {\n    this.leave.emit(this.rate);\n    this.rate = this._oldRate;\n  }\n/**\n * @param {?} value\n * @param {?=} internalChange\n * @return {?}\n */\nupdate(value: number, internalChange = true): void {\n    if (!this.readonly) {\n      const /** @type {?} */ newRate = value ? getValueInRange(value, this.max, 0) : 0;\n      if (this._oldRate !== newRate) {\n        this._oldRate = newRate;\n        this.rate = newRate;\n        this.rateChange.emit(newRate);\n        if (internalChange) {\n          this.onChange(this.rate);\n        }\n      }\n    }\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value) {\n    this.update(value, false);\n    this._changeDetectorRef.markForCheck();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'ngb-rating',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'(keydown)': 'handleKeyDown($event)'},\n  template: `\n    <template #t let-fill=\"fill\">{{ fill === 100 ? '&#9733;' : '&#9734;' }}</template>\n    <span tabindex=\"0\" (mouseleave)=\"reset()\" role=\"slider\" aria-valuemin=\"0\"\n      [attr.aria-valuemax]=\"max\" [attr.aria-valuenow]=\"rate\" [attr.aria-valuetext]=\"ariaValueText()\">\n      <template ngFor [ngForOf]=\"range\" let-index=\"index\">\n        <span class=\"sr-only\">({{ index < rate ? '*' : ' ' }})</span>\n        <span (mouseenter)=\"enter(index + 1)\" (click)=\"update(index + 1)\" \n        [style.cursor]=\"readonly ? 'default' : 'pointer'\">\n          <template [ngTemplateOutlet]=\"starTemplate || t\" [ngOutletContext]=\"{fill: getFillValue(index)}\"></template>\n        </span>\n      </template>\n    </span>\n  `,\n  providers: [NGB_RATING_VALUE_ACCESSOR]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgbRatingConfig, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'max': [{ type: Input },],\n'rate': [{ type: Input },],\n'readonly': [{ type: Input },],\n'starTemplate': [{ type: Input },{ type: ContentChild, args: [TemplateRef, ] },],\n'hover': [{ type: Output },],\n'leave': [{ type: Output },],\n'rateChange': [{ type: Output },],\n};\n}\n\nfunction NgbRating_tsickle_Closure_declarations() {\n/** @type {?} */\nNgbRating.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgbRating.ctorParameters;\n/** @type {?} */\nNgbRating.propDecorators;\n/** @type {?} */\nNgbRating.prototype._oldRate;\n/** @type {?} */\nNgbRating.prototype.range;\n/**\n * Maximal rating that can be given using this widget.\n * @type {?}\n */\nNgbRating.prototype.max;\n/**\n * Current rating. Can be a decimal value like 3.75\n * @type {?}\n */\nNgbRating.prototype.rate;\n/**\n * A flag indicating if rating can be updated.\n * @type {?}\n */\nNgbRating.prototype.readonly;\n/**\n * A template to override star display.\n * Alternatively put a <template> as the only child of <ngb-rating> element\n * @type {?}\n */\nNgbRating.prototype.starTemplate;\n/**\n * An event fired when a user is hovering over a given rating.\n * Event's payload equals to the rating being hovered over.\n * @type {?}\n */\nNgbRating.prototype.hover;\n/**\n * An event fired when a user stops hovering over a given rating.\n * Event's payload equals to the rating of the last item being hovered over.\n * @type {?}\n */\nNgbRating.prototype.leave;\n/**\n * An event fired when a user selects a new rating.\n * Event's payload equals to the newly selected rating.\n * @type {?}\n */\nNgbRating.prototype.rateChange;\n/** @type {?} */\nNgbRating.prototype.onChange;\n/** @type {?} */\nNgbRating.prototype.onTouched;\n/** @type {?} */\nNgbRating.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
