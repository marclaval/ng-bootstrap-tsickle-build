{"version":3,"sources":["../../../src/timepicker/timepicker.ts"],"names":[],"mappings":";;;;;;;;;OAAO,EAAA,SAAE,EAAU,KAAA,EAAO,UAAA,EAAY,SAAA,EAAW,aAAA,EAAc,MAAA,eAAA;AAC/D,MAAM,SAAS,GAAqB,SAAS,CAAC,CAAE,mCAAmC;AACnF,MAAM,KAAK,GAAqB,KAAK,CAAC,CAAE,mCAAmC;AAC3E,MAAM,UAAU,GAAqB,UAAU,CAAC,CAAE,mCAAmC;AACrF,MAAM,SAAS,GAAqB,SAAS,CAAC,CAAE,mCAAmC;AACnF,MAAM,aAAa,GAAqB,aAAa,CAAC,CAAE,mCAAmC;OAJpF,EAAA,oBAAE,EAAqB,iBAAA,EAAkB,MAAA,gBAAA;AAMhD,MAAM,oBAAoB,GAAqB,oBAAoB,CAAC,CAAE,mCAAmC;AACzG,MAAM,iBAAiB,GAAqB,iBAAiB,CAAC,CAAE,mCAAmC;OAL5F,EAAA,QAAE,EAAS,SAAA,EAAW,SAAA,EAAW,SAAA,EAAU,MAAA,cAAA;AAQlD,MAAM,QAAQ,GAAqB,QAAQ,CAAC,CAAE,mCAAmC;AACjF,MAAM,SAAS,GAAqB,SAAS,CAAC,CAAE,mCAAmC;AACnF,MAAM,SAAS,GAAqB,SAAS,CAAC,CAAE,mCAAmC;AACnF,MAAM,SAAS,GAAqB,SAAS,CAAC,CAAE,mCAAmC;OAV5E,EAAA,OAAE,EAAO,MAAA,YAAA;AAYhB,MAAM,OAAO,GAAqB,OAAO,CAAC,CAAE,mCAAmC;OAXxE,EAAA,mBAAE,EAAmB,MAAA,qBAAA;AAa5B,MAAM,mBAAmB,GAAqB,mBAAmB,CAAC,CAAE,mCAAmC;AAEvG,MAAM,gBAAgB,CAbhB,6BAAA,GAAgC;IAcpC,OAAO,EAbE,iBAAA;IAcT,WAAW,EAbE,UAAA,CAAW,MAAM,aAAA,CAAc;IAc5C,KAAK,EAbE,IAAA;CAcR,CAbC;AAcF;;GAEG;AAoIH;IA4CA;;OAEG;IACH,YAdG,MAAmB;QA0BpB,aAAQ,GAdG,CAAA,CAAI,OAAQ,CAAA,CAAG;QAe1B,cAAS,GAdG,QAAM,CAAA,CAAG;QAEnB,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;QAChC,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;QAChC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC9B,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;QAChC,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;QACpC,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;QACpC,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;QAChC,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC;QAC5C,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;IAC1B,CAAC;IAIH;;;OAGG;IACH,UAjBG,CAAA,KAAA;QAkBC,IAAI,CAjBC,KAAC,GAAO,KAAA,GAAQ,IAAI,OAAA,CAAQ,KAAC,CAAK,IAAC,EAAK,KAAA,CAAM,MAAC,EAAO,KAAA,CAAM,MAAC,CAAM,GAAG,IAAI,OAAA,EAAQ,CAAE;QAkBzF,EAAE,CAAC,CAAC,CAjBC,IAAC,CAAI,OAAC,IAAU,CAAA,CAAE,KAAC,IAAQ,CAAA,QAAE,CAAQ,KAAC,CAAK,MAAC,CAAM,CAAC,CAAC,CAAC,CAAA;YAkBxD,IAAI,CAjBC,KAAC,CAAK,MAAC,GAAQ,CAAA,CAAE;QAkBxB,CAAC;IACH,CAAC;IACH;;;OAGG;IACH,gBApBG,CAAA,EAAA,IAAiD,IAAA,CAAK,QAAC,GAAU,EAAA,CAAG,CAAC,CAAA;IAqBxE;;;OAGG;IACH,iBAvBG,CAAA,EAAA,IAAwC,IAAA,CAAK,SAAC,GAAW,EAAA,CAAG,CAAC,CAAA;IAwBhE;;;OAGG;IACH,gBA1BG,CAAA,UAAA,IAAuC,IAAA,CAAK,QAAC,GAAU,UAAA,CAAW,CAAC,CAAA;IA2BtE;;;OAGG;IACH,UA7BG,CAAA,IAAA;QA8BC,IAAI,CA7BC,KAAC,CAAK,UAAC,CAAU,IAAC,CAAI,CAAC;QA8B5B,IAAI,CA7BC,oBAAC,EAAoB,CAAE;IA8B9B,CAAC;IACH;;;OAGG;IACH,YAhCG,CAAA,IAAA;QAiCC,IAAI,CAhCC,KAAC,CAAK,YAAC,CAAY,IAAC,CAAI,CAAC;QAiC9B,IAAI,CAhCC,oBAAC,EAAoB,CAAE;IAiC9B,CAAC;IACH;;;OAGG;IACH,YAnCG,CAAA,IAAA;QAoCC,IAAI,CAnCC,KAAC,CAAK,YAAC,CAAY,IAAC,CAAI,CAAC;QAoC9B,IAAI,CAnCC,oBAAC,EAAoB,CAAE;IAoC9B,CAAC;IACH;;;OAGG;IACH,UAtCG,CAAA,MAAA;QAuCC,IAAI,CAtCC,KAAC,CAAK,UAAC,CAAU,SAAC,CAAS,MAAC,CAAM,CAAC,CAAC;QAuCzC,IAAI,CAtCC,oBAAC,EAAoB,CAAE;IAuC9B,CAAC;IACH;;;OAGG;IACH,YAzCG,CAAA,MAAA;QA0CC,IAAI,CAzCC,KAAC,CAAK,YAAC,CAAY,SAAC,CAAS,MAAC,CAAM,CAAC,CAAC;QA0C3C,IAAI,CAzCC,oBAAC,EAAoB,CAAE;IA0C9B,CAAC;IACH;;;OAGG;IACH,YA5CG,CAAA,MAAA;QA6CC,IAAI,CA5CC,KAAC,CAAK,YAAC,CAAY,SAAC,CAAS,MAAC,CAAM,CAAC,CAAC;QA6C3C,IAAI,CA5CC,oBAAC,EAAoB,CAAE;IA6C9B,CAAC;IACH;;OAEG;IACH,cA9CG;QA+CC,EAAE,CAAC,CAAC,IA9CC,CAAI,QAAC,CAAQ,CAAC,CAAA;YA+CjB,IAAI,CA9CC,UAAC,CAAU,EAAC,CAAE,CAAC;QA+CtB,CAAC;IACH,CAAC;IACH;;;OAGG;IACH,UAjDG,CAAA,KAAA;QAkDC,EAAE,CAAC,CAAC,QAjDC,CAAQ,KAAC,CAAK,CAAC,CAAC,CAAA;YAkDnB,EAAE,CAAC,CAAC,IAjDC,CAAI,QAAC,CAAQ,CAAC,CAAA;gBAkDjB,MAAM,CAjDC,SAAA,CAAU,KAAC,GAAO,EAAA,KAAO,CAAA,GAAI,EAAA,GAAK,KAAA,GAAQ,EAAA,CAAG,CAAC;YAkDvD,CAAC;YAjDC,IAAA,CAAK,CAAA;gBAkDL,MAAM,CAjDC,SAAA,CAAU,KAAC,GAAO,EAAA,CAAG,CAAC;YAkD/B,CAAC;QACH,CAAC;QAjDC,IAAA,CAAK,CAAA;YAkDL,MAAM,CAjDC,SAAA,CAAU,GAAC,CAAG,CAAC;QAkDxB,CAAC;IACH,CAAC;IACH;;;OAGG;IACH,YApDG,CAAA,KAAA,IAA6B,MAAA,CAAO,SAAA,CAAU,KAAC,CAAK,CAAC,CAAC,CAAA;IAqDzD;;OAEG;IACH,kBAtDG,KAAsB,MAAA,CAAO,EAAA,iBAAE,EAAkB,IAAA,CAAK,IAAC,KAAQ,OAAA,EAAS,iBAAA,EAAmB,IAAA,CAAK,IAAC,KAAQ,OAAA,EAAQ,CAAC,CAAC,CAAA;IAuDtH;;OAEG;IACH,cAxDG,KAAkB,MAAA,CAAO,EAAA,QAAE,EAAS,IAAA,CAAK,IAAC,KAAQ,OAAA,EAAS,QAAA,EAAU,IAAA,CAAK,IAAC,KAAQ,OAAA,EAAQ,CAAC,CAAC,CAAA;IAyDhG;;;OAGG;IACH,WA1DG,CAAA,OAAA;QA2DC,EAAE,CAAC,CAAC,OA1DC,CAAO,SAAC,CAAS,IAAI,CAAA,IAAE,CAAI,OAAC,IAAU,IAAA,CAAK,KAAC,IAAQ,CAAA,QAAE,CAAQ,IAAC,CAAI,KAAC,CAAK,MAAC,CAAM,CAAC,CAAC,CAAA;YA2DrF,IAAI,CA1DC,KAAC,CAAK,MAAC,GAAQ,CAAA,CAAE;YA2DtB,IAAI,CA1DC,oBAAC,CAAoB,KAAC,CAAK,CAAC;QA2DnC,CAAC;IACH,CAAC;IACH;;;OAGG;IA5DA,oBAAA,CAAA,OAAA,GAAA,IAAA;QA8DC,EAAE,CAAC,CAAC,OA7DC,CAAO,CAAC,CAAA;YA8DX,IAAI,CA7DC,SAAC,EAAS,CAAE;QA8DnB,CAAC;QACD,EAAE,CAAC,CAAC,IA7DC,CAAI,KAAC,CAAK,OAAC,CAAO,IAAC,CAAI,OAAC,CAAO,CAAC,CAAC,CAAA;YA8DpC,IAAI,CA7DC,QAAC,CAAQ,EAAC,IAAC,EAAK,IAAA,CAAK,KAAC,CAAK,IAAC,EAAK,MAAA,EAAQ,IAAA,CAAK,KAAC,CAAK,MAAC,EAAO,MAAA,EAAQ,IAAA,CAAK,KAAC,CAAK,MAAC,EAAM,CAAC,CAAC;QA8D/F,CAAC;QA7DC,IAAA,CAAK,CAAA;YA8DL,IAAI,CA7DC,QAAC,CAAQ,IAAC,CAAI,CAAC;QA8DtB,CAAC;IACH,CAAC;AACH,CAAC;AA1LC;IAAC,KAZC,EAAK;;+CAAA;AAiBP;IAAC,KAZC,EAAK;;+CAAA;AAiBP;IAAC,KAZC,EAAK;;8CAAA;AAiBP;IAAC,KAZC,EAAK;;+CAAA;AAiBP;IAAC,KAZC,EAAK;;iDAAA;AAiBP;IAAC,KAZC,EAAK;;iDAAA;AAiBP;IAAC,KAZC,EAAK;;qDAAA;AAiBP;IAAC,KAZC,EAAK;;2CAAA;AAlKT;IAZC,SAAA,CAAA;QAaC,QAAQ,EAAE,gBAAgB;QAC1B,MAAM,EAAE,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAoCR,CAAC;QACF,QAAQ,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAyFT;QACD,SAAS,EAAE,CAAC,6BAA6B,CAAC;KAC3C,CAAC;;iBAAA;AAqMF;IACA,sBAAsB;IACtB,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC;IACjC,uBAAuB;IACvB,aAAa,CAAC,SAAS,CAAC,KAAK,CAAC;IAC9B;;;OAGG;IACH,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC;IACjC;;;OAGG;IACH,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC;IACjC;;;OAGG;IACH,aAAa,CAAC,SAAS,CAAC,OAAO,CAAC;IAChC;;;OAGG;IACH,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC;IACjC;;;OAGG;IACH,aAAa,CAAC,SAAS,CAAC,UAAU,CAAC;IACnC;;;OAGG;IACH,aAAa,CAAC,SAAS,CAAC,UAAU,CAAC;IACnC;;;OAGG;IACH,aAAa,CAAC,SAAS,CAAC,cAAc,CAAC;IACvC;;;OAGG;IACH,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC;IAC7B,gCAAgC;IAChC,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC;IACjC,+BAA+B;IAC/B,aAAa,CAAC,SAAS,CAAC,SAAS,CAAC;AAClC,CAAC","file":"timepicker.js","sourceRoot":"","sourcesContent":["import {Component, Input, forwardRef, OnChanges, SimpleChanges} from '@angular/core';\nconst Component: NeverTypeCheckMe = Component;  /* local alias for Closure JSDoc */\nconst Input: NeverTypeCheckMe = Input;  /* local alias for Closure JSDoc */\nconst forwardRef: NeverTypeCheckMe = forwardRef;  /* local alias for Closure JSDoc */\nconst OnChanges: NeverTypeCheckMe = OnChanges;  /* local alias for Closure JSDoc */\nconst SimpleChanges: NeverTypeCheckMe = SimpleChanges;  /* local alias for Closure JSDoc */\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nconst ControlValueAccessor: NeverTypeCheckMe = ControlValueAccessor;  /* local alias for Closure JSDoc */\nconst NG_VALUE_ACCESSOR: NeverTypeCheckMe = NG_VALUE_ACCESSOR;  /* local alias for Closure JSDoc */\n\nimport {isNumber, padNumber, toInteger, isDefined} from '../util/util';\nconst isNumber: NeverTypeCheckMe = isNumber;  /* local alias for Closure JSDoc */\nconst padNumber: NeverTypeCheckMe = padNumber;  /* local alias for Closure JSDoc */\nconst toInteger: NeverTypeCheckMe = toInteger;  /* local alias for Closure JSDoc */\nconst isDefined: NeverTypeCheckMe = isDefined;  /* local alias for Closure JSDoc */\nimport {NgbTime} from './ngb-time';\nconst NgbTime: NeverTypeCheckMe = NgbTime;  /* local alias for Closure JSDoc */\nimport {NgbTimepickerConfig} from './timepicker-config';\nconst NgbTimepickerConfig: NeverTypeCheckMe = NgbTimepickerConfig;  /* local alias for Closure JSDoc */\n\nconst /** @type {?} */ NGB_TIMEPICKER_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => NgbTimepicker),\n  multi: true\n};\n/**\n * A lightweight & configurable timepicker directive.\n */\n@Component({\n  selector: 'ngb-timepicker',\n  styles: [`\n    .chevron::before {\n      border-style: solid;\n      border-width: 0.29em 0.29em 0 0;\n      content: '';\n      display: inline-block;\n      height: 0.69em;\n      left: 0.05em;\n      position: relative;\n      top: 0.15em;\n      transform: rotate(-45deg);\n      -webkit-transform: rotate(-45deg);\n      -ms-transform: rotate(-45deg);\n      vertical-align: middle;\n      width: 0.71em;\n    }\n\n    .chevron.bottom:before {\n      top: -.3em;\n      -webkit-transform: rotate(135deg);\n      -ms-transform: rotate(135deg);\n      transform: rotate(135deg);\n    }\n\n    .btn-link {\n      outline: 0;\n    }\n\n    .btn-link.disabled {\n      cursor: not-allowed;\n      opacity: .65;\n    }\n\n    input {\n      text-align: center;\n    }\n  `],\n  template: `\n     <fieldset [disabled]=\"disabled\" [class.disabled]=\"disabled\">\n      <table>\n        <tr *ngIf=\"spinners\">\n          <td class=\"text-center\">\n            <button type=\"button\" class=\"btn-link\" (click)=\"changeHour(hourStep)\"\n              [disabled]=\"disabled\" [class.disabled]=\"disabled\">\n              <span class=\"chevron\"></span>\n            </button>\n          </td>\n          <td>&nbsp;</td>\n          <td class=\"text-center\">\n            <button type=\"button\" class=\"btn-link\" (click)=\"changeMinute(minuteStep)\"\n              [disabled]=\"disabled\" [class.disabled]=\"disabled\">\n                <span class=\"chevron\"></span>\n            </button>\n          </td>\n          <template [ngIf]=\"seconds\">\n            <td>&nbsp;</td>\n            <td class=\"text-center\">\n              <button type=\"button\" class=\"btn-link\" (click)=\"changeSecond(secondStep)\"\n                [disabled]=\"disabled\" [class.disabled]=\"disabled\">\n                <span class=\"chevron\"></span>\n              </button>\n            </td>\n          </template>\n          <template [ngIf]=\"meridian\">\n            <td>&nbsp;</td>\n            <td>&nbsp;</td>\n          </template>\n        </tr>\n        <tr>\n          <td>\n            <input type=\"text\" class=\"form-control\" [ngClass]=\"setFormControlSize()\" maxlength=\"2\" size=\"2\" placeholder=\"HH\"\n              [value]=\"formatHour(model?.hour)\" (change)=\"updateHour($event.target.value)\"\n              [readonly]=\"readonlyInputs\" [disabled]=\"disabled\">\n          </td>\n          <td>&nbsp;:&nbsp;</td>\n          <td>\n            <input type=\"text\" class=\"form-control\" [ngClass]=\"setFormControlSize()\" maxlength=\"2\" size=\"2\" placeholder=\"MM\"\n              [value]=\"formatMinSec(model?.minute)\" (change)=\"updateMinute($event.target.value)\"\n              [readonly]=\"readonlyInputs\" [disabled]=\"disabled\">\n          </td>\n          <template [ngIf]=\"seconds\">\n            <td>&nbsp;:&nbsp;</td>\n            <td>\n              <input type=\"text\" class=\"form-control\" [ngClass]=\"setFormControlSize()\" maxlength=\"2\" size=\"2\" placeholder=\"SS\"\n                [value]=\"formatMinSec(model?.second)\" (change)=\"updateSecond($event.target.value)\"\n                [readonly]=\"readonlyInputs\" [disabled]=\"disabled\">\n            </td>\n          </template>\n          <template [ngIf]=\"meridian\">\n            <td>&nbsp;&nbsp;</td>\n            <td>\n              <button type=\"button\" class=\"btn btn-outline-primary\" [ngClass]=\"setMeridanSize()\"\n                (click)=\"toggleMeridian()\">{{model.hour >= 12 ? 'PM' : 'AM'}}</button>\n            </td>\n          </template>\n        </tr>\n        <tr *ngIf=\"spinners\">\n          <td class=\"text-center\">\n            <button type=\"button\" class=\"btn-link\" (click)=\"changeHour(-hourStep)\"\n              [disabled]=\"disabled\" [class.disabled]=\"disabled\">\n              <span class=\"chevron bottom\"></span>\n            </button>\n          </td>\n          <td>&nbsp;</td>\n          <td class=\"text-center\">\n            <button type=\"button\" class=\"btn-link\" (click)=\"changeMinute(-minuteStep)\"\n              [disabled]=\"disabled\" [class.disabled]=\"disabled\">\n              <span class=\"chevron bottom\"></span>\n            </button>\n          </td>\n          <template [ngIf]=\"seconds\">\n            <td>&nbsp;</td>\n            <td class=\"text-center\">\n              <button type=\"button\" class=\"btn-link\" (click)=\"changeSecond(-secondStep)\"\n                [disabled]=\"disabled\" [class.disabled]=\"disabled\">\n                <span class=\"chevron bottom\"></span>\n              </button>\n            </td>\n          </template>\n          <template [ngIf]=\"meridian\">\n            <td>&nbsp;</td>\n            <td>&nbsp;</td>\n          </template>\n        </tr>\n      </table>\n    </fieldset>\n  `,\n  providers: [NGB_TIMEPICKER_VALUE_ACCESSOR]\n})\nexport class NgbTimepicker implements ControlValueAccessor,\n    OnChanges {\n  disabled: boolean;\n  model: NgbTime;\n\n  /**\n   * Whether to display 12H or 24H mode.\n   */\n  @Input() meridian: boolean;\n\n  /**\n   * Whether to display the spinners above and below the inputs.\n   */\n  @Input() spinners: boolean;\n\n  /**\n   * Whether to display seconds input.\n   */\n  @Input() seconds: boolean;\n\n  /**\n   * Number of hours to increase or decrease when using a button.\n   */\n  @Input() hourStep: number;\n\n  /**\n   * Number of minutes to increase or decrease when using a button.\n   */\n  @Input() minuteStep: number;\n\n  /**\n   * Number of seconds to increase or decrease when using a button.\n   */\n  @Input() secondStep: number;\n\n  /**\n   * To make timepicker readonly\n   */\n  @Input() readonlyInputs: boolean;\n\n  /**\n   * To set the size of the inputs and button\n   */\n  @Input() size: 'small' | 'medium' | 'large';\n/**\n * @param {!NgbTimepickerConfig} config\n */\nconstructor(config: NgbTimepickerConfig) {\n    this.meridian = config.meridian;\n    this.spinners = config.spinners;\n    this.seconds = config.seconds;\n    this.hourStep = config.hourStep;\n    this.minuteStep = config.minuteStep;\n    this.secondStep = config.secondStep;\n    this.disabled = config.disabled;\n    this.readonlyInputs = config.readonlyInputs;\n    this.size = config.size;\n  }\n\n  onChange = (_: any) => {};\n  onTouched = () => {};\n/**\n * @param {?} value\n * @return {void}\n */\nwriteValue(value) {\n    this.model = value ? new NgbTime(value.hour, value.minute, value.second) : new NgbTime();\n    if (!this.seconds && (!value || !isNumber(value.second))) {\n      this.model.second = 0;\n    }\n  }\n/**\n * @param {function(?): ?} fn\n * @return {void}\n */\nregisterOnChange(fn: (value: any) => any): void { this.onChange = fn; }\n/**\n * @param {function(): ?} fn\n * @return {void}\n */\nregisterOnTouched(fn: () => any): void { this.onTouched = fn; }\n/**\n * @param {boolean} isDisabled\n * @return {void}\n */\nsetDisabledState(isDisabled: boolean) { this.disabled = isDisabled; }\n/**\n * @param {number} step\n * @return {void}\n */\nchangeHour(step: number) {\n    this.model.changeHour(step);\n    this.propagateModelChange();\n  }\n/**\n * @param {number} step\n * @return {void}\n */\nchangeMinute(step: number) {\n    this.model.changeMinute(step);\n    this.propagateModelChange();\n  }\n/**\n * @param {number} step\n * @return {void}\n */\nchangeSecond(step: number) {\n    this.model.changeSecond(step);\n    this.propagateModelChange();\n  }\n/**\n * @param {string} newVal\n * @return {void}\n */\nupdateHour(newVal: string) {\n    this.model.updateHour(toInteger(newVal));\n    this.propagateModelChange();\n  }\n/**\n * @param {string} newVal\n * @return {void}\n */\nupdateMinute(newVal: string) {\n    this.model.updateMinute(toInteger(newVal));\n    this.propagateModelChange();\n  }\n/**\n * @param {string} newVal\n * @return {void}\n */\nupdateSecond(newVal: string) {\n    this.model.updateSecond(toInteger(newVal));\n    this.propagateModelChange();\n  }\n/**\n * @return {void}\n */\ntoggleMeridian() {\n    if (this.meridian) {\n      this.changeHour(12);\n    }\n  }\n/**\n * @param {number} value\n * @return {string}\n */\nformatHour(value: number) {\n    if (isNumber(value)) {\n      if (this.meridian) {\n        return padNumber(value % 12 === 0 ? 12 : value % 12);\n      } else {\n        return padNumber(value % 24);\n      }\n    } else {\n      return padNumber(NaN);\n    }\n  }\n/**\n * @param {number} value\n * @return {string}\n */\nformatMinSec(value: number) { return padNumber(value); }\n/**\n * @return {?}\n */\nsetFormControlSize() { return {'form-control-sm': this.size === 'small', 'form-control-lg': this.size === 'large'}; }\n/**\n * @return {?}\n */\nsetMeridanSize() { return {'btn-sm': this.size === 'small', 'btn-lg': this.size === 'large'}; }\n/**\n * @param {!SimpleChanges} changes\n * @return {void}\n */\nngOnChanges(changes: SimpleChanges): void {\n    if (changes['seconds'] && !this.seconds && this.model && !isNumber(this.model.second)) {\n      this.model.second = 0;\n      this.propagateModelChange(false);\n    }\n  }\n/**\n * @param {boolean=} touched\n * @return {void}\n */\nprivate propagateModelChange(touched = true) {\n    if (touched) {\n      this.onTouched();\n    }\n    if (this.model.isValid(this.seconds)) {\n      this.onChange({hour: this.model.hour, minute: this.model.minute, second: this.model.second});\n    } else {\n      this.onChange(null);\n    }\n  }\n}\n\nfunction NgbTimepicker_tsickle_Closure_declarations() {\n/** @type {boolean} */\nNgbTimepicker.prototype.disabled;\n/** @type {!NgbTime} */\nNgbTimepicker.prototype.model;\n/**\n * Whether to display 12H or 24H mode.\n * @type {boolean}\n */\nNgbTimepicker.prototype.meridian;\n/**\n * Whether to display the spinners above and below the inputs.\n * @type {boolean}\n */\nNgbTimepicker.prototype.spinners;\n/**\n * Whether to display seconds input.\n * @type {boolean}\n */\nNgbTimepicker.prototype.seconds;\n/**\n * Number of hours to increase or decrease when using a button.\n * @type {number}\n */\nNgbTimepicker.prototype.hourStep;\n/**\n * Number of minutes to increase or decrease when using a button.\n * @type {number}\n */\nNgbTimepicker.prototype.minuteStep;\n/**\n * Number of seconds to increase or decrease when using a button.\n * @type {number}\n */\nNgbTimepicker.prototype.secondStep;\n/**\n * To make timepicker readonly\n * @type {boolean}\n */\nNgbTimepicker.prototype.readonlyInputs;\n/**\n * To set the size of the inputs and button\n * @type {string}\n */\nNgbTimepicker.prototype.size;\n/** @type {function(?): void} */\nNgbTimepicker.prototype.onChange;\n/** @type {function(): void} */\nNgbTimepicker.prototype.onTouched;\n}\n\n"]}