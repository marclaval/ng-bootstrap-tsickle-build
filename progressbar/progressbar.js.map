{"version":3,"file":"progressbar.js","sourceRoot":"","sources":["../../../src/progressbar/progressbar.ts"],"names":[],"mappings":"OAAO,EAAC,SAAS,EAAE,KAAK,EAAE,uBAAuB,EAAC,MAAM,eAAe;OAChE,EAAC,eAAe,EAAC,MAAM,cAAc;OACrC,EAAC,oBAAoB,EAAC,MAAM,sBAAsB;AACzD;;GAEG;AACH;IA+BA;;OAEG;IACH,YAAY,MAA4B;QAPtC;;WAEG;QACF,UAAK,GAAG,CAAC,CAAC;QAKT,IAAI,CAAC,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC;QACtB,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;QAChC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC9B,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;QACxB,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC;IACpC,CAAC;IACH;;OAEG;IACH,QAAQ,KAAK,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC5D;;OAEG;IACH,eAAe,KAAK,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,QAAQ,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;AA4B9D,CAAC;AA3BM,yBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACxB,QAAQ,EAAE,iBAAiB;gBAC3B,eAAe,EAAE,uBAAuB,CAAC,MAAM;gBAC/C,QAAQ,EAAE;;;;;;;;GAQT;aACF,EAAG,EAAE;CACL,CAAC;AACF,kBAAkB;AACX,6BAAc,GAAmE,MAAM;IAC9F,EAAC,IAAI,EAAE,oBAAoB,GAAG;CAC7B,CAAC;AACK,6BAAc,GAA2C;IAChE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IACzB,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC9B,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC7B,WAAW,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC/B,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC1B,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;CAC1B,CACA;AAED;IACA,gBAAgB;IAChB,cAAc,CAAC,UAAU,CAAC;IAC1B;;;OAGG;IACH,cAAc,CAAC,cAAc,CAAC;IAC9B,gBAAgB;IAChB,cAAc,CAAC,cAAc,CAAC;IAC9B;;;OAGG;IACH,cAAc,CAAC,SAAS,CAAC,GAAG,CAAC;IAC7B;;;;OAIG;IACH,cAAc,CAAC,SAAS,CAAC,QAAQ,CAAC;IAClC;;;OAGG;IACH,cAAc,CAAC,SAAS,CAAC,OAAO,CAAC;IACjC;;;OAGG;IACH,cAAc,CAAC,SAAS,CAAC,SAAS,CAAC;IACnC;;;OAGG;IACH,cAAc,CAAC,SAAS,CAAC,IAAI,CAAC;IAC9B;;;OAGG;IACH,cAAc,CAAC,SAAS,CAAC,KAAK,CAAC;AAC/B,CAAC","sourcesContent":["import {Component, Input, ChangeDetectionStrategy} from '@angular/core/index';\nimport {getValueInRange} from '../util/util';\nimport {NgbProgressbarConfig} from './progressbar-config';\n/**\n * Directive that can be used to provide feedback on the progress of a workflow or an action.\n */\nexport class NgbProgressbar {\n  /**\n   * Maximal value to be displayed in the progressbar.\n   */\n   max: number;\n\n  /**\n   * A flag indicating if the stripes of the progress bar should be animated. Takes effect only for browsers\n   * supporting CSS3 animations, and if striped is true.\n   */\n   animated: boolean;\n\n  /**\n   * A flag indicating if a progress bar should be displayed as striped.\n   */\n   striped: boolean;\n\n  /**\n   * A flag indicating if the current percentage value should be shown.\n   */\n   showValue: boolean;\n\n  /**\n   * Type of progress bar, can be one of \"success\", \"info\", \"warning\" or \"danger\".\n   */\n   type: string;\n\n  /**\n   * Current value to be displayed in the progressbar. Should be smaller or equal to \"max\" value.\n   */\n   value = 0;\n/**\n * @param {?} config\n */\nconstructor(config: NgbProgressbarConfig) {\n    this.max = config.max;\n    this.animated = config.animated;\n    this.striped = config.striped;\n    this.type = config.type;\n    this.showValue = config.showValue;\n  }\n/**\n * @return {?}\n */\ngetValue() { return getValueInRange(this.value, this.max); }\n/**\n * @return {?}\n */\ngetPercentValue() { return 100 * this.getValue() / this.max; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'ngb-progressbar',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <div class=\"progress\">\n      <div class=\"progress-bar{{type ? ' bg-' + type : ''}}{{animated ? ' progress-bar-animated' : ''}}{{striped ?\n    ' progress-bar-striped' : ''}}\" role=\"progressbar\" [style.width.%]=\"getPercentValue()\"\n    [attr.aria-valuenow]=\"getValue()\" aria-valuemin=\"0\" [attr.aria-valuemax]=\"max\">\n        <span *ngIf=\"showValue\">{{getPercentValue()}}%</span><ng-content></ng-content>\n      </div>\n    </div>\n  `\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgbProgressbarConfig, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'max': [{ type: Input },],\n'animated': [{ type: Input },],\n'striped': [{ type: Input },],\n'showValue': [{ type: Input },],\n'type': [{ type: Input },],\n'value': [{ type: Input },],\n};\n}\n\nfunction NgbProgressbar_tsickle_Closure_declarations() {\n/** @type {?} */\nNgbProgressbar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgbProgressbar.ctorParameters;\n/** @type {?} */\nNgbProgressbar.propDecorators;\n/**\n * Maximal value to be displayed in the progressbar.\n * @type {?}\n */\nNgbProgressbar.prototype.max;\n/**\n * A flag indicating if the stripes of the progress bar should be animated. Takes effect only for browsers\n * supporting CSS3 animations, and if striped is true.\n * @type {?}\n */\nNgbProgressbar.prototype.animated;\n/**\n * A flag indicating if a progress bar should be displayed as striped.\n * @type {?}\n */\nNgbProgressbar.prototype.striped;\n/**\n * A flag indicating if the current percentage value should be shown.\n * @type {?}\n */\nNgbProgressbar.prototype.showValue;\n/**\n * Type of progress bar, can be one of \"success\", \"info\", \"warning\" or \"danger\".\n * @type {?}\n */\nNgbProgressbar.prototype.type;\n/**\n * Current value to be displayed in the progressbar. Should be smaller or equal to \"max\" value.\n * @type {?}\n */\nNgbProgressbar.prototype.value;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
