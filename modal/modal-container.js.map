{"version":3,"file":"modal-container.js","sourceRoot":"","sources":["../../../src/modal/modal-container.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Directive,\n  Injector,\n  ReflectiveInjector,\n  Renderer,\n  TemplateRef,\n  ViewContainerRef,\n  ComponentFactoryResolver,\n  ComponentFactory,\n  ComponentRef\n} from '@angular/core/index';\n\nimport {isDefined, isString} from '../util/util';\nimport {ContentRef} from '../util/popup';\n\nimport {NgbModalBackdrop} from './modal-backdrop';\nimport {NgbModalWindow} from './modal-window';\nimport {NgbModalStack} from './modal-stack';\nimport {NgbActiveModal, NgbModalRef} from './modal-ref';\nexport class NgbModalContainer {\nprivate _backdropFactory: ComponentFactory<NgbModalBackdrop>;\nprivate _windowFactory: ComponentFactory<NgbModalWindow>;\n/**\n * @param {?} _injector\n * @param {?} _renderer\n * @param {?} _viewContainerRef\n * @param {?} _componentFactoryResolver\n * @param {?} ngbModalStack\n */\nconstructor(\nprivate _injector: Injector,\nprivate _renderer: Renderer,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _componentFactoryResolver: ComponentFactoryResolver, ngbModalStack: NgbModalStack) {\n    this._backdropFactory = _componentFactoryResolver.resolveComponentFactory(NgbModalBackdrop);\n    this._windowFactory = _componentFactoryResolver.resolveComponentFactory(NgbModalWindow);\n\n    ngbModalStack.registerContainer(this);\n  }\n/**\n * @param {?} moduleCFR\n * @param {?} contentInjector\n * @param {?} content\n * @param {?} options\n * @return {?}\n */\nopen(moduleCFR: ComponentFactoryResolver, contentInjector: Injector, content: string | TemplateRef<any>, options):\n      NgbModalRef {\n    const /** @type {?} */ activeModal = new NgbActiveModal();\n    const /** @type {?} */ contentRef = this._getContentRef(moduleCFR, contentInjector, content, activeModal);\n    let /** @type {?} */ windowCmptRef: ComponentRef<NgbModalWindow>;\n    let /** @type {?} */ backdropCmptRef: ComponentRef<NgbModalBackdrop>;\n    let /** @type {?} */ ngbModalRef: NgbModalRef;\n\n    if (options.backdrop !== false) {\n      backdropCmptRef = this._viewContainerRef.createComponent(this._backdropFactory, 0, this._injector);\n    }\n\n    windowCmptRef = this._viewContainerRef.createComponent(\n        this._windowFactory, this._viewContainerRef.length - 1, this._injector, contentRef.nodes);\n\n    ngbModalRef = new NgbModalRef(this._viewContainerRef, windowCmptRef, contentRef, backdropCmptRef);\n\n    activeModal.close = (result: any) => { ngbModalRef.close(result); };\n    activeModal.dismiss = (reason: any) => { ngbModalRef.dismiss(reason); };\n\n    this._applyWindowOptions(windowCmptRef.instance, options);\n\n    return ngbModalRef;\n  }\n/**\n * @param {?} windowInstance\n * @param {?} options\n * @return {?}\n */\nprivate _applyWindowOptions(windowInstance: NgbModalWindow, options: Object): void {\n    ['backdrop', 'keyboard', 'size', 'windowClass'].forEach((optionName: string) => {\n      if (isDefined(options[optionName])) {\n        windowInstance[optionName] = options[optionName];\n      }\n    });\n  }\n/**\n * @param {?} moduleCFR\n * @param {?} contentInjector\n * @param {?} content\n * @param {?} context\n * @return {?}\n */\nprivate _getContentRef(\n      moduleCFR: ComponentFactoryResolver, contentInjector: Injector, content: any,\n      context: NgbActiveModal): ContentRef {\n    if (!content) {\n      return new ContentRef([]);\n    } else if (content instanceof TemplateRef) {\n      const /** @type {?} */ viewRef = this._viewContainerRef.createEmbeddedView( /** @type {?} */((<TemplateRef<NgbActiveModal>>content)), context);\n      return new ContentRef([viewRef.rootNodes], viewRef);\n    } else if (isString(content)) {\n      return new ContentRef([[this._renderer.createText(null, `${content}`)]]);\n    } else {\n      const /** @type {?} */ contentCmptFactory = moduleCFR.resolveComponentFactory(content);\n      const /** @type {?} */ modalContentInjector =\n          ReflectiveInjector.resolveAndCreate([{provide: NgbActiveModal, useValue: context}], contentInjector);\n      const /** @type {?} */ componentRef = this._viewContainerRef.createComponent(contentCmptFactory, 0, modalContentInjector);\n      return new ContentRef([[componentRef.location.nativeElement]], componentRef.hostView, componentRef);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: 'template[ngbModalContainer]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Injector, },\n{type: Renderer, },\n{type: ViewContainerRef, },\n{type: ComponentFactoryResolver, },\n{type: NgbModalStack, },\n];\n}\n\nfunction NgbModalContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nNgbModalContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgbModalContainer.ctorParameters;\n/** @type {?} */\nNgbModalContainer.prototype._backdropFactory;\n/** @type {?} */\nNgbModalContainer.prototype._windowFactory;\n/** @type {?} */\nNgbModalContainer.prototype._injector;\n/** @type {?} */\nNgbModalContainer.prototype._renderer;\n/** @type {?} */\nNgbModalContainer.prototype._viewContainerRef;\n/** @type {?} */\nNgbModalContainer.prototype._componentFactoryResolver;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}