{"version":3,"sources":["../../../src/datepicker/datepicker-service.ts"],"names":[],"mappings":"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","file":"datepicker-service.js","sourceRoot":"","sourcesContent":["import {NgbCalendar} from './ngb-calendar';\nconst NgbCalendar: NeverTypeCheckMe = NgbCalendar;  /* local alias for Closure JSDoc */\nimport {NgbDate} from './ngb-date';\nconst NgbDate: NeverTypeCheckMe = NgbDate;  /* local alias for Closure JSDoc */\nimport {MonthViewModel, DayViewModel} from './datepicker-view-model';\nconst MonthViewModel: NeverTypeCheckMe = MonthViewModel;  /* local alias for Closure JSDoc */\nconst DayViewModel: NeverTypeCheckMe = DayViewModel;  /* local alias for Closure JSDoc */\nimport {Injectable} from '@angular/core';\nconst Injectable: NeverTypeCheckMe = Injectable;  /* local alias for Closure JSDoc */\n@Injectable()\nexport class NgbDatepickerService {\n/**\n * @param {!NgbCalendar} _calendar\n */\nconstructor(private _calendar: NgbCalendar) {}\n/**\n * @param {!NgbDate} date\n * @param {!NgbDate} minDate\n * @param {!NgbDate} maxDate\n * @param {number} firstDayOfWeek\n * @param {function(!NgbDate, {month: number, year: number}): boolean} markDisabled\n * @return {{firstDate: !NgbDate, number: number, year: number, weeks: !Array<{number: number, days: !Array<{date: !NgbDate, disabled: boolean}>}>, weekdays: !Array<number>}}\n */\ngenerateMonthViewModel(\n      date: NgbDate, minDate: NgbDate, maxDate: NgbDate, firstDayOfWeek: number,\n      markDisabled: (date: NgbDate, current: {month: number, year: number}) => boolean): MonthViewModel {\n    const /** @type {{firstDate: !NgbDate, number: number, year: number, weeks: !Array<{number: number, days: !Array<{date: !NgbDate, disabled: boolean}>}>, weekdays: !Array<number>}} */ month: MonthViewModel = {firstDate: null, number: date.month, year: date.year, weeks: [], weekdays: []};\n\n    date = this._getFirstViewDate(date, firstDayOfWeek);\n\n    // month has weeks\n    for (let /** @type {number} */ w = 0; w < this._calendar.getWeeksPerMonth(); w++) {\n      const /** @type {!Array<{date: !NgbDate, disabled: boolean}>} */ days: DayViewModel[] = [];\n\n      // week has days\n      for (let /** @type {number} */ d = 0; d < this._calendar.getDaysPerWeek(); d++) {\n        if (w === 0) {\n          month.weekdays.push(this._calendar.getWeekday(date));\n        }\n\n        const /** @type {!NgbDate} */ newDate = new NgbDate(date.year, date.month, date.day);\n\n        let /** @type {boolean} */ disabled = (minDate && newDate.before(minDate)) || (maxDate && newDate.after(maxDate));\n        if (!disabled && markDisabled) {\n          disabled = markDisabled(newDate, {month: month.number, year: month.year});\n        }\n\n        // saving first date of the month\n        if (month.firstDate === null && date.month === month.number) {\n          month.firstDate = newDate;\n        }\n\n        days.push({date: newDate, disabled: disabled});\n\n        date = this._calendar.getNext(date);\n      }\n\n      month.weeks.push(\n          {number: this._calendar.getWeekNumber(days.map(day => NgbDate.from(day.date)), firstDayOfWeek), days: days});\n    }\n\n    return month;\n  }\n/**\n * @param {{year: number, month: number, day: number}} date\n * @param {!NgbDate=} defaultValue\n * @return {!NgbDate}\n */\ntoValidDate(date: {year: number, month: number, day?: number}, defaultValue?: NgbDate): NgbDate {\n    const /** @type {!NgbDate} */ ngbDate = NgbDate.from(date);\n    if (defaultValue === undefined) {\n      defaultValue = this._calendar.getToday();\n    }\n    return this._calendar.isValid(ngbDate) ? ngbDate : defaultValue;\n  }\n/**\n * @param {!NgbDate} date\n * @param {number} firstDayOfWeek\n * @return {!NgbDate}\n */\nprivate _getFirstViewDate(date: NgbDate, firstDayOfWeek: number): NgbDate {\n    const /** @type {number} */ currentMonth = date.month;\n    let /** @type {!NgbDate} */ today = new NgbDate(date.year, date.month, date.day);\n    let /** @type {!NgbDate} */ yesterday = this._calendar.getPrev(today);\n\n    const /** @type {function(): boolean} */ firstDayOfCurrentMonthIsAlsoFirstDayOfWeek =\n        () => { return today.month !== yesterday.month && firstDayOfWeek === this._calendar.getWeekday(today); };\n\n    const /** @type {function(): boolean} */ reachedTheFirstDayOfTheLastWeekOfPreviousMonth =\n        () => { return today.month !== currentMonth && firstDayOfWeek === this._calendar.getWeekday(today); };\n\n    // going back in time\n    while (!reachedTheFirstDayOfTheLastWeekOfPreviousMonth() && !firstDayOfCurrentMonthIsAlsoFirstDayOfWeek()) {\n      today = new NgbDate(yesterday.year, yesterday.month, yesterday.day);\n      yesterday = this._calendar.getPrev(yesterday);\n    }\n\n    return today;\n  }\n}\n\nfunction NgbDatepickerService_tsickle_Closure_declarations() {\n/** @type {!NgbCalendar} */\nNgbDatepickerService.prototype._calendar;\n}\n\n"]}