{"version":3,"file":"tabset.js","sourceRoot":"","sources":["../../../src/tabset/tabset.ts"],"names":[],"mappings":"OAAO,EACL,SAAS,EACT,KAAK,EACL,eAAe,EAEf,SAAS,EACT,WAAW,EACX,YAAY,EAEZ,MAAM,EACN,YAAY,EACb,MAAM,qBAAqB;OACrB,EAAC,eAAe,EAAC,MAAM,iBAAiB;AAE/C,IAAI,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC;AAChC;;GAEG;AACH;IACA;;OAEG;IACH,YAAmB,WAA6B;QAA7B,gBAAW,GAAX,WAAW,CAAkB;IAAG,CAAC;AAQpD,CAAC;AAPM,sBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAC,QAAQ,EAAE,uBAAuB,EAAC,EAAG,EAAE;CACjE,CAAC;AACF,kBAAkB;AACX,0BAAc,GAAmE,MAAM;IAC9F,EAAC,IAAI,EAAE,WAAW,GAAG;CACpB,CACA;AAED;IACA,gBAAgB;IAChB,WAAW,CAAC,UAAU,CAAC;IACvB;;;OAGG;IACH,WAAW,CAAC,cAAc,CAAC;IAC3B,gBAAgB;IAChB,WAAW,CAAC,SAAS,CAAC,WAAW,CAAC;AAClC,CAAC;AAED;;GAEG;AACH;IACA;;OAEG;IACH,YAAmB,WAA6B;QAA7B,gBAAW,GAAX,WAAW,CAAkB;IAAG,CAAC;AAQpD,CAAC;AAPM,wBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAC,QAAQ,EAAE,yBAAyB,EAAC,EAAG,EAAE;CACnE,CAAC;AACF,kBAAkB;AACX,4BAAc,GAAmE,MAAM;IAC9F,EAAC,IAAI,EAAE,WAAW,GAAG;CACpB,CACA;AAED;IACA,gBAAgB;IAChB,aAAa,CAAC,UAAU,CAAC;IACzB;;;OAGG;IACH,aAAa,CAAC,cAAc,CAAC;IAC7B,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,WAAW,CAAC;AACpC,CAAC;AAED;;GAEG;AACH;IAAA;QACE;;WAEG;QACF,OAAE,GAAW,WAAW,MAAM,EAAE,EAAE,CAAC;QAKpC;;WAEG;QACF,aAAQ,GAAG,KAAK,CAAC;IAiBpB,CAAC;AAAD,CAAC;AAbM,iBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAC,QAAQ,EAAE,SAAS,EAAC,EAAG,EAAE;CACnD,CAAC;AACF,kBAAkB;AACX,qBAAc,GAAmE,MAAM,EAC7F,CAAC;AACK,qBAAc,GAA2C;IAChE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IACxB,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC3B,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC9B,YAAY,EAAE,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,aAAa,EAAG,EAAE,EAAE;IAChE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,WAAW,EAAG,EAAE,EAAE;CAC3D,CACA;AAED;IACA,gBAAgB;IAChB,MAAM,CAAC,UAAU,CAAC;IAClB;;;OAGG;IACH,MAAM,CAAC,cAAc,CAAC;IACtB,gBAAgB;IAChB,MAAM,CAAC,cAAc,CAAC;IACtB;;;OAGG;IACH,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC;IACpB;;;OAGG;IACH,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC;IACvB;;;OAGG;IACH,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC;IAC1B,gBAAgB;IAChB,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC;IAC5B,gBAAgB;IAChB,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC;AAC1B,CAAC;AAsBD;;GAEG;AACH;IAsBA;;OAEG;IACH,YAAY,MAAuB;QAPjC;;WAEG;QACF,cAAS,GAAG,IAAI,YAAY,EAAqB,CAAC;QAKjD,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;QACxB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;IAChC,CAAC;IACH;;;;;OAKG;IACH,MAAM,CAAC,KAAa;QAChB,IAAI,gBAAgB,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAC3D,EAAE,CAAC,CAAC,WAAW,IAAI,CAAC,WAAW,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,KAAK,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;YAC7E,IAAI,gBAAgB,CAAC,gBAAgB,GAAG,KAAK,CAAC;YAE9C,IAAI,CAAC,SAAS,CAAC,IAAI,CACf,EAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,MAAM,EAAE,WAAW,CAAC,EAAE,EAAE,cAAc,EAAE,QAAQ,gBAAgB,GAAG,IAAI,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;YAE3G,EAAE,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC;gBACtB,IAAI,CAAC,QAAQ,GAAG,WAAW,CAAC,EAAE,CAAC;YACjC,CAAC;QACH,CAAC;IACH,CAAC;IACH;;OAEG;IACH,qBAAqB;QACjB,sEAAsE;QACtE,IAAI,gBAAgB,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACjE,IAAI,CAAC,QAAQ,GAAG,SAAS,GAAG,SAAS,CAAC,EAAE,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,GAAG,IAAI,CAAC,CAAC;IAC5F,CAAC;IACH;;;OAGG;IACK,WAAW,CAAC,EAAU;QAC1B,IAAI,gBAAgB,CAAC,UAAU,GAAa,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,GAAG,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;QACnF,MAAM,CAAC,UAAU,CAAC,MAAM,GAAG,UAAU,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;IAClD,CAAC;AAmCH,CAAC;AAlCM,oBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACxB,QAAQ,EAAE,YAAY;gBACtB,QAAQ,EAAE,WAAW;gBACrB,QAAQ,EAAE;;;;;;;;;;;;;;;;GAgBT;aACF,EAAG,EAAE;CACL,CAAC;AACF,kBAAkB;AACX,wBAAc,GAAmE,MAAM;IAC9F,EAAC,IAAI,EAAE,eAAe,GAAG;CACxB,CAAC;AACK,wBAAc,GAA2C;IAChE,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,eAAe,EAAE,IAAI,EAAE,CAAC,MAAM,EAAG,EAAE,EAAE;IACtD,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC9B,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC7B,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC1B,WAAW,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;CAC/B,CACA;AAED;IACA,gBAAgB;IAChB,SAAS,CAAC,UAAU,CAAC;IACrB;;;OAGG;IACH,SAAS,CAAC,cAAc,CAAC;IACzB,gBAAgB;IAChB,SAAS,CAAC,cAAc,CAAC;IACzB,gBAAgB;IAChB,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC;IACzB;;;OAGG;IACH,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC;IAC7B;;;OAGG;IACH,SAAS,CAAC,SAAS,CAAC,OAAO,CAAC;IAC5B;;;OAGG;IACH,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC;IACzB;;;OAGG;IACH,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC;AAC9B,CAAC","sourcesContent":["import {\n  Component,\n  Input,\n  ContentChildren,\n  QueryList,\n  Directive,\n  TemplateRef,\n  ContentChild,\n  AfterContentChecked,\n  Output,\n  EventEmitter\n} from '@angular/core/index';\nimport {NgbTabsetConfig} from './tabset-config';\n\nlet /** @type {?} */ nextId = 0;\n/**\n * This directive should be used to wrap tab titles that need to contain HTML markup or other directives.\n */\nexport class NgbTabTitle {\n/**\n * @param {?} templateRef\n */\nconstructor(public templateRef: TemplateRef<any>) {}\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: 'template[ngbTabTitle]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n];\n}\n\nfunction NgbTabTitle_tsickle_Closure_declarations() {\n/** @type {?} */\nNgbTabTitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgbTabTitle.ctorParameters;\n/** @type {?} */\nNgbTabTitle.prototype.templateRef;\n}\n\n/**\n * This directive must be used to wrap content to be displayed in a tab.\n */\nexport class NgbTabContent {\n/**\n * @param {?} templateRef\n */\nconstructor(public templateRef: TemplateRef<any>) {}\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: 'template[ngbTabContent]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n];\n}\n\nfunction NgbTabContent_tsickle_Closure_declarations() {\n/** @type {?} */\nNgbTabContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgbTabContent.ctorParameters;\n/** @type {?} */\nNgbTabContent.prototype.templateRef;\n}\n\n/**\n * A directive representing an individual tab.\n */\nexport class NgbTab {\n  /**\n   * Unique tab identifier. Must be unique for the entire document for proper accessibility support.\n   */\n   id: string = `ngb-tab-${nextId++}`;\n  /**\n   * Simple (string only) title. Use the \"NgbTabTitle\" directive for more complex use-cases.\n   */\n   title: string;\n  /**\n   * Allows toggling disabled state of a given state. Disabled tabs can't be selected.\n   */\n   disabled = false;\n\n   contentTpl: NgbTabContent;\n   titleTpl: NgbTabTitle;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: 'ngb-tab'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input },],\n'title': [{ type: Input },],\n'disabled': [{ type: Input },],\n'contentTpl': [{ type: ContentChild, args: [NgbTabContent, ] },],\n'titleTpl': [{ type: ContentChild, args: [NgbTabTitle, ] },],\n};\n}\n\nfunction NgbTab_tsickle_Closure_declarations() {\n/** @type {?} */\nNgbTab.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgbTab.ctorParameters;\n/** @type {?} */\nNgbTab.propDecorators;\n/**\n * Unique tab identifier. Must be unique for the entire document for proper accessibility support.\n * @type {?}\n */\nNgbTab.prototype.id;\n/**\n * Simple (string only) title. Use the \"NgbTabTitle\" directive for more complex use-cases.\n * @type {?}\n */\nNgbTab.prototype.title;\n/**\n * Allows toggling disabled state of a given state. Disabled tabs can't be selected.\n * @type {?}\n */\nNgbTab.prototype.disabled;\n/** @type {?} */\nNgbTab.prototype.contentTpl;\n/** @type {?} */\nNgbTab.prototype.titleTpl;\n}\n\n\n/**\n * The payload of the change event fired right before the tab change\n */\nexport interface NgbTabChangeEvent {\n  /**\n   * Id of the currently active tab\n   */\n  activeId: string;\n\n  /**\n   * Id of the newly selected tab\n   */\n  nextId: string;\n\n  /**\n   * Function that will prevent tab switch if called\n   */\n  preventDefault: () => void;\n}\n/**\n * A component that makes it easy to create tabbed interface.\n */\nexport class NgbTabset implements AfterContentChecked {\n   tabs: QueryList<NgbTab>;\n\n  /**\n   * An identifier of an initially selected (active) tab. Use the \"select\" method to switch a tab programmatically.\n   */\n   activeId: string;\n\n  /**\n   * The horizontal alignment of the nav with flexbox utilities. Can be one of 'start', 'center' or 'end'\n   */\n   justify: 'start' | 'center' | 'end';\n\n  /**\n   * Type of navigation to be used for tabs. Can be one of 'tabs' or 'pills'.\n   */\n   type: 'tabs' | 'pills';\n\n  /**\n   * A tab change event fired right before the tab selection happens. See NgbTabChangeEvent for payload details\n   */\n   tabChange = new EventEmitter<NgbTabChangeEvent>();\n/**\n * @param {?} config\n */\nconstructor(config: NgbTabsetConfig) {\n    this.type = config.type;\n    this.justify = config.justify;\n  }\n/**\n * Selects the tab with the given id and shows its associated pane.\n * Any other tab that was previously selected becomes unselected and its associated pane is hidden.\n * @param {?} tabId\n * @return {?}\n */\nselect(tabId: string) {\n    let /** @type {?} */ selectedTab = this._getTabById(tabId);\n    if (selectedTab && !selectedTab.disabled && this.activeId !== selectedTab.id) {\n      let /** @type {?} */ defaultPrevented = false;\n\n      this.tabChange.emit(\n          {activeId: this.activeId, nextId: selectedTab.id, preventDefault: () => { defaultPrevented = true; }});\n\n      if (!defaultPrevented) {\n        this.activeId = selectedTab.id;\n      }\n    }\n  }\n/**\n * @return {?}\n */\nngAfterContentChecked() {\n    // auto-correct activeId that might have been set incorrectly as input\n    let /** @type {?} */ activeTab = this._getTabById(this.activeId);\n    this.activeId = activeTab ? activeTab.id : (this.tabs.length ? this.tabs.first.id : null);\n  }\n/**\n * @param {?} id\n * @return {?}\n */\nprivate _getTabById(id: string): NgbTab {\n    let /** @type {?} */ tabsWithId: NgbTab[] = this.tabs.filter(tab => tab.id === id);\n    return tabsWithId.length ? tabsWithId[0] : null;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'ngb-tabset',\n  exportAs: 'ngbTabset',\n  template: `\n    <ul [class]=\"'nav nav-' + type + ' justify-content-' + justify\" role=\"tablist\">\n      <li class=\"nav-item\" *ngFor=\"let tab of tabs\">\n        <a [id]=\"tab.id\" class=\"nav-link\" [class.active]=\"tab.id === activeId\" [class.disabled]=\"tab.disabled\"\n          href (click)=\"!!select(tab.id)\" role=\"tab\" [attr.aria-controls]=\"tab.id + '-panel'\" [attr.aria-expanded]=\"tab.id === activeId\">\n          {{tab.title}}<template [ngTemplateOutlet]=\"tab.titleTpl?.templateRef\"></template>\n        </a>\n      </li>\n    </ul>\n    <div class=\"tab-content\">\n      <template ngFor let-tab [ngForOf]=\"tabs\">\n        <div class=\"tab-pane active\" *ngIf=\"tab.id === activeId\" role=\"tabpanel\" [attr.aria-labelledby]=\"tab.id\" id=\"{{tab.id}}-panel\">\n          <template [ngTemplateOutlet]=\"tab.contentTpl.templateRef\"></template>\n        </div>\n      </template>\n    </div>\n  `\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgbTabsetConfig, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'tabs': [{ type: ContentChildren, args: [NgbTab, ] },],\n'activeId': [{ type: Input },],\n'justify': [{ type: Input },],\n'type': [{ type: Input },],\n'tabChange': [{ type: Output },],\n};\n}\n\nfunction NgbTabset_tsickle_Closure_declarations() {\n/** @type {?} */\nNgbTabset.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgbTabset.ctorParameters;\n/** @type {?} */\nNgbTabset.propDecorators;\n/** @type {?} */\nNgbTabset.prototype.tabs;\n/**\n * An identifier of an initially selected (active) tab. Use the \"select\" method to switch a tab programmatically.\n * @type {?}\n */\nNgbTabset.prototype.activeId;\n/**\n * The horizontal alignment of the nav with flexbox utilities. Can be one of 'start', 'center' or 'end'\n * @type {?}\n */\nNgbTabset.prototype.justify;\n/**\n * Type of navigation to be used for tabs. Can be one of 'tabs' or 'pills'.\n * @type {?}\n */\nNgbTabset.prototype.type;\n/**\n * A tab change event fired right before the tab selection happens. See NgbTabChangeEvent for payload details\n * @type {?}\n */\nNgbTabset.prototype.tabChange;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}