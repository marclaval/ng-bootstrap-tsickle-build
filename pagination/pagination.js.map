{"version":3,"file":"pagination.js","sourceRoot":"","sources":["../../../src/pagination/pagination.ts"],"names":[],"mappings":"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","sourcesContent":["import {Component, EventEmitter, Input, Output, OnChanges, ChangeDetectionStrategy, SimpleChanges} from '@angular/core/index';\nimport {getValueInRange, isNumber} from '../util/util';\nimport {NgbPaginationConfig} from './pagination-config';\n/**\n * A directive that will take care of visualising a pagination bar and enable / disable buttons correctly!\n */\nexport class NgbPagination implements OnChanges {\n  pageCount = 0;\n  pages: number[] = [];\n\n  /**\n   * Whether to disable buttons from user input\n   */\n   disabled: boolean;\n\n  /**\n   *  Whether to show the \"First\" and \"Last\" page links\n   */\n   boundaryLinks: boolean;\n\n  /**\n   *  Whether to show the \"Next\" and \"Previous\" page links\n   */\n   directionLinks: boolean;\n\n  /**\n   *  Whether to show ellipsis symbols and first/last page numbers when maxSize > number of pages\n   */\n   ellipses: boolean;\n\n  /**\n   *  Whether to rotate pages when maxSize > number of pages.\n   *  Current page will be in the middle\n   */\n   rotate: boolean;\n\n  /**\n   *  Number of items in collection.\n   */\n   collectionSize: number;\n\n  /**\n   *  Maximum number of pages to display.\n   */\n   maxSize: number;\n\n  /**\n   *  Current page.\n   */\n   page = 0;\n\n  /**\n   *  Number of items per page.\n   */\n   pageSize: number;\n\n  /**\n   *  An event fired when the page is changed.\n   *  Event's payload equals to the newly selected page.\n   */\n   pageChange = new EventEmitter<number>(true);\n\n  /**\n   * Pagination display size: small or large\n   */\n   size: 'sm' | 'lg';\n/**\n * @param {?} config\n */\nconstructor(config: NgbPaginationConfig) {\n    this.disabled = config.disabled;\n    this.boundaryLinks = config.boundaryLinks;\n    this.directionLinks = config.directionLinks;\n    this.ellipses = config.ellipses;\n    this.maxSize = config.maxSize;\n    this.pageSize = config.pageSize;\n    this.rotate = config.rotate;\n    this.size = config.size;\n  }\n/**\n * @return {?}\n */\nhasPrevious(): boolean { return this.page > 1; }\n/**\n * @return {?}\n */\nhasNext(): boolean { return this.page < this.pageCount; }\n/**\n * @param {?} pageNumber\n * @return {?}\n */\nselectPage(pageNumber: number): void { this._updatePages(pageNumber); }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void { this._updatePages(this.page); }\n/**\n * \\@internal\n * @param {?} pageNumber\n * @return {?}\n */\nisEllipsis(pageNumber): boolean { return pageNumber === -1; }\n/**\n * Appends ellipses and first/last page number to the displayed pages\n * @param {?} start\n * @param {?} end\n * @return {?}\n */\nprivate _applyEllipses(start: number, end: number) {\n    if (this.ellipses) {\n      if (start > 0) {\n        if (start > 1) {\n          this.pages.unshift(-1);\n        }\n        this.pages.unshift(1);\n      }\n      if (end < this.pageCount) {\n        if (end < (this.pageCount - 1)) {\n          this.pages.push(-1);\n        }\n        this.pages.push(this.pageCount);\n      }\n    }\n  }\n/**\n * Rotates page numbers based on maxSize items visible.\n * Currently selected page stays in the middle:\n * \n * Ex. for selected page = 6:\n * [5,*6*,7] for maxSize = 3\n * [4,5,*6*,7] for maxSize = 4\n * @return {?}\n */\nprivate _applyRotation(): [number, number] {\n    let /** @type {?} */ start = 0;\n    let /** @type {?} */ end = this.pageCount;\n    let /** @type {?} */ leftOffset = Math.floor(this.maxSize / 2);\n    let /** @type {?} */ rightOffset = this.maxSize % 2 === 0 ? leftOffset - 1 : leftOffset;\n\n    if (this.page <= leftOffset) {\n      // very beginning, no rotation -> [0..maxSize]\n      end = this.maxSize;\n    } else if (this.pageCount - this.page < leftOffset) {\n      // very end, no rotation -> [len-maxSize..len]\n      start = this.pageCount - this.maxSize;\n    } else {\n      // rotate\n      start = this.page - leftOffset - 1;\n      end = this.page + rightOffset;\n    }\n\n    return [start, end];\n  }\n/**\n * Paginates page numbers based on maxSize items per page\n * @return {?}\n */\nprivate _applyPagination(): [number, number] {\n    let /** @type {?} */ page = Math.ceil(this.page / this.maxSize) - 1;\n    let /** @type {?} */ start = page * this.maxSize;\n    let /** @type {?} */ end = start + this.maxSize;\n\n    return [start, end];\n  }\n/**\n * @param {?} newPageNo\n * @return {?}\n */\nprivate _setPageInRange(newPageNo) {\n    const /** @type {?} */ prevPageNo = this.page;\n    this.page = getValueInRange(newPageNo, this.pageCount, 1);\n\n    if (this.page !== prevPageNo) {\n      this.pageChange.emit(this.page);\n    }\n  }\n/**\n * @param {?} newPage\n * @return {?}\n */\nprivate _updatePages(newPage: number) {\n    this.pageCount = Math.ceil(this.collectionSize / this.pageSize);\n\n    if (!isNumber(this.pageCount)) {\n      this.pageCount = 0;\n    }\n\n    // fill-in model needed to render pages\n    this.pages.length = 0;\n    for (let /** @type {?} */ i = 1; i <= this.pageCount; i++) {\n      this.pages.push(i);\n    }\n\n    // set page within 1..max range\n    this._setPageInRange(newPage);\n\n    // apply maxSize if necessary\n    if (this.maxSize > 0 && this.pageCount > this.maxSize) {\n      let /** @type {?} */ start = 0;\n      let /** @type {?} */ end = this.pageCount;\n\n      // either paginating or rotating page numbers\n      if (this.rotate) {\n        [start, end] = this._applyRotation();\n      } else {\n        [start, end] = this._applyPagination();\n      }\n\n      this.pages = this.pages.slice(start, end);\n\n      // adding ellipses\n      this._applyEllipses(start, end);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'ngb-pagination',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <nav>\n      <ul [class]=\"'pagination' + (size ? ' pagination-' + size : '')\">\n        <li *ngIf=\"boundaryLinks\" class=\"page-item\" \n          [class.disabled]=\"!hasPrevious() || disabled\">\n          <a aria-label=\"First\" class=\"page-link\" href (click)=\"!!selectPage(1)\" [attr.tabindex]=\"hasPrevious() ? null : '-1'\">\n            <span aria-hidden=\"true\">&laquo;&laquo;</span>\n            <span class=\"sr-only\">First</span>\n          </a>                \n        </li>\n      \n        <li *ngIf=\"directionLinks\" class=\"page-item\" \n          [class.disabled]=\"!hasPrevious() || disabled\">\n          <a aria-label=\"Previous\" class=\"page-link\" href (click)=\"!!selectPage(page-1)\" [attr.tabindex]=\"hasPrevious() ? null : '-1'\">\n            <span aria-hidden=\"true\">&laquo;</span>\n            <span class=\"sr-only\">Previous</span>\n          </a>\n        </li>\n        <li *ngFor=\"let pageNumber of pages\" class=\"page-item\" [class.active]=\"pageNumber === page\" \n          [class.disabled]=\"isEllipsis(pageNumber) || disabled\">\n          <a *ngIf=\"isEllipsis(pageNumber)\" class=\"page-link\">...</a>\n          <a *ngIf=\"!isEllipsis(pageNumber)\" class=\"page-link\" href (click)=\"!!selectPage(pageNumber)\">{{pageNumber}}</a>\n        </li>\n        <li *ngIf=\"directionLinks\" class=\"page-item\" [class.disabled]=\"!hasNext() || disabled\">\n          <a aria-label=\"Next\" class=\"page-link\" href (click)=\"!!selectPage(page+1)\" [attr.tabindex]=\"hasNext() ? null : '-1'\">\n            <span aria-hidden=\"true\">&raquo;</span>\n            <span class=\"sr-only\">Next</span>\n          </a>\n        </li>\n        \n        <li *ngIf=\"boundaryLinks\" class=\"page-item\" [class.disabled]=\"!hasNext() || disabled\">\n          <a aria-label=\"Last\" class=\"page-link\" href (click)=\"!!selectPage(pageCount)\" [attr.tabindex]=\"hasNext() ? null : '-1'\">\n            <span aria-hidden=\"true\">&raquo;&raquo;</span>\n            <span class=\"sr-only\">Last</span>\n          </a>                \n        </li>        \n      </ul>\n    </nav>\n  `\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgbPaginationConfig, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n'boundaryLinks': [{ type: Input },],\n'directionLinks': [{ type: Input },],\n'ellipses': [{ type: Input },],\n'rotate': [{ type: Input },],\n'collectionSize': [{ type: Input },],\n'maxSize': [{ type: Input },],\n'page': [{ type: Input },],\n'pageSize': [{ type: Input },],\n'pageChange': [{ type: Output },],\n'size': [{ type: Input },],\n};\n}\n\nfunction NgbPagination_tsickle_Closure_declarations() {\n/** @type {?} */\nNgbPagination.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgbPagination.ctorParameters;\n/** @type {?} */\nNgbPagination.propDecorators;\n/** @type {?} */\nNgbPagination.prototype.pageCount;\n/** @type {?} */\nNgbPagination.prototype.pages;\n/**\n * Whether to disable buttons from user input\n * @type {?}\n */\nNgbPagination.prototype.disabled;\n/**\n *  Whether to show the \"First\" and \"Last\" page links\n * @type {?}\n */\nNgbPagination.prototype.boundaryLinks;\n/**\n *  Whether to show the \"Next\" and \"Previous\" page links\n * @type {?}\n */\nNgbPagination.prototype.directionLinks;\n/**\n *  Whether to show ellipsis symbols and first/last page numbers when maxSize > number of pages\n * @type {?}\n */\nNgbPagination.prototype.ellipses;\n/**\n *  Whether to rotate pages when maxSize > number of pages.\n *  Current page will be in the middle\n * @type {?}\n */\nNgbPagination.prototype.rotate;\n/**\n *  Number of items in collection.\n * @type {?}\n */\nNgbPagination.prototype.collectionSize;\n/**\n *  Maximum number of pages to display.\n * @type {?}\n */\nNgbPagination.prototype.maxSize;\n/**\n *  Current page.\n * @type {?}\n */\nNgbPagination.prototype.page;\n/**\n *  Number of items per page.\n * @type {?}\n */\nNgbPagination.prototype.pageSize;\n/**\n *  An event fired when the page is changed.\n *  Event's payload equals to the newly selected page.\n * @type {?}\n */\nNgbPagination.prototype.pageChange;\n/**\n * Pagination display size: small or large\n * @type {?}\n */\nNgbPagination.prototype.size;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}