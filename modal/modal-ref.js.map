{"version":3,"sources":["../../../src/modal/modal-ref.ts"],"names":[],"mappings":"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","file":"modal-ref.js","sourceRoot":"","sourcesContent":["import {Injectable, ComponentRef, ViewRef, ViewContainerRef} from '@angular/core';\nconst Injectable: NeverTypeCheckMe = Injectable;  /* local alias for Closure JSDoc */\nconst ComponentRef: NeverTypeCheckMe = ComponentRef;  /* local alias for Closure JSDoc */\nconst ViewRef: NeverTypeCheckMe = ViewRef;  /* local alias for Closure JSDoc */\nconst ViewContainerRef: NeverTypeCheckMe = ViewContainerRef;  /* local alias for Closure JSDoc */\n\nimport {NgbModalBackdrop} from './modal-backdrop';\nconst NgbModalBackdrop: NeverTypeCheckMe = NgbModalBackdrop;  /* local alias for Closure JSDoc */\nimport {NgbModalWindow} from './modal-window';\nconst NgbModalWindow: NeverTypeCheckMe = NgbModalWindow;  /* local alias for Closure JSDoc */\n\nimport {ContentRef} from '../util/popup';\nconst ContentRef: NeverTypeCheckMe = ContentRef;  /* local alias for Closure JSDoc */\n/**\n * A reference to an active (currently opened) modal. Instances of this class\n * can be injected into components passed as modal content.\n */\n@Injectable()\nexport class NgbActiveModal {\n/**\n * Can be used to close a modal, passing an optional result.\n * @param {?=} result\n * @return {void}\n */\nclose(result?: any): void {}\n/**\n * Can be used to dismiss a modal, passing an optional reason.\n * @param {?=} reason\n * @return {void}\n */\ndismiss(reason?: any): void {}\n}\n/**\n * A reference to a newly opened modal.\n */\n@Injectable()\nexport class NgbModalRef {\nprivate _resolve: (result?: any) => void;\nprivate _reject: (reason?: any) => void;\n/**\n * The instance of component used as modal's content.\n * Undefined when a TemplateRef is used as modal's content.\n * @return {?}\n */\nget componentInstance(): any {\n    if (this._contentRef.componentRef) {\n      return this._contentRef.componentRef.instance;\n    }\n  }\n/**\n * @param {?} instance\n * @return {void}\n */\nset componentInstance(instance: any) {}\n\n  /**\n   * A promise that is resolved when a modal is closed and rejected when a modal is dismissed.\n   */\n  result: Promise<any>;\n/**\n * @param {!ViewContainerRef} _viewContainerRef\n * @param {!ComponentRef<!NgbModalWindow>} _windowCmptRef\n * @param {!ContentRef} _contentRef\n * @param {!ComponentRef<!NgbModalBackdrop>=} _backdropCmptRef\n */\nconstructor(\nprivate _viewContainerRef: ViewContainerRef,\nprivate _windowCmptRef: ComponentRef<NgbModalWindow>,\nprivate _contentRef: ContentRef,\nprivate _backdropCmptRef?: ComponentRef<NgbModalBackdrop>) {\n    _windowCmptRef.instance.dismissEvent.subscribe((reason: any) => { this.dismiss(reason); });\n\n    this.result = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n    this.result.then(null, () => {});\n  }\n/**\n * Can be used to close a modal, passing an optional result.\n * @param {?=} result\n * @return {void}\n */\nclose(result?: any): void {\n    if (this._windowCmptRef) {\n      this._resolve(result);\n      this._removeModalElements();\n    }\n  }\n/**\n * Can be used to dismiss a modal, passing an optional reason.\n * @param {?=} reason\n * @return {void}\n */\ndismiss(reason?: any): void {\n    if (this._windowCmptRef) {\n      this._reject(reason);\n      this._removeModalElements();\n    }\n  }\n/**\n * @return {void}\n */\nprivate _removeModalElements() {\n    this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._windowCmptRef.hostView));\n    if (this._backdropCmptRef) {\n      this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._backdropCmptRef.hostView));\n    }\n    if (this._contentRef && this._contentRef.viewRef) {\n      this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._contentRef.viewRef));\n    }\n\n    this._windowCmptRef = null;\n    this._backdropCmptRef = null;\n    this._contentRef = null;\n  }\n}\n\nfunction NgbModalRef_tsickle_Closure_declarations() {\n/** @type {function(?): void} */\nNgbModalRef.prototype._resolve;\n/** @type {function(?): void} */\nNgbModalRef.prototype._reject;\n/**\n * A promise that is resolved when a modal is closed and rejected when a modal is dismissed.\n * @type {!Promise<?>}\n */\nNgbModalRef.prototype.result;\n/** @type {!ViewContainerRef} */\nNgbModalRef.prototype._viewContainerRef;\n/** @type {!ComponentRef<!NgbModalWindow>} */\nNgbModalRef.prototype._windowCmptRef;\n/** @type {!ContentRef} */\nNgbModalRef.prototype._contentRef;\n/** @type {!ComponentRef<!NgbModalBackdrop>} */\nNgbModalRef.prototype._backdropCmptRef;\n}\n\n"]}