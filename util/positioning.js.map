{"version":3,"sources":["../../../src/util/positioning.ts"],"names":[],"mappings":"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","file":"positioning.js","sourceRoot":"","sourcesContent":["\nexport class Positioning {\n/**\n * @param {!HTMLElement} element\n * @param {string} prop\n * @return {string}\n */\nprivate getStyle(element: HTMLElement, prop: string): string { return window.getComputedStyle(element)[prop]; }\n/**\n * @param {!HTMLElement} element\n * @return {boolean}\n */\nprivate isStaticPositioned(element: HTMLElement): boolean {\n    return (this.getStyle(element, 'position') || 'static') === 'static';\n  }\n/**\n * @param {!HTMLElement} element\n * @return {!HTMLElement}\n */\nprivate offsetParent(element: HTMLElement): HTMLElement {\n    let /** @type {!HTMLElement} */ offsetParentEl = /** @type {!HTMLElement} */(( <HTMLElement>element.offsetParent)) || document.documentElement;\n\n    while (offsetParentEl && offsetParentEl !== document.documentElement && this.isStaticPositioned(offsetParentEl)) {\n      offsetParentEl = /** @type {!HTMLElement} */(( <HTMLElement>offsetParentEl.offsetParent));\n    }\n\n    return offsetParentEl || document.documentElement;\n  }\n/**\n * @param {!HTMLElement} element\n * @param {boolean=} round\n * @return {!ClientRect}\n */\nposition(element: HTMLElement, round = true): ClientRect {\n    let /** @type {!ClientRect} */ elPosition: ClientRect;\n    let /** @type {!ClientRect} */ parentOffset: ClientRect = {width: 0, height: 0, top: 0, bottom: 0, left: 0, right: 0};\n\n    if (this.getStyle(element, 'position') === 'fixed') {\n      elPosition = element.getBoundingClientRect();\n    } else {\n      const /** @type {!HTMLElement} */ offsetParentEl = this.offsetParent(element);\n\n      elPosition = this.offset(element, false);\n\n      if (offsetParentEl !== document.documentElement) {\n        parentOffset = this.offset(offsetParentEl, false);\n      }\n\n      parentOffset.top += offsetParentEl.clientTop;\n      parentOffset.left += offsetParentEl.clientLeft;\n    }\n\n    elPosition.top -= parentOffset.top;\n    elPosition.bottom -= parentOffset.top;\n    elPosition.left -= parentOffset.left;\n    elPosition.right -= parentOffset.left;\n\n    if (round) {\n      elPosition.top = Math.round(elPosition.top);\n      elPosition.bottom = Math.round(elPosition.bottom);\n      elPosition.left = Math.round(elPosition.left);\n      elPosition.right = Math.round(elPosition.right);\n    }\n\n    return elPosition;\n  }\n/**\n * @param {!HTMLElement} element\n * @param {boolean=} round\n * @return {!ClientRect}\n */\noffset(element: HTMLElement, round = true): ClientRect {\n    const /** @type {!ClientRect} */ elBcr = element.getBoundingClientRect();\n    const /** @type {?} */ viewportOffset = {\n      top: window.pageYOffset - document.documentElement.clientTop,\n      left: window.pageXOffset - document.documentElement.clientLeft\n    };\n\n    let /** @type {?} */ elOffset = {\n      height: elBcr.height || element.offsetHeight,\n      width: elBcr.width || element.offsetWidth,\n      top: elBcr.top + viewportOffset.top,\n      bottom: elBcr.bottom + viewportOffset.top,\n      left: elBcr.left + viewportOffset.left,\n      right: elBcr.right + viewportOffset.left\n    };\n\n    if (round) {\n      elOffset.height = Math.round(elOffset.height);\n      elOffset.width = Math.round(elOffset.width);\n      elOffset.top = Math.round(elOffset.top);\n      elOffset.bottom = Math.round(elOffset.bottom);\n      elOffset.left = Math.round(elOffset.left);\n      elOffset.right = Math.round(elOffset.right);\n    }\n\n    return elOffset;\n  }\n/**\n * @param {!HTMLElement} hostElement\n * @param {!HTMLElement} targetElement\n * @param {string} placement\n * @param {boolean=} appendToBody\n * @return {!ClientRect}\n */\npositionElements(hostElement: HTMLElement, targetElement: HTMLElement, placement: string, appendToBody?: boolean):\n      ClientRect {\n    const /** @type {!ClientRect} */ hostElPosition = appendToBody ? this.offset(hostElement, false) : this.position(hostElement, false);\n    const /** @type {?} */ shiftWidth: any = {\n      left: hostElPosition.left,\n      center: hostElPosition.left + hostElPosition.width / 2 - targetElement.offsetWidth / 2,\n      right: hostElPosition.left + hostElPosition.width\n    };\n    const /** @type {?} */ shiftHeight: any = {\n      top: hostElPosition.top,\n      center: hostElPosition.top + hostElPosition.height / 2 - targetElement.offsetHeight / 2,\n      bottom: hostElPosition.top + hostElPosition.height\n    };\n    const /** @type {!ClientRect} */ targetElBCR = targetElement.getBoundingClientRect();\n    const /** @type {string} */ placementPrimary = placement.split('-')[0] || 'top';\n    const /** @type {string} */ placementSecondary = placement.split('-')[1] || 'center';\n\n    let /** @type {!ClientRect} */ targetElPosition: ClientRect = {\n      height: targetElBCR.height || targetElement.offsetHeight,\n      width: targetElBCR.width || targetElement.offsetWidth,\n      top: 0,\n      bottom: targetElBCR.height || targetElement.offsetHeight,\n      left: 0,\n      right: targetElBCR.width || targetElement.offsetWidth\n    };\n\n    switch (placementPrimary) {\n      case 'top':\n        targetElPosition.top = hostElPosition.top - targetElement.offsetHeight;\n        targetElPosition.bottom += hostElPosition.top - targetElement.offsetHeight;\n        targetElPosition.left = shiftWidth[placementSecondary];\n        targetElPosition.right += shiftWidth[placementSecondary];\n        break;\n      case 'bottom':\n        targetElPosition.top = shiftHeight[placementPrimary];\n        targetElPosition.bottom += shiftHeight[placementPrimary];\n        targetElPosition.left = shiftWidth[placementSecondary];\n        targetElPosition.right += shiftWidth[placementSecondary];\n        break;\n      case 'left':\n        targetElPosition.top = shiftHeight[placementSecondary];\n        targetElPosition.bottom += shiftHeight[placementSecondary];\n        targetElPosition.left = hostElPosition.left - targetElement.offsetWidth;\n        targetElPosition.right += hostElPosition.left - targetElement.offsetWidth;\n        break;\n      case 'right':\n        targetElPosition.top = shiftHeight[placementSecondary];\n        targetElPosition.bottom += shiftHeight[placementSecondary];\n        targetElPosition.left = shiftWidth[placementPrimary];\n        targetElPosition.right += shiftWidth[placementPrimary];\n        break;\n    }\n\n    targetElPosition.top = Math.round(targetElPosition.top);\n    targetElPosition.bottom = Math.round(targetElPosition.bottom);\n    targetElPosition.left = Math.round(targetElPosition.left);\n    targetElPosition.right = Math.round(targetElPosition.right);\n\n    return targetElPosition;\n  }\n}\n\nconst /** @type {!Positioning} */ positionService = new Positioning();\n/**\n * @param {!HTMLElement} hostElement\n * @param {!HTMLElement} targetElement\n * @param {string} placement\n * @param {boolean=} appendToBody\n * @return {void}\n */\nexport function positionElements(\n    hostElement: HTMLElement, targetElement: HTMLElement, placement: string, appendToBody?: boolean): void {\n  const /** @type {!ClientRect} */ pos = positionService.positionElements(hostElement, targetElement, placement, appendToBody);\n\n  targetElement.style.top = `${pos.top}px`;\n  targetElement.style.left = `${pos.left}px`;\n}\n"]}